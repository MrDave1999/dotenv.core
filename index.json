{
  "api/DotEnv.Core.BinderException.-ctor.html": {
    "href": "api/DotEnv.Core.BinderException.-ctor.html",
    "title": "Constructor BinderException | DotEnv.Core",
    "keywords": "Constructor BinderException | Improve this Doc View Source BinderException() Initializes a new instance of the BinderException class with a default message. Declaration public BinderException() | Improve this Doc View Source BinderException(String) Initializes a new instance of the BinderException class with the a specified error message. Declaration public BinderException(string message) Parameters Type Name Description String message The message that describes the error."
  },
  "api/DotEnv.Core.BinderException.html": {
    "href": "api/DotEnv.Core.BinderException.html",
    "title": "Class BinderException | DotEnv.Core",
    "keywords": "Class BinderException The exception that is thrown when the binder encounters one or more errors. Inheritance Object Exception BinderException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class BinderException : Exception, ISerializable Constructors Name Description BinderException() Initializes a new instance of the BinderException class with a default message. BinderException(String) Initializes a new instance of the BinderException class with the a specified error message."
  },
  "api/DotEnv.Core.ConcatKeysOptions.html": {
    "href": "api/DotEnv.Core.ConcatKeysOptions.html",
    "title": "Enum ConcatKeysOptions | DotEnv.Core",
    "keywords": "Enum ConcatKeysOptions Specifies the options for concatenation of duplicate keys such as whether to concatenate at the start or end of the value. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public enum ConcatKeysOptions Fields Name Description End This option will tell the parser to concatenate at the end of the value of a duplicate key. Start This option will tell the parser to concatenate at the beginning of the value of a duplicate key."
  },
  "api/DotEnv.Core.Env.CurrentEnvironment.html": {
    "href": "api/DotEnv.Core.Env.CurrentEnvironment.html",
    "title": "Property CurrentEnvironment | DotEnv.Core",
    "keywords": "Property CurrentEnvironment | Improve this Doc View Source CurrentEnvironment Gets or sets the current environment (dev, test, staging, or production). Declaration public static string CurrentEnvironment { get; set; } Property Value Type Description String"
  },
  "api/DotEnv.Core.Env.html": {
    "href": "api/DotEnv.Core.Env.html",
    "title": "Class Env | DotEnv.Core",
    "keywords": "Class Env This class defines methods to perform checks with the current environment. Inheritance Object Env Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public static class Env Properties Name Description CurrentEnvironment Gets or sets the current environment (dev, test, staging, or production). Methods Name Description IsDevelopment() Checks if the current environment name is development , or dev . IsEnvironment(String) Compares the current environment name against the specified value. IsProduction() Checks if the current environment name is production , or prod . IsStaging() Checks if the current environment name is staging . IsTest() Checks if the current environment name is test ."
  },
  "api/DotEnv.Core.Env.IsDevelopment.html": {
    "href": "api/DotEnv.Core.Env.IsDevelopment.html",
    "title": "Method IsDevelopment | DotEnv.Core",
    "keywords": "Method IsDevelopment | Improve this Doc View Source IsDevelopment() Checks if the current environment name is development , or dev . Declaration public static bool IsDevelopment() Returns Type Description Boolean true if the environment name is development or dev, otherwise false ."
  },
  "api/DotEnv.Core.Env.IsEnvironment.html": {
    "href": "api/DotEnv.Core.Env.IsEnvironment.html",
    "title": "Method IsEnvironment | DotEnv.Core",
    "keywords": "Method IsEnvironment | Improve this Doc View Source IsEnvironment(String) Compares the current environment name against the specified value. Declaration public static bool IsEnvironment(string environmentName) Parameters Type Name Description String environmentName The environment name to validate against. Returns Type Description Boolean true if the specified name is the same as the current environment, otherwise false . Exceptions Type Condition ArgumentNullException environmentName is null ."
  },
  "api/DotEnv.Core.Env.IsProduction.html": {
    "href": "api/DotEnv.Core.Env.IsProduction.html",
    "title": "Method IsProduction | DotEnv.Core",
    "keywords": "Method IsProduction | Improve this Doc View Source IsProduction() Checks if the current environment name is production , or prod . Declaration public static bool IsProduction() Returns Type Description Boolean true if the environment name is production or prod, otherwise false ."
  },
  "api/DotEnv.Core.Env.IsStaging.html": {
    "href": "api/DotEnv.Core.Env.IsStaging.html",
    "title": "Method IsStaging | DotEnv.Core",
    "keywords": "Method IsStaging | Improve this Doc View Source IsStaging() Checks if the current environment name is staging . Declaration public static bool IsStaging() Returns Type Description Boolean true if the environment name is staging, otherwise false ."
  },
  "api/DotEnv.Core.Env.IsTest.html": {
    "href": "api/DotEnv.Core.Env.IsTest.html",
    "title": "Method IsTest | DotEnv.Core",
    "keywords": "Method IsTest | Improve this Doc View Source IsTest() Checks if the current environment name is test . Declaration public static bool IsTest() Returns Type Description Boolean true if the environment name is test, otherwise false ."
  },
  "api/DotEnv.Core.EnvAccessorExtensions.GetEnv.html": {
    "href": "api/DotEnv.Core.EnvAccessorExtensions.GetEnv.html",
    "title": "Method GetEnv | DotEnv.Core",
    "keywords": "Method GetEnv | Improve this Doc View Source GetEnv(String) Gets the value of an environment variable from the current process. Declaration public static string GetEnv(this string variable) Parameters Type Name Description String variable The name of the environment variable. Returns Type Description String The value of the environment variable. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set in current process. | Improve this Doc View Source GetEnv<TConversionType>(String) Gets the value of an environment variable in a specific format. Declaration public static TConversionType GetEnv<TConversionType>(this string variable) where TConversionType : IConvertible Parameters Type Name Description String variable The name of the environment variable. Returns Type Description TConversionType An value whose type is TConversionType . Type Parameters Name Description TConversionType The type of object to return. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set in current process."
  },
  "api/DotEnv.Core.EnvAccessorExtensions.html": {
    "href": "api/DotEnv.Core.EnvAccessorExtensions.html",
    "title": "Class EnvAccessorExtensions | DotEnv.Core",
    "keywords": "Class EnvAccessorExtensions Represents an accessor of environment variables for the String class. Inheritance Object EnvAccessorExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public static class EnvAccessorExtensions Methods Name Description GetEnv(String) Gets the value of an environment variable from the current process. GetEnv<TConversionType>(String) Gets the value of an environment variable in a specific format."
  },
  "api/DotEnv.Core.EnvBinder.AllowBindNonPublicProperties.html": {
    "href": "api/DotEnv.Core.EnvBinder.AllowBindNonPublicProperties.html",
    "title": "Method AllowBindNonPublicProperties | DotEnv.Core",
    "keywords": "Method AllowBindNonPublicProperties | Improve this Doc View Source AllowBindNonPublicProperties() Allows binding of non-public properties. This method tells the binder that it can set non-public properties. Declaration public IEnvBinder AllowBindNonPublicProperties() Returns Type Description IEnvBinder An instance implementing the fluent interface. Implements IEnvBinder.AllowBindNonPublicProperties()"
  },
  "api/DotEnv.Core.EnvBinder.Bind.html": {
    "href": "api/DotEnv.Core.EnvBinder.Bind.html",
    "title": "Method Bind | DotEnv.Core",
    "keywords": "Method Bind | Improve this Doc View Source Bind<TSettings>() Binds the instance of the environment variables provider to a new instance of type TSettings. Declaration public TSettings Bind<TSettings>() where TSettings : new() Returns Type Description TSettings The new instance of TSettings. Type Parameters Name Description TSettings The type of the new instance to bind. Implements IEnvBinder.Bind<TSettings>() Remarks Binds only read-write properties and, moreover, only sets public properties. Exceptions Type Condition BinderException If the binder encounters one or more errors. | Improve this Doc View Source Bind<TSettings>(out EnvValidationResult) Binds the instance of the environment variables provider to a new instance of type TSettings. Declaration public TSettings Bind<TSettings>(out EnvValidationResult result) where TSettings : new() Parameters Type Name Description EnvValidationResult result The result contains the errors found by the binder. Returns Type Description TSettings The new instance of TSettings. Type Parameters Name Description TSettings The type of the new instance to bind. Implements IEnvBinder.Bind<TSettings>(out EnvValidationResult) Remarks Binds only read-write properties and, moreover, only sets public properties. Exceptions Type Condition BinderException If the binder encounters one or more errors."
  },
  "api/DotEnv.Core.EnvBinder.-ctor.html": {
    "href": "api/DotEnv.Core.EnvBinder.-ctor.html",
    "title": "Constructor EnvBinder | DotEnv.Core",
    "keywords": "Constructor EnvBinder | Improve this Doc View Source EnvBinder() Initializes a new instance of the EnvBinder class. Declaration public EnvBinder() | Improve this Doc View Source EnvBinder(IEnvironmentVariablesProvider) Initializes a new instance of the EnvBinder class with environment variables provider. Declaration public EnvBinder(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Exceptions Type Condition ArgumentNullException provider is null ."
  },
  "api/DotEnv.Core.EnvBinder.html": {
    "href": "api/DotEnv.Core.EnvBinder.html",
    "title": "Class EnvBinder | DotEnv.Core",
    "keywords": "Class EnvBinder Allows binding strongly typed objects to configuration values. Inheritance Object EnvBinder Implements IEnvBinder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvBinder : IEnvBinder Constructors Name Description EnvBinder() Initializes a new instance of the EnvBinder class. EnvBinder(IEnvironmentVariablesProvider) Initializes a new instance of the EnvBinder class with environment variables provider. Methods Name Description AllowBindNonPublicProperties() Allows binding of non-public properties. This method tells the binder that it can set non-public properties. Bind<TSettings>() Binds the instance of the environment variables provider to a new instance of type TSettings. Bind<TSettings>(out EnvValidationResult) Binds the instance of the environment variables provider to a new instance of type TSettings. IgnoreException() Disables/ignores BinderException . This method tells the binder not to throw an exception when it encounters one or more errors."
  },
  "api/DotEnv.Core.EnvBinder.IgnoreException.html": {
    "href": "api/DotEnv.Core.EnvBinder.IgnoreException.html",
    "title": "Method IgnoreException | DotEnv.Core",
    "keywords": "Method IgnoreException | Improve this Doc View Source IgnoreException() Disables/ignores BinderException . This method tells the binder not to throw an exception when it encounters one or more errors. Declaration public IEnvBinder IgnoreException() Returns Type Description IEnvBinder An instance implementing the fluent interface. Implements IEnvBinder.IgnoreException()"
  },
  "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.CreateBinder.html": {
    "href": "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.CreateBinder.html",
    "title": "Method CreateBinder | DotEnv.Core",
    "keywords": "Method CreateBinder | Improve this Doc View Source CreateBinder(IEnvironmentVariablesProvider) Creates an instance that implements the IEnvBinder interface. Declaration public static IEnvBinder CreateBinder(this IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Returns Type Description IEnvBinder An instance that implements the IEnvBinder interface."
  },
  "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.CreateReader.html": {
    "href": "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.CreateReader.html",
    "title": "Method CreateReader | DotEnv.Core",
    "keywords": "Method CreateReader | Improve this Doc View Source CreateReader(IEnvironmentVariablesProvider) Creates an instance that implements the IEnvReader interface. Declaration public static IEnvReader CreateReader(this IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Returns Type Description IEnvReader An instance that implements the IEnvReader interface."
  },
  "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.CreateValidator.html": {
    "href": "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.CreateValidator.html",
    "title": "Method CreateValidator | DotEnv.Core",
    "keywords": "Method CreateValidator | Improve this Doc View Source CreateValidator(IEnvironmentVariablesProvider) Creates an instance that implements the IEnvValidator interface. Declaration public static IEnvValidator CreateValidator(this IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Returns Type Description IEnvValidator An instance that implements the IEnvValidator interface."
  },
  "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.html": {
    "href": "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.html",
    "title": "Class EnvironmentVariablesProviderExtensions | DotEnv.Core",
    "keywords": "Class EnvironmentVariablesProviderExtensions Extension methods for adding IEnvironmentVariablesProvider . Inheritance Object EnvironmentVariablesProviderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public static class EnvironmentVariablesProviderExtensions Methods Name Description CreateBinder(IEnvironmentVariablesProvider) Creates an instance that implements the IEnvBinder interface. CreateReader(IEnvironmentVariablesProvider) Creates an instance that implements the IEnvReader interface. CreateValidator(IEnvironmentVariablesProvider) Creates an instance that implements the IEnvValidator interface. ToDictionary(IEnvironmentVariablesProvider) Converts the environment variables provider to a dictionary."
  },
  "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.ToDictionary.html": {
    "href": "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.ToDictionary.html",
    "title": "Method ToDictionary | DotEnv.Core",
    "keywords": "Method ToDictionary | Improve this Doc View Source ToDictionary(IEnvironmentVariablesProvider) Converts the environment variables provider to a dictionary. Declaration public static Dictionary<string, string> ToDictionary(this IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Returns Type Description Dictionary < String , String > A dictionary with the environment variables."
  },
  "api/DotEnv.Core.EnvKeyAttribute.-ctor.html": {
    "href": "api/DotEnv.Core.EnvKeyAttribute.-ctor.html",
    "title": "Constructor EnvKeyAttribute | DotEnv.Core",
    "keywords": "Constructor EnvKeyAttribute | Improve this Doc View Source EnvKeyAttribute() Initializes a new instance of the EnvKeyAttribute class. Declaration public EnvKeyAttribute() | Improve this Doc View Source EnvKeyAttribute(String) Initializes a new instance of the EnvKeyAttribute class with the name of the key. Declaration public EnvKeyAttribute(string name) Parameters Type Name Description String name The name of the key the property is mapped to."
  },
  "api/DotEnv.Core.EnvKeyAttribute.html": {
    "href": "api/DotEnv.Core.EnvKeyAttribute.html",
    "title": "Class EnvKeyAttribute | DotEnv.Core",
    "keywords": "Class EnvKeyAttribute Represents the key of a .env file that is assigned to a property. Inheritance Object Attribute EnvKeyAttribute Inherited Members Attribute.Equals(Object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.Match(Object) Attribute.TypeId Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvKeyAttribute : Attribute Constructors Name Description EnvKeyAttribute() Initializes a new instance of the EnvKeyAttribute class. EnvKeyAttribute(String) Initializes a new instance of the EnvKeyAttribute class with the name of the key. Properties Name Description Name Gets the name of the key the property is mapped to."
  },
  "api/DotEnv.Core.EnvKeyAttribute.Name.html": {
    "href": "api/DotEnv.Core.EnvKeyAttribute.Name.html",
    "title": "Property Name | DotEnv.Core",
    "keywords": "Property Name | Improve this Doc View Source Name Gets the name of the key the property is mapped to. Declaration public string Name { get; } Property Value Type Description String"
  },
  "api/DotEnv.Core.EnvLoader.AddEnvFile.html": {
    "href": "api/DotEnv.Core.EnvLoader.AddEnvFile.html",
    "title": "Method AddEnvFile | DotEnv.Core",
    "keywords": "Method AddEnvFile | Improve this Doc View Source AddEnvFile(String) Adds an .env file in a collection. Declaration public IEnvLoader AddEnvFile(string path) Parameters Type Name Description String path The .env file path to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AddEnvFile(String) Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, Encoding) Adds an .env file with its encoding in a collection. Declaration public IEnvLoader AddEnvFile(string path, Encoding encoding) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AddEnvFile(String, Encoding) Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, Encoding, Boolean) Adds an .env file with its encoding in a collection. Declaration public IEnvLoader AddEnvFile(string path, Encoding encoding, bool optional) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AddEnvFile(String, Encoding, Boolean) Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, String) Adds an .env file with its encoding name in a collection. Declaration public IEnvLoader AddEnvFile(string path, string encodingName) Parameters Type Name Description String path The .env file path to add. String encodingName The encoding name of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AddEnvFile(String, String) Exceptions Type Condition ArgumentNullException path , or encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source AddEnvFile(String, String, Boolean) Adds an .env file with its encoding name in a collection. Declaration public IEnvLoader AddEnvFile(string path, string encodingName, bool optional) Parameters Type Name Description String path The .env file path to add. String encodingName The encoding name of the .env file. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AddEnvFile(String, String, Boolean) Exceptions Type Condition ArgumentNullException path , or encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source AddEnvFile(String, Boolean) Adds an .env file to a collection and indicates whether the .env file can be optional, or not. Declaration public IEnvLoader AddEnvFile(string path, bool optional) Parameters Type Name Description String path The .env file path to add. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AddEnvFile(String, Boolean) Exceptions Type Condition ArgumentNullException path is null ."
  },
  "api/DotEnv.Core.EnvLoader.AddEnvFiles.html": {
    "href": "api/DotEnv.Core.EnvLoader.AddEnvFiles.html",
    "title": "Method AddEnvFiles | DotEnv.Core",
    "keywords": "Method AddEnvFiles | Improve this Doc View Source AddEnvFiles(String[]) Adds the .env files in a collection. Declaration public IEnvLoader AddEnvFiles(params string[] paths) Parameters Type Name Description String [] paths The .env files paths to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AddEnvFiles(String[]) Exceptions Type Condition ArgumentNullException paths is null . ArgumentException The length of the paths list is zero."
  },
  "api/DotEnv.Core.EnvLoader.AllowAllEnvFilesOptional.html": {
    "href": "api/DotEnv.Core.EnvLoader.AllowAllEnvFilesOptional.html",
    "title": "Method AllowAllEnvFilesOptional | DotEnv.Core",
    "keywords": "Method AllowAllEnvFilesOptional | Improve this Doc View Source AllowAllEnvFilesOptional() Allows all .env files to be optional. This tells the loader not to raise an error in case the .env file is not found in any directory. Declaration public IEnvLoader AllowAllEnvFilesOptional() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AllowAllEnvFilesOptional()"
  },
  "api/DotEnv.Core.EnvLoader.AllowConcatDuplicateKeys.html": {
    "href": "api/DotEnv.Core.EnvLoader.AllowConcatDuplicateKeys.html",
    "title": "Method AllowConcatDuplicateKeys | DotEnv.Core",
    "keywords": "Method AllowConcatDuplicateKeys | Improve this Doc View Source AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. Declaration public IEnvLoader AllowConcatDuplicateKeys(ConcatKeysOptions option = ConcatKeysOptions.End) Parameters Type Name Description ConcatKeysOptions option The option indicates whether the concatenation is at the start or at the end of the value. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AllowConcatDuplicateKeys(ConcatKeysOptions) Exceptions Type Condition ArgumentException option is not one of the ConcatKeysOptions values."
  },
  "api/DotEnv.Core.EnvLoader.AllowOverwriteExistingVars.html": {
    "href": "api/DotEnv.Core.EnvLoader.AllowOverwriteExistingVars.html",
    "title": "Method AllowOverwriteExistingVars | DotEnv.Core",
    "keywords": "Method AllowOverwriteExistingVars | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Declaration public IEnvLoader AllowOverwriteExistingVars() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AllowOverwriteExistingVars()"
  },
  "api/DotEnv.Core.EnvLoader.AvoidModifyEnvironment.html": {
    "href": "api/DotEnv.Core.EnvLoader.AvoidModifyEnvironment.html",
    "title": "Method AvoidModifyEnvironment | DotEnv.Core",
    "keywords": "Method AvoidModifyEnvironment | Improve this Doc View Source AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. Declaration public IEnvLoader AvoidModifyEnvironment() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.AvoidModifyEnvironment()"
  },
  "api/DotEnv.Core.EnvLoader.DisableTrimEndKeys.html": {
    "href": "api/DotEnv.Core.EnvLoader.DisableTrimEndKeys.html",
    "title": "Method DisableTrimEndKeys | DotEnv.Core",
    "keywords": "Method DisableTrimEndKeys | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. Declaration public IEnvLoader DisableTrimEndKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.DisableTrimEndKeys()"
  },
  "api/DotEnv.Core.EnvLoader.DisableTrimEndValues.html": {
    "href": "api/DotEnv.Core.EnvLoader.DisableTrimEndValues.html",
    "title": "Method DisableTrimEndValues | DotEnv.Core",
    "keywords": "Method DisableTrimEndValues | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. Declaration public IEnvLoader DisableTrimEndValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.DisableTrimEndValues()"
  },
  "api/DotEnv.Core.EnvLoader.DisableTrimKeys.html": {
    "href": "api/DotEnv.Core.EnvLoader.DisableTrimKeys.html",
    "title": "Method DisableTrimKeys | DotEnv.Core",
    "keywords": "Method DisableTrimKeys | Improve this Doc View Source DisableTrimKeys() Disables the trim at the start and end of the keys. Declaration public IEnvLoader DisableTrimKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.DisableTrimKeys()"
  },
  "api/DotEnv.Core.EnvLoader.DisableTrimStartComments.html": {
    "href": "api/DotEnv.Core.EnvLoader.DisableTrimStartComments.html",
    "title": "Method DisableTrimStartComments | DotEnv.Core",
    "keywords": "Method DisableTrimStartComments | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. Declaration public IEnvLoader DisableTrimStartComments() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.DisableTrimStartComments()"
  },
  "api/DotEnv.Core.EnvLoader.DisableTrimStartKeys.html": {
    "href": "api/DotEnv.Core.EnvLoader.DisableTrimStartKeys.html",
    "title": "Method DisableTrimStartKeys | DotEnv.Core",
    "keywords": "Method DisableTrimStartKeys | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. Declaration public IEnvLoader DisableTrimStartKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.DisableTrimStartKeys()"
  },
  "api/DotEnv.Core.EnvLoader.DisableTrimStartValues.html": {
    "href": "api/DotEnv.Core.EnvLoader.DisableTrimStartValues.html",
    "title": "Method DisableTrimStartValues | DotEnv.Core",
    "keywords": "Method DisableTrimStartValues | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. Declaration public IEnvLoader DisableTrimStartValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.DisableTrimStartValues()"
  },
  "api/DotEnv.Core.EnvLoader.DisableTrimValues.html": {
    "href": "api/DotEnv.Core.EnvLoader.DisableTrimValues.html",
    "title": "Method DisableTrimValues | DotEnv.Core",
    "keywords": "Method DisableTrimValues | Improve this Doc View Source DisableTrimValues() Disables the trim at the start and end of the values. Declaration public IEnvLoader DisableTrimValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.DisableTrimValues()"
  },
  "api/DotEnv.Core.EnvLoader.EnableFileNotFoundException.html": {
    "href": "api/DotEnv.Core.EnvLoader.EnableFileNotFoundException.html",
    "title": "Method EnableFileNotFoundException | DotEnv.Core",
    "keywords": "Method EnableFileNotFoundException | Improve this Doc View Source EnableFileNotFoundException() Enables FileNotFoundException . This method tells the loader to throw an exception when one or more .env files are not found. Declaration public IEnvLoader EnableFileNotFoundException() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.EnableFileNotFoundException()"
  },
  "api/DotEnv.Core.EnvLoader.html": {
    "href": "api/DotEnv.Core.EnvLoader.html",
    "title": "Class EnvLoader | DotEnv.Core",
    "keywords": "Class EnvLoader Represents the .env files loader. Inheritance Object EnvLoader Implements IEnvLoader Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvLoader : IEnvLoader Methods Name Description AddEnvFile(String) Adds an .env file in a collection. AddEnvFile(String, Boolean) Adds an .env file to a collection and indicates whether the .env file can be optional, or not. AddEnvFile(String, String) Adds an .env file with its encoding name in a collection. AddEnvFile(String, String, Boolean) Adds an .env file with its encoding name in a collection. AddEnvFile(String, Encoding) Adds an .env file with its encoding in a collection. AddEnvFile(String, Encoding, Boolean) Adds an .env file with its encoding in a collection. AddEnvFiles(String[]) Adds the .env files in a collection. AllowAllEnvFilesOptional() Allows all .env files to be optional. This tells the loader not to raise an error in case the .env file is not found in any directory. AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. DisableTrimKeys() Disables the trim at the start and end of the keys. DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. DisableTrimValues() Disables the trim at the start and end of the values. EnableFileNotFoundException() Enables FileNotFoundException . This method tells the loader to throw an exception when one or more .env files are not found. IgnoreParentDirectories() Ignores search in parent directories. This tells the loader not to search in parent directories when the .env file is not in a directory. IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Load() Loads one or more .env files. By default, it will search for a file called .env . Load(out EnvValidationResult) Loads one or more .env files. By default, it will search for a file called .env . LoadEnv() Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local (has the highest priority). .env.local .env.[environment] .env (has the lowest priority). The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . LoadEnv(out EnvValidationResult) Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local (has the highest priority). .env.local .env.[environment] .env (has the lowest priority). The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . SetBasePath(String) Sets the base path for the .env files. SetCommentChar(Char) Sets the character that will define the beginning of a comment. SetDefaultEnvFileName(String) Sets the default name of an .env file. SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. SetEncoding(String) Sets the encoding name of the .env files. SetEncoding(Encoding) Sets the encoding of the .env files. SetEnvironmentName(String) Sets the name of the environment. SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider."
  },
  "api/DotEnv.Core.EnvLoader.IgnoreParentDirectories.html": {
    "href": "api/DotEnv.Core.EnvLoader.IgnoreParentDirectories.html",
    "title": "Method IgnoreParentDirectories | DotEnv.Core",
    "keywords": "Method IgnoreParentDirectories | Improve this Doc View Source IgnoreParentDirectories() Ignores search in parent directories. This tells the loader not to search in parent directories when the .env file is not in a directory. Declaration public IEnvLoader IgnoreParentDirectories() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.IgnoreParentDirectories()"
  },
  "api/DotEnv.Core.EnvLoader.IgnoreParserException.html": {
    "href": "api/DotEnv.Core.EnvLoader.IgnoreParserException.html",
    "title": "Method IgnoreParserException | DotEnv.Core",
    "keywords": "Method IgnoreParserException | Improve this Doc View Source IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Declaration public IEnvLoader IgnoreParserException() Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.IgnoreParserException()"
  },
  "api/DotEnv.Core.EnvLoader.Load.html": {
    "href": "api/DotEnv.Core.EnvLoader.Load.html",
    "title": "Method Load | DotEnv.Core",
    "keywords": "Method Load | Improve this Doc View Source Load() Loads one or more .env files. By default, it will search for a file called .env . Declaration public IEnvironmentVariablesProvider Load() Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Implements IEnvLoader.Load() Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source Load(out EnvValidationResult) Loads one or more .env files. By default, it will search for a file called .env . Declaration public IEnvironmentVariablesProvider Load(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the loader. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Implements IEnvLoader.Load(out EnvValidationResult) Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked."
  },
  "api/DotEnv.Core.EnvLoader.LoadEnv.html": {
    "href": "api/DotEnv.Core.EnvLoader.LoadEnv.html",
    "title": "Method LoadEnv | DotEnv.Core",
    "keywords": "Method LoadEnv | Improve this Doc View Source LoadEnv() Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local (has the highest priority). .env.local .env.[environment] .env (has the lowest priority). The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . Declaration public IEnvironmentVariablesProvider LoadEnv() Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Implements IEnvLoader.LoadEnv() Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source LoadEnv(out EnvValidationResult) Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local (has the highest priority). .env.local .env.[environment] .env (has the lowest priority). The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . Declaration public IEnvironmentVariablesProvider LoadEnv(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the loader. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Implements IEnvLoader.LoadEnv(out EnvValidationResult) Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked."
  },
  "api/DotEnv.Core.EnvLoader.SetBasePath.html": {
    "href": "api/DotEnv.Core.EnvLoader.SetBasePath.html",
    "title": "Method SetBasePath | DotEnv.Core",
    "keywords": "Method SetBasePath | Improve this Doc View Source SetBasePath(String) Sets the base path for the .env files. Declaration public IEnvLoader SetBasePath(string basePath) Parameters Type Name Description String basePath The base path to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.SetBasePath(String) Exceptions Type Condition ArgumentNullException basePath is null ."
  },
  "api/DotEnv.Core.EnvLoader.SetCommentChar.html": {
    "href": "api/DotEnv.Core.EnvLoader.SetCommentChar.html",
    "title": "Method SetCommentChar | DotEnv.Core",
    "keywords": "Method SetCommentChar | Improve this Doc View Source SetCommentChar(Char) Sets the character that will define the beginning of a comment. Declaration public IEnvLoader SetCommentChar(char commentChar) Parameters Type Name Description Char commentChar The character that defines the beginning of a comment. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.SetCommentChar(Char)"
  },
  "api/DotEnv.Core.EnvLoader.SetDefaultEnvFileName.html": {
    "href": "api/DotEnv.Core.EnvLoader.SetDefaultEnvFileName.html",
    "title": "Method SetDefaultEnvFileName | DotEnv.Core",
    "keywords": "Method SetDefaultEnvFileName | Improve this Doc View Source SetDefaultEnvFileName(String) Sets the default name of an .env file. Declaration public IEnvLoader SetDefaultEnvFileName(string envFileName) Parameters Type Name Description String envFileName The default name to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.SetDefaultEnvFileName(String) Exceptions Type Condition ArgumentNullException envFileName is null ."
  },
  "api/DotEnv.Core.EnvLoader.SetDelimiterKeyValuePair.html": {
    "href": "api/DotEnv.Core.EnvLoader.SetDelimiterKeyValuePair.html",
    "title": "Method SetDelimiterKeyValuePair | DotEnv.Core",
    "keywords": "Method SetDelimiterKeyValuePair | Improve this Doc View Source SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. Declaration public IEnvLoader SetDelimiterKeyValuePair(char separator) Parameters Type Name Description Char separator The character that separates the key-value pair. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.SetDelimiterKeyValuePair(Char)"
  },
  "api/DotEnv.Core.EnvLoader.SetEncoding.html": {
    "href": "api/DotEnv.Core.EnvLoader.SetEncoding.html",
    "title": "Method SetEncoding | DotEnv.Core",
    "keywords": "Method SetEncoding | Improve this Doc View Source SetEncoding(Encoding) Sets the encoding of the .env files. Declaration public IEnvLoader SetEncoding(Encoding encoding) Parameters Type Name Description Encoding encoding The type of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.SetEncoding(Encoding) Exceptions Type Condition ArgumentNullException encoding is null . | Improve this Doc View Source SetEncoding(String) Sets the encoding name of the .env files. Declaration public IEnvLoader SetEncoding(string encodingName) Parameters Type Name Description String encodingName The name of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.SetEncoding(String) Exceptions Type Condition ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform."
  },
  "api/DotEnv.Core.EnvLoader.SetEnvironmentName.html": {
    "href": "api/DotEnv.Core.EnvLoader.SetEnvironmentName.html",
    "title": "Method SetEnvironmentName | DotEnv.Core",
    "keywords": "Method SetEnvironmentName | Improve this Doc View Source SetEnvironmentName(String) Sets the name of the environment. Declaration public IEnvLoader SetEnvironmentName(string envName) Parameters Type Name Description String envName The name of the environment. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.SetEnvironmentName(String) Exceptions Type Condition ArgumentNullException envName is null . ArgumentException envName is a Empty or consists only of white-space characters."
  },
  "api/DotEnv.Core.EnvLoader.SetEnvironmentVariablesProvider.html": {
    "href": "api/DotEnv.Core.EnvLoader.SetEnvironmentVariablesProvider.html",
    "title": "Method SetEnvironmentVariablesProvider | DotEnv.Core",
    "keywords": "Method SetEnvironmentVariablesProvider | Improve this Doc View Source SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider. Declaration public IEnvLoader SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The custom environment variables provider. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader.SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Exceptions Type Condition ArgumentNullException provider is null ."
  },
  "api/DotEnv.Core.EnvParser.AllowConcatDuplicateKeys.html": {
    "href": "api/DotEnv.Core.EnvParser.AllowConcatDuplicateKeys.html",
    "title": "Method AllowConcatDuplicateKeys | DotEnv.Core",
    "keywords": "Method AllowConcatDuplicateKeys | Improve this Doc View Source AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. Declaration public IEnvParser AllowConcatDuplicateKeys(ConcatKeysOptions option = ConcatKeysOptions.End) Parameters Type Name Description ConcatKeysOptions option The option indicates whether the concatenation is at the start or at the end of the value. Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.AllowConcatDuplicateKeys(ConcatKeysOptions) Exceptions Type Condition ArgumentException option is not one of the ConcatKeysOptions values."
  },
  "api/DotEnv.Core.EnvParser.AllowOverwriteExistingVars.html": {
    "href": "api/DotEnv.Core.EnvParser.AllowOverwriteExistingVars.html",
    "title": "Method AllowOverwriteExistingVars | DotEnv.Core",
    "keywords": "Method AllowOverwriteExistingVars | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Declaration public IEnvParser AllowOverwriteExistingVars() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.AllowOverwriteExistingVars()"
  },
  "api/DotEnv.Core.EnvParser.AvoidModifyEnvironment.html": {
    "href": "api/DotEnv.Core.EnvParser.AvoidModifyEnvironment.html",
    "title": "Method AvoidModifyEnvironment | DotEnv.Core",
    "keywords": "Method AvoidModifyEnvironment | Improve this Doc View Source AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. Declaration public IEnvParser AvoidModifyEnvironment() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.AvoidModifyEnvironment()"
  },
  "api/DotEnv.Core.EnvParser.DisableTrimEndKeys.html": {
    "href": "api/DotEnv.Core.EnvParser.DisableTrimEndKeys.html",
    "title": "Method DisableTrimEndKeys | DotEnv.Core",
    "keywords": "Method DisableTrimEndKeys | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. Declaration public IEnvParser DisableTrimEndKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.DisableTrimEndKeys()"
  },
  "api/DotEnv.Core.EnvParser.DisableTrimEndValues.html": {
    "href": "api/DotEnv.Core.EnvParser.DisableTrimEndValues.html",
    "title": "Method DisableTrimEndValues | DotEnv.Core",
    "keywords": "Method DisableTrimEndValues | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. Declaration public IEnvParser DisableTrimEndValues() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.DisableTrimEndValues()"
  },
  "api/DotEnv.Core.EnvParser.DisableTrimKeys.html": {
    "href": "api/DotEnv.Core.EnvParser.DisableTrimKeys.html",
    "title": "Method DisableTrimKeys | DotEnv.Core",
    "keywords": "Method DisableTrimKeys | Improve this Doc View Source DisableTrimKeys() Disables the trim at the start and end of the keys. Declaration public IEnvParser DisableTrimKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.DisableTrimKeys()"
  },
  "api/DotEnv.Core.EnvParser.DisableTrimStartComments.html": {
    "href": "api/DotEnv.Core.EnvParser.DisableTrimStartComments.html",
    "title": "Method DisableTrimStartComments | DotEnv.Core",
    "keywords": "Method DisableTrimStartComments | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. Declaration public IEnvParser DisableTrimStartComments() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.DisableTrimStartComments()"
  },
  "api/DotEnv.Core.EnvParser.DisableTrimStartKeys.html": {
    "href": "api/DotEnv.Core.EnvParser.DisableTrimStartKeys.html",
    "title": "Method DisableTrimStartKeys | DotEnv.Core",
    "keywords": "Method DisableTrimStartKeys | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. Declaration public IEnvParser DisableTrimStartKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.DisableTrimStartKeys()"
  },
  "api/DotEnv.Core.EnvParser.DisableTrimStartValues.html": {
    "href": "api/DotEnv.Core.EnvParser.DisableTrimStartValues.html",
    "title": "Method DisableTrimStartValues | DotEnv.Core",
    "keywords": "Method DisableTrimStartValues | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. Declaration public IEnvParser DisableTrimStartValues() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.DisableTrimStartValues()"
  },
  "api/DotEnv.Core.EnvParser.DisableTrimValues.html": {
    "href": "api/DotEnv.Core.EnvParser.DisableTrimValues.html",
    "title": "Method DisableTrimValues | DotEnv.Core",
    "keywords": "Method DisableTrimValues | Improve this Doc View Source DisableTrimValues() Disables the trim at the start and end of the values. Declaration public IEnvParser DisableTrimValues() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.DisableTrimValues()"
  },
  "api/DotEnv.Core.EnvParser.html": {
    "href": "api/DotEnv.Core.EnvParser.html",
    "title": "Class EnvParser | DotEnv.Core",
    "keywords": "Class EnvParser Defines the methods that control the parser behavior. Inheritance Object EnvParser Implements IEnvParser Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvParser : IEnvParser Methods Name Description AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. DisableTrimKeys() Disables the trim at the start and end of the keys. DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. DisableTrimValues() Disables the trim at the start and end of the values. IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Parse(String) Start the parsing to extract the key-value pair from a data source. Parse(String, out EnvValidationResult) Start the parsing to extract the key-value pair from a data source. SetCommentChar(Char) Sets the character that will define the beginning of a comment. SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider."
  },
  "api/DotEnv.Core.EnvParser.IgnoreParserException.html": {
    "href": "api/DotEnv.Core.EnvParser.IgnoreParserException.html",
    "title": "Method IgnoreParserException | DotEnv.Core",
    "keywords": "Method IgnoreParserException | Improve this Doc View Source IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Declaration public IEnvParser IgnoreParserException() Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.IgnoreParserException()"
  },
  "api/DotEnv.Core.EnvParser.Parse.html": {
    "href": "api/DotEnv.Core.EnvParser.Parse.html",
    "title": "Method Parse | DotEnv.Core",
    "keywords": "Method Parse | Improve this Doc View Source Parse(String) Start the parsing to extract the key-value pair from a data source. Declaration public IEnvironmentVariablesProvider Parse(string dataSource) Parameters Type Name Description String dataSource The data source to parsing. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Implements IEnvParser.Parse(String) Exceptions Type Condition ArgumentNullException dataSource is null . ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. | Improve this Doc View Source Parse(String, out EnvValidationResult) Start the parsing to extract the key-value pair from a data source. Declaration public IEnvironmentVariablesProvider Parse(string dataSource, out EnvValidationResult result) Parameters Type Name Description String dataSource The data source to parsing. EnvValidationResult result The result contains the errors found by the parser. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Implements IEnvParser.Parse(String, out EnvValidationResult) Exceptions Type Condition ArgumentNullException dataSource is null . ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked."
  },
  "api/DotEnv.Core.EnvParser.SetCommentChar.html": {
    "href": "api/DotEnv.Core.EnvParser.SetCommentChar.html",
    "title": "Method SetCommentChar | DotEnv.Core",
    "keywords": "Method SetCommentChar | Improve this Doc View Source SetCommentChar(Char) Sets the character that will define the beginning of a comment. Declaration public IEnvParser SetCommentChar(char commentChar) Parameters Type Name Description Char commentChar The character that defines the beginning of a comment. Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.SetCommentChar(Char)"
  },
  "api/DotEnv.Core.EnvParser.SetDelimiterKeyValuePair.html": {
    "href": "api/DotEnv.Core.EnvParser.SetDelimiterKeyValuePair.html",
    "title": "Method SetDelimiterKeyValuePair | DotEnv.Core",
    "keywords": "Method SetDelimiterKeyValuePair | Improve this Doc View Source SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. Declaration public IEnvParser SetDelimiterKeyValuePair(char separator) Parameters Type Name Description Char separator The character that separates the key-value pair. Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.SetDelimiterKeyValuePair(Char)"
  },
  "api/DotEnv.Core.EnvParser.SetEnvironmentVariablesProvider.html": {
    "href": "api/DotEnv.Core.EnvParser.SetEnvironmentVariablesProvider.html",
    "title": "Method SetEnvironmentVariablesProvider | DotEnv.Core",
    "keywords": "Method SetEnvironmentVariablesProvider | Improve this Doc View Source SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider. Declaration public IEnvParser SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The custom environment variables provider. Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser.SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Exceptions Type Condition ArgumentNullException provider is null ."
  },
  "api/DotEnv.Core.EnvReader.-ctor.html": {
    "href": "api/DotEnv.Core.EnvReader.-ctor.html",
    "title": "Constructor EnvReader | DotEnv.Core",
    "keywords": "Constructor EnvReader | Improve this Doc View Source EnvReader() Initializes a new instance of the EnvReader class. Declaration public EnvReader() | Improve this Doc View Source EnvReader(IEnvironmentVariablesProvider) Initializes a new instance of the EnvReader class with environment variables provider. Declaration public EnvReader(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Exceptions Type Condition ArgumentNullException provider is null ."
  },
  "api/DotEnv.Core.EnvReader.EnvBool.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvBool.html",
    "title": "Method EnvBool | DotEnv.Core",
    "keywords": "Method EnvBool | Improve this Doc View Source EnvBool(String, Boolean) Gets the value of a variable in bool format. Declaration public virtual bool EnvBool(string variable, bool defaultValue = false) Parameters Type Name Description String variable Environment variable name. Boolean defaultValue A default value in case the variable is not set. Returns Type Description Boolean A value of the environment variable in bool format. Implements IEnvReader.EnvBool(String, Boolean) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in bool format."
  },
  "api/DotEnv.Core.EnvReader.EnvByte.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvByte.html",
    "title": "Method EnvByte | DotEnv.Core",
    "keywords": "Method EnvByte | Improve this Doc View Source EnvByte(String, Byte) Gets the value of a variable in byte format. Declaration public virtual byte EnvByte(string variable, byte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Byte defaultValue A default value in case the variable is not set. Returns Type Description Byte A value of the environment variable in byte format. Implements IEnvReader.EnvByte(String, Byte) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in byte format."
  },
  "api/DotEnv.Core.EnvReader.EnvChar.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvChar.html",
    "title": "Method EnvChar | DotEnv.Core",
    "keywords": "Method EnvChar | Improve this Doc View Source EnvChar(String, Char) Gets the value of a variable in char format. Declaration public virtual char EnvChar(string variable, char defaultValue = '\\0') Parameters Type Name Description String variable Environment variable name. Char defaultValue A default value in case the variable is not set. Returns Type Description Char A value of the environment variable in char format. Implements IEnvReader.EnvChar(String, Char) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in char format."
  },
  "api/DotEnv.Core.EnvReader.EnvDecimal.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvDecimal.html",
    "title": "Method EnvDecimal | DotEnv.Core",
    "keywords": "Method EnvDecimal | Improve this Doc View Source EnvDecimal(String, Decimal) Gets the value of a variable in decimal format. Declaration public virtual decimal EnvDecimal(string variable, decimal defaultValue = 0M) Parameters Type Name Description String variable Environment variable name. Decimal defaultValue A default value in case the variable is not set. Returns Type Description Decimal A value of the environment variable in decimal format. Implements IEnvReader.EnvDecimal(String, Decimal) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in decimal format."
  },
  "api/DotEnv.Core.EnvReader.EnvDouble.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvDouble.html",
    "title": "Method EnvDouble | DotEnv.Core",
    "keywords": "Method EnvDouble | Improve this Doc View Source EnvDouble(String, Double) Gets the value of a variable in double format. Declaration public virtual double EnvDouble(string variable, double defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Double defaultValue A default value in case the variable is not set. Returns Type Description Double A value of the environment variable in double format. Implements IEnvReader.EnvDouble(String, Double) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in double format."
  },
  "api/DotEnv.Core.EnvReader.EnvFloat.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvFloat.html",
    "title": "Method EnvFloat | DotEnv.Core",
    "keywords": "Method EnvFloat | Improve this Doc View Source EnvFloat(String, Single) Gets the value of a variable in float format. Declaration public virtual float EnvFloat(string variable, float defaultValue = 0F) Parameters Type Name Description String variable Environment variable name. Single defaultValue A default value in case the variable is not set. Returns Type Description Single A value of the environment variable in float format. Implements IEnvReader.EnvFloat(String, Single) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in float format."
  },
  "api/DotEnv.Core.EnvReader.EnvInt.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvInt.html",
    "title": "Method EnvInt | DotEnv.Core",
    "keywords": "Method EnvInt | Improve this Doc View Source EnvInt(String, Int32) Gets the value of a variable in int format. Declaration public virtual int EnvInt(string variable, int defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int32 defaultValue A default value in case the variable is not set. Returns Type Description Int32 A value of the environment variable in int format. Implements IEnvReader.EnvInt(String, Int32) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in int format."
  },
  "api/DotEnv.Core.EnvReader.EnvLong.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvLong.html",
    "title": "Method EnvLong | DotEnv.Core",
    "keywords": "Method EnvLong | Improve this Doc View Source EnvLong(String, Int64) Gets the value of a variable in long format. Declaration public virtual long EnvLong(string variable, long defaultValue = 0L) Parameters Type Name Description String variable Environment variable name. Int64 defaultValue A default value in case the variable is not set. Returns Type Description Int64 A value of the environment variable in long format. Implements IEnvReader.EnvLong(String, Int64) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in long format."
  },
  "api/DotEnv.Core.EnvReader.EnvSByte.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvSByte.html",
    "title": "Method EnvSByte | DotEnv.Core",
    "keywords": "Method EnvSByte | Improve this Doc View Source EnvSByte(String, SByte) Gets the value of a variable in sbyte format. Declaration public virtual sbyte EnvSByte(string variable, sbyte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. SByte defaultValue A default value in case the variable is not set. Returns Type Description SByte A value of the environment variable in sbyte format. Implements IEnvReader.EnvSByte(String, SByte) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in sbyte format."
  },
  "api/DotEnv.Core.EnvReader.EnvShort.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvShort.html",
    "title": "Method EnvShort | DotEnv.Core",
    "keywords": "Method EnvShort | Improve this Doc View Source EnvShort(String, Int16) Gets the value of a variable in short format. Declaration public virtual short EnvShort(string variable, short defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int16 defaultValue A default value in case the variable is not set. Returns Type Description Int16 A value of the environment variable in short format. Implements IEnvReader.EnvShort(String, Int16) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in short format."
  },
  "api/DotEnv.Core.EnvReader.EnvString.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvString.html",
    "title": "Method EnvString | DotEnv.Core",
    "keywords": "Method EnvString | Improve this Doc View Source EnvString(String, String) Gets the value of a variable in string format. Declaration public virtual string EnvString(string variable, string defaultValue = null) Parameters Type Name Description String variable Environment variable name. String defaultValue A default value in case the variable is not set. Returns Type Description String A value of the environment variable in string format. Implements IEnvReader.EnvString(String, String) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null ."
  },
  "api/DotEnv.Core.EnvReader.EnvUInt.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvUInt.html",
    "title": "Method EnvUInt | DotEnv.Core",
    "keywords": "Method EnvUInt | Improve this Doc View Source EnvUInt(String, UInt32) Gets the value of a variable in uint format. Declaration public virtual uint EnvUInt(string variable, uint defaultValue = 0U) Parameters Type Name Description String variable Environment variable name. UInt32 defaultValue A default value in case the variable is not set. Returns Type Description UInt32 A value of the environment variable in uint format. Implements IEnvReader.EnvUInt(String, UInt32) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in uint format."
  },
  "api/DotEnv.Core.EnvReader.EnvULong.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvULong.html",
    "title": "Method EnvULong | DotEnv.Core",
    "keywords": "Method EnvULong | Improve this Doc View Source EnvULong(String, UInt64) Gets the value of a variable in ulong format. Declaration public virtual ulong EnvULong(string variable, ulong defaultValue = 0UL) Parameters Type Name Description String variable Environment variable name. UInt64 defaultValue A default value in case the variable is not set. Returns Type Description UInt64 A value of the environment variable in ulong format. Implements IEnvReader.EnvULong(String, UInt64) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ulong format."
  },
  "api/DotEnv.Core.EnvReader.EnvUShort.html": {
    "href": "api/DotEnv.Core.EnvReader.EnvUShort.html",
    "title": "Method EnvUShort | DotEnv.Core",
    "keywords": "Method EnvUShort | Improve this Doc View Source EnvUShort(String, UInt16) Gets the value of a variable in ushort format. Declaration public virtual ushort EnvUShort(string variable, ushort defaultValue = 0) Parameters Type Name Description String variable Environment variable name. UInt16 defaultValue A default value in case the variable is not set. Returns Type Description UInt16 A value of the environment variable in ushort format. Implements IEnvReader.EnvUShort(String, UInt16) Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ushort format."
  },
  "api/DotEnv.Core.EnvReader.GetBoolValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetBoolValue.html",
    "title": "Method GetBoolValue | DotEnv.Core",
    "keywords": "Method GetBoolValue | Improve this Doc View Source GetBoolValue(String) Gets the value of a variable in bool format. Declaration public virtual bool GetBoolValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Boolean A value of the variable in bool format. Implements IEnvReader.GetBoolValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in bool format."
  },
  "api/DotEnv.Core.EnvReader.GetByteValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetByteValue.html",
    "title": "Method GetByteValue | DotEnv.Core",
    "keywords": "Method GetByteValue | Improve this Doc View Source GetByteValue(String) Gets the value of a variable in byte format. Declaration public virtual byte GetByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Byte A value of the variable in byte format. Implements IEnvReader.GetByteValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in byte format."
  },
  "api/DotEnv.Core.EnvReader.GetCharValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetCharValue.html",
    "title": "Method GetCharValue | DotEnv.Core",
    "keywords": "Method GetCharValue | Improve this Doc View Source GetCharValue(String) Gets the value of a variable in char format. Declaration public virtual char GetCharValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Char A value of the variable in char format. Implements IEnvReader.GetCharValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in char format."
  },
  "api/DotEnv.Core.EnvReader.GetDecimalValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetDecimalValue.html",
    "title": "Method GetDecimalValue | DotEnv.Core",
    "keywords": "Method GetDecimalValue | Improve this Doc View Source GetDecimalValue(String) Gets the value of a variable in decimal format. Declaration public virtual decimal GetDecimalValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Decimal A value of the variable in decimal format. Implements IEnvReader.GetDecimalValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in decimal format."
  },
  "api/DotEnv.Core.EnvReader.GetDoubleValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetDoubleValue.html",
    "title": "Method GetDoubleValue | DotEnv.Core",
    "keywords": "Method GetDoubleValue | Improve this Doc View Source GetDoubleValue(String) Gets the value of a variable in double format. Declaration public virtual double GetDoubleValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Double A value of the variable in double format. Implements IEnvReader.GetDoubleValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in double format."
  },
  "api/DotEnv.Core.EnvReader.GetFloatValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetFloatValue.html",
    "title": "Method GetFloatValue | DotEnv.Core",
    "keywords": "Method GetFloatValue | Improve this Doc View Source GetFloatValue(String) Gets the value of a variable in float format. Declaration public virtual float GetFloatValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Single A value of the variable in float format. Implements IEnvReader.GetFloatValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in float format."
  },
  "api/DotEnv.Core.EnvReader.GetIntValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetIntValue.html",
    "title": "Method GetIntValue | DotEnv.Core",
    "keywords": "Method GetIntValue | Improve this Doc View Source GetIntValue(String) Gets the value of a variable in int format. Declaration public virtual int GetIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int32 A value of the variable in int format. Implements IEnvReader.GetIntValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in int format."
  },
  "api/DotEnv.Core.EnvReader.GetLongValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetLongValue.html",
    "title": "Method GetLongValue | DotEnv.Core",
    "keywords": "Method GetLongValue | Improve this Doc View Source GetLongValue(String) Gets the value of a variable in long format. Declaration public virtual long GetLongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int64 A value of the variable in long format. Implements IEnvReader.GetLongValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in long format."
  },
  "api/DotEnv.Core.EnvReader.GetSByteValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetSByteValue.html",
    "title": "Method GetSByteValue | DotEnv.Core",
    "keywords": "Method GetSByteValue | Improve this Doc View Source GetSByteValue(String) Gets the value of a variable in sbyte format. Declaration public virtual sbyte GetSByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description SByte A value of the variable in sbyte format. Implements IEnvReader.GetSByteValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in sbyte format."
  },
  "api/DotEnv.Core.EnvReader.GetShortValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetShortValue.html",
    "title": "Method GetShortValue | DotEnv.Core",
    "keywords": "Method GetShortValue | Improve this Doc View Source GetShortValue(String) Gets the value of a variable in short format. Declaration public virtual short GetShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int16 A value of the variable in short format. Implements IEnvReader.GetShortValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in short format."
  },
  "api/DotEnv.Core.EnvReader.GetStringValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetStringValue.html",
    "title": "Method GetStringValue | DotEnv.Core",
    "keywords": "Method GetStringValue | Improve this Doc View Source GetStringValue(String) Gets the value of a variable in string format. Declaration public virtual string GetStringValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description String A value of the variable in string format. Implements IEnvReader.GetStringValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set."
  },
  "api/DotEnv.Core.EnvReader.GetUIntValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetUIntValue.html",
    "title": "Method GetUIntValue | DotEnv.Core",
    "keywords": "Method GetUIntValue | Improve this Doc View Source GetUIntValue(String) Gets the value of a variable in uint format. Declaration public virtual uint GetUIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt32 A value of the variable in uint format. Implements IEnvReader.GetUIntValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in uint format."
  },
  "api/DotEnv.Core.EnvReader.GetULongValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetULongValue.html",
    "title": "Method GetULongValue | DotEnv.Core",
    "keywords": "Method GetULongValue | Improve this Doc View Source GetULongValue(String) Gets the value of a variable in ulong format. Declaration public virtual ulong GetULongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt64 A value of the variable in ulong format. Implements IEnvReader.GetULongValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in ulong format."
  },
  "api/DotEnv.Core.EnvReader.GetUShortValue.html": {
    "href": "api/DotEnv.Core.EnvReader.GetUShortValue.html",
    "title": "Method GetUShortValue | DotEnv.Core",
    "keywords": "Method GetUShortValue | Improve this Doc View Source GetUShortValue(String) Gets the value of a variable in ushort format. Declaration public virtual ushort GetUShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt16 A value of the variable in ushort format. Implements IEnvReader.GetUShortValue(String) Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in ushort format."
  },
  "api/DotEnv.Core.EnvReader.HasValue.html": {
    "href": "api/DotEnv.Core.EnvReader.HasValue.html",
    "title": "Method HasValue | DotEnv.Core",
    "keywords": "Method HasValue | Improve this Doc View Source HasValue(String) Checks if the variable has a value. Declaration public virtual bool HasValue(string variable) Parameters Type Name Description String variable The variable to validate. Returns Type Description Boolean true if the variable has a value, otherwise false . Implements IEnvReader.HasValue(String) Exceptions Type Condition ArgumentNullException variable is null ."
  },
  "api/DotEnv.Core.EnvReader.html": {
    "href": "api/DotEnv.Core.EnvReader.html",
    "title": "Class EnvReader | DotEnv.Core",
    "keywords": "Class EnvReader Defines the methods used to read environment variables from a specific provider . Inheritance Object EnvReader Implements IEnvReader IEnumerable < KeyValuePair < String , String >> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvReader : IEnvReader, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Name Description EnvReader() Initializes a new instance of the EnvReader class. EnvReader(IEnvironmentVariablesProvider) Initializes a new instance of the EnvReader class with environment variables provider. Properties Name Description Instance Gets an instance of type EnvReader . Item[String] Gets the value of a variable in string format. Methods Name Description EnvBool(String, Boolean) Gets the value of a variable in bool format. EnvByte(String, Byte) Gets the value of a variable in byte format. EnvChar(String, Char) Gets the value of a variable in char format. EnvDecimal(String, Decimal) Gets the value of a variable in decimal format. EnvDouble(String, Double) Gets the value of a variable in double format. EnvFloat(String, Single) Gets the value of a variable in float format. EnvInt(String, Int32) Gets the value of a variable in int format. EnvLong(String, Int64) Gets the value of a variable in long format. EnvSByte(String, SByte) Gets the value of a variable in sbyte format. EnvShort(String, Int16) Gets the value of a variable in short format. EnvString(String, String) Gets the value of a variable in string format. EnvUInt(String, UInt32) Gets the value of a variable in uint format. EnvULong(String, UInt64) Gets the value of a variable in ulong format. EnvUShort(String, UInt16) Gets the value of a variable in ushort format. GetBoolValue(String) Gets the value of a variable in bool format. GetByteValue(String) Gets the value of a variable in byte format. GetCharValue(String) Gets the value of a variable in char format. GetDecimalValue(String) Gets the value of a variable in decimal format. GetDoubleValue(String) Gets the value of a variable in double format. GetFloatValue(String) Gets the value of a variable in float format. GetIntValue(String) Gets the value of a variable in int format. GetLongValue(String) Gets the value of a variable in long format. GetSByteValue(String) Gets the value of a variable in sbyte format. GetShortValue(String) Gets the value of a variable in short format. GetStringValue(String) Gets the value of a variable in string format. GetUIntValue(String) Gets the value of a variable in uint format. GetULongValue(String) Gets the value of a variable in ulong format. GetUShortValue(String) Gets the value of a variable in ushort format. HasValue(String) Checks if the variable has a value. TryGetBoolValue(String, out Boolean) Try to retrieve the value of a variable in bool format. TryGetByteValue(String, out Byte) Try to retrieve the value of a variable in byte format. TryGetCharValue(String, out Char) Try to retrieve the value of a variable in char format. TryGetDecimalValue(String, out Decimal) Try to retrieve the value of a variable in decimal format. TryGetDoubleValue(String, out Double) Try to retrieve the value of a variable in double format. TryGetFloatValue(String, out Single) Try to retrieve the value of a variable in float format. TryGetIntValue(String, out Int32) Try to retrieve the value of a variable in int format. TryGetLongValue(String, out Int64) Try to retrieve the value of a variable in long format. TryGetSByteValue(String, out SByte) Try to retrieve the value of a variable in sbyte format. TryGetShortValue(String, out Int16) Try to retrieve the value of a variable in short format. TryGetStringValue(String, out String) Try to retrieve the value of a variable in string format. TryGetUIntValue(String, out UInt32) Try to retrieve the value of a variable in uint format. TryGetULongValue(String, out UInt64) Try to retrieve the value of a variable in ulong format. TryGetUShortValue(String, out UInt16) Try to retrieve the value of a variable in ushort format."
  },
  "api/DotEnv.Core.EnvReader.Instance.html": {
    "href": "api/DotEnv.Core.EnvReader.Instance.html",
    "title": "Property Instance | DotEnv.Core",
    "keywords": "Property Instance | Improve this Doc View Source Instance Gets an instance of type EnvReader . Declaration public static EnvReader Instance { get; } Property Value Type Description EnvReader Remarks This method is thread-safe."
  },
  "api/DotEnv.Core.EnvReader.Item.html": {
    "href": "api/DotEnv.Core.EnvReader.Item.html",
    "title": "Property Item | DotEnv.Core",
    "keywords": "Property Item | Improve this Doc View Source Item[String] Gets the value of a variable in string format. Declaration public virtual string this[string variable] { get; } Parameters Type Name Description String variable The variable name of the value to get. Property Value Type Description String The value of the variable in string format. Implements IEnvReader.Item[String] Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set."
  },
  "api/DotEnv.Core.EnvReader.TryGetBoolValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetBoolValue.html",
    "title": "Method TryGetBoolValue | DotEnv.Core",
    "keywords": "Method TryGetBoolValue | Improve this Doc View Source TryGetBoolValue(String, out Boolean) Try to retrieve the value of a variable in bool format. Declaration public virtual bool TryGetBoolValue(string variable, out bool value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Boolean value The bool value retrieved or false . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetBoolValue(String, out Boolean) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in bool format."
  },
  "api/DotEnv.Core.EnvReader.TryGetByteValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetByteValue.html",
    "title": "Method TryGetByteValue | DotEnv.Core",
    "keywords": "Method TryGetByteValue | Improve this Doc View Source TryGetByteValue(String, out Byte) Try to retrieve the value of a variable in byte format. Declaration public virtual bool TryGetByteValue(string variable, out byte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Byte value The byte value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetByteValue(String, out Byte) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in byte format."
  },
  "api/DotEnv.Core.EnvReader.TryGetCharValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetCharValue.html",
    "title": "Method TryGetCharValue | DotEnv.Core",
    "keywords": "Method TryGetCharValue | Improve this Doc View Source TryGetCharValue(String, out Char) Try to retrieve the value of a variable in char format. Declaration public virtual bool TryGetCharValue(string variable, out char value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Char value The char value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetCharValue(String, out Char) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in char format."
  },
  "api/DotEnv.Core.EnvReader.TryGetDecimalValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetDecimalValue.html",
    "title": "Method TryGetDecimalValue | DotEnv.Core",
    "keywords": "Method TryGetDecimalValue | Improve this Doc View Source TryGetDecimalValue(String, out Decimal) Try to retrieve the value of a variable in decimal format. Declaration public virtual bool TryGetDecimalValue(string variable, out decimal value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Decimal value The decimal value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetDecimalValue(String, out Decimal) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in decimal format."
  },
  "api/DotEnv.Core.EnvReader.TryGetDoubleValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetDoubleValue.html",
    "title": "Method TryGetDoubleValue | DotEnv.Core",
    "keywords": "Method TryGetDoubleValue | Improve this Doc View Source TryGetDoubleValue(String, out Double) Try to retrieve the value of a variable in double format. Declaration public virtual bool TryGetDoubleValue(string variable, out double value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Double value The double value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetDoubleValue(String, out Double) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in double format."
  },
  "api/DotEnv.Core.EnvReader.TryGetFloatValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetFloatValue.html",
    "title": "Method TryGetFloatValue | DotEnv.Core",
    "keywords": "Method TryGetFloatValue | Improve this Doc View Source TryGetFloatValue(String, out Single) Try to retrieve the value of a variable in float format. Declaration public virtual bool TryGetFloatValue(string variable, out float value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Single value The float value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetFloatValue(String, out Single) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in float format."
  },
  "api/DotEnv.Core.EnvReader.TryGetIntValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetIntValue.html",
    "title": "Method TryGetIntValue | DotEnv.Core",
    "keywords": "Method TryGetIntValue | Improve this Doc View Source TryGetIntValue(String, out Int32) Try to retrieve the value of a variable in int format. Declaration public virtual bool TryGetIntValue(string variable, out int value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int32 value The int value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetIntValue(String, out Int32) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in int format."
  },
  "api/DotEnv.Core.EnvReader.TryGetLongValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetLongValue.html",
    "title": "Method TryGetLongValue | DotEnv.Core",
    "keywords": "Method TryGetLongValue | Improve this Doc View Source TryGetLongValue(String, out Int64) Try to retrieve the value of a variable in long format. Declaration public virtual bool TryGetLongValue(string variable, out long value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int64 value The long value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetLongValue(String, out Int64) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in long format."
  },
  "api/DotEnv.Core.EnvReader.TryGetSByteValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetSByteValue.html",
    "title": "Method TryGetSByteValue | DotEnv.Core",
    "keywords": "Method TryGetSByteValue | Improve this Doc View Source TryGetSByteValue(String, out SByte) Try to retrieve the value of a variable in sbyte format. Declaration public virtual bool TryGetSByteValue(string variable, out sbyte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. SByte value The sbyte value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetSByteValue(String, out SByte) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in sbyte format."
  },
  "api/DotEnv.Core.EnvReader.TryGetShortValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetShortValue.html",
    "title": "Method TryGetShortValue | DotEnv.Core",
    "keywords": "Method TryGetShortValue | Improve this Doc View Source TryGetShortValue(String, out Int16) Try to retrieve the value of a variable in short format. Declaration public virtual bool TryGetShortValue(string variable, out short value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int16 value The short value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetShortValue(String, out Int16) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in short format."
  },
  "api/DotEnv.Core.EnvReader.TryGetStringValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetStringValue.html",
    "title": "Method TryGetStringValue | DotEnv.Core",
    "keywords": "Method TryGetStringValue | Improve this Doc View Source TryGetStringValue(String, out String) Try to retrieve the value of a variable in string format. Declaration public virtual bool TryGetStringValue(string variable, out string value) Parameters Type Name Description String variable The variable name of the value to try retrieve. String value The string value retrieved or null . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetStringValue(String, out String) Exceptions Type Condition ArgumentNullException variable is null ."
  },
  "api/DotEnv.Core.EnvReader.TryGetUIntValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetUIntValue.html",
    "title": "Method TryGetUIntValue | DotEnv.Core",
    "keywords": "Method TryGetUIntValue | Improve this Doc View Source TryGetUIntValue(String, out UInt32) Try to retrieve the value of a variable in uint format. Declaration public virtual bool TryGetUIntValue(string variable, out uint value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt32 value The uint value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetUIntValue(String, out UInt32) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in uint format."
  },
  "api/DotEnv.Core.EnvReader.TryGetULongValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetULongValue.html",
    "title": "Method TryGetULongValue | DotEnv.Core",
    "keywords": "Method TryGetULongValue | Improve this Doc View Source TryGetULongValue(String, out UInt64) Try to retrieve the value of a variable in ulong format. Declaration public virtual bool TryGetULongValue(string variable, out ulong value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt64 value The ulong value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetULongValue(String, out UInt64) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ulong format."
  },
  "api/DotEnv.Core.EnvReader.TryGetUShortValue.html": {
    "href": "api/DotEnv.Core.EnvReader.TryGetUShortValue.html",
    "title": "Method TryGetUShortValue | DotEnv.Core",
    "keywords": "Method TryGetUShortValue | Improve this Doc View Source TryGetUShortValue(String, out UInt16) Try to retrieve the value of a variable in ushort format. Declaration public virtual bool TryGetUShortValue(string variable, out ushort value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt16 value The ushort value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Implements IEnvReader.TryGetUShortValue(String, out UInt16) Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ushort format."
  },
  "api/DotEnv.Core.EnvValidationResult.Count.html": {
    "href": "api/DotEnv.Core.EnvValidationResult.Count.html",
    "title": "Property Count | DotEnv.Core",
    "keywords": "Property Count | Improve this Doc View Source Count Gets the number of errors contained in the container. Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/DotEnv.Core.EnvValidationResult.ErrorMessages.html": {
    "href": "api/DotEnv.Core.EnvValidationResult.ErrorMessages.html",
    "title": "Property ErrorMessages | DotEnv.Core",
    "keywords": "Property ErrorMessages | Improve this Doc View Source ErrorMessages Gets the error messages. Declaration public string ErrorMessages { get; } Property Value Type Description String"
  },
  "api/DotEnv.Core.EnvValidationResult.GetEnumerator.html": {
    "href": "api/DotEnv.Core.EnvValidationResult.GetEnumerator.html",
    "title": "Method GetEnumerator | DotEnv.Core",
    "keywords": "Method GetEnumerator | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the errors contained in the container. Declaration public IEnumerator<string> GetEnumerator() Returns Type Description IEnumerator < String > An enumerator that can be used to iterate through the errors contained in the container. Implements IEnumerable<T>.GetEnumerator()"
  },
  "api/DotEnv.Core.EnvValidationResult.HasError.html": {
    "href": "api/DotEnv.Core.EnvValidationResult.HasError.html",
    "title": "Method HasError | DotEnv.Core",
    "keywords": "Method HasError | Improve this Doc View Source HasError() Checks if there has been an error. Declaration public bool HasError() Returns Type Description Boolean true if an error occurred, otherwise false ."
  },
  "api/DotEnv.Core.EnvValidationResult.html": {
    "href": "api/DotEnv.Core.EnvValidationResult.html",
    "title": "Class EnvValidationResult | DotEnv.Core",
    "keywords": "Class EnvValidationResult Represents a container for the results of a validation. Inheritance Object EnvValidationResult Implements IEnumerable < String > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvValidationResult : IEnumerable<string>, IEnumerable Properties Name Description Count Gets the number of errors contained in the container. ErrorMessages Gets the error messages. Methods Name Description GetEnumerator() Returns an enumerator that iterates through the errors contained in the container. HasError() Checks if there has been an error."
  },
  "api/DotEnv.Core.EnvValidator.-ctor.html": {
    "href": "api/DotEnv.Core.EnvValidator.-ctor.html",
    "title": "Constructor EnvValidator | DotEnv.Core",
    "keywords": "Constructor EnvValidator | Improve this Doc View Source EnvValidator() Initializes a new instance of the EnvValidator class. Declaration public EnvValidator() | Improve this Doc View Source EnvValidator(IEnvironmentVariablesProvider) Initializes a new instance of the EnvValidator class with environment variables provider. Declaration public EnvValidator(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Exceptions Type Condition ArgumentNullException provider is null ."
  },
  "api/DotEnv.Core.EnvValidator.html": {
    "href": "api/DotEnv.Core.EnvValidator.html",
    "title": "Class EnvValidator | DotEnv.Core",
    "keywords": "Class EnvValidator Represents the validator of the required keys. Inheritance Object EnvValidator Implements IEnvValidator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvValidator : IEnvValidator Constructors Name Description EnvValidator() Initializes a new instance of the EnvValidator class. EnvValidator(IEnvironmentVariablesProvider) Initializes a new instance of the EnvValidator class with environment variables provider. Methods Name Description IgnoreException() Disables/ignores RequiredKeysNotPresentException . This method tells the validator not to throw an exception when it encounters one or more errors. SetRequiredKeys(String[]) Sets the required keys by means of a string collection. SetRequiredKeys(Type) Sets the required keys by means of the properties of a class or struct. SetRequiredKeys<TKeys>() Sets the required keys by means of the properties of a class or struct. Validate() Validates whether the required keys are present in the application. Validate(out EnvValidationResult) Validates whether the required keys are present in the application."
  },
  "api/DotEnv.Core.EnvValidator.IgnoreException.html": {
    "href": "api/DotEnv.Core.EnvValidator.IgnoreException.html",
    "title": "Method IgnoreException | DotEnv.Core",
    "keywords": "Method IgnoreException | Improve this Doc View Source IgnoreException() Disables/ignores RequiredKeysNotPresentException . This method tells the validator not to throw an exception when it encounters one or more errors. Declaration public IEnvValidator IgnoreException() Returns Type Description IEnvValidator An instance implementing the fluent interface. Implements IEnvValidator.IgnoreException()"
  },
  "api/DotEnv.Core.EnvValidator.SetRequiredKeys.html": {
    "href": "api/DotEnv.Core.EnvValidator.SetRequiredKeys.html",
    "title": "Method SetRequiredKeys | DotEnv.Core",
    "keywords": "Method SetRequiredKeys | Improve this Doc View Source SetRequiredKeys(String[]) Sets the required keys by means of a string collection. Declaration public IEnvValidator SetRequiredKeys(params string[] keys) Parameters Type Name Description String [] keys The required keys to set. Returns Type Description IEnvValidator An instance implementing the fluent interface. Implements IEnvValidator.SetRequiredKeys(String[]) Exceptions Type Condition ArgumentNullException keys is null . ArgumentException The length of the keys list is zero. | Improve this Doc View Source SetRequiredKeys<TKeys>() Sets the required keys by means of the properties of a class or struct. Declaration public IEnvValidator SetRequiredKeys<TKeys>() Returns Type Description IEnvValidator An instance implementing the fluent interface. Type Parameters Name Description TKeys The type with the required keys. Implements IEnvValidator.SetRequiredKeys<TKeys>() | Improve this Doc View Source SetRequiredKeys(Type) Sets the required keys by means of the properties of a class or struct. Declaration public IEnvValidator SetRequiredKeys(Type keysType) Parameters Type Name Description Type keysType The type with the required keys. Returns Type Description IEnvValidator An instance implementing the fluent interface. Implements IEnvValidator.SetRequiredKeys(Type) Exceptions Type Condition ArgumentNullException keysType is null ."
  },
  "api/DotEnv.Core.EnvValidator.Validate.html": {
    "href": "api/DotEnv.Core.EnvValidator.Validate.html",
    "title": "Method Validate | DotEnv.Core",
    "keywords": "Method Validate | Improve this Doc View Source Validate() Validates whether the required keys are present in the application. Declaration public void Validate() Implements IEnvValidator.Validate() Exceptions Type Condition InvalidOperationException The required keys are not specified with the SetRequiredKeys method. RequiredKeysNotPresentException If the required keys are not present in the application. This exception is not thrown if the IgnoreException() method is invoked. | Improve this Doc View Source Validate(out EnvValidationResult) Validates whether the required keys are present in the application. Declaration public void Validate(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the validator. Implements IEnvValidator.Validate(out EnvValidationResult) Exceptions Type Condition InvalidOperationException The required keys are not specified with the SetRequiredKeys method. RequiredKeysNotPresentException If the required keys are not present in the application. This exception is not thrown if the IgnoreException() method is invoked."
  },
  "api/DotEnv.Core.html": {
    "href": "api/DotEnv.Core.html",
    "title": "Namespace DotEnv.Core | DotEnv.Core",
    "keywords": "Namespace DotEnv.Core Classes BinderException The exception that is thrown when the binder encounters one or more errors. Env This class defines methods to perform checks with the current environment. EnvAccessorExtensions Represents an accessor of environment variables for the String class. EnvBinder Allows binding strongly typed objects to configuration values. EnvironmentVariablesProviderExtensions Extension methods for adding IEnvironmentVariablesProvider . EnvKeyAttribute Represents the key of a .env file that is assigned to a property. EnvLoader Represents the .env files loader. EnvParser Defines the methods that control the parser behavior. EnvReader Defines the methods used to read environment variables from a specific provider . EnvValidationResult Represents a container for the results of a validation. EnvValidator Represents the validator of the required keys. ParserException The exception that is thrown when the parser encounters one or more errors. RequiredKeysNotPresentException The exception that is thrown when the required keys are not present in the application. VariableNotSetException The exception that is thrown when the environment variable is not set to a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Interfaces IEnvBinder Allows binding strongly typed objects to configuration values. IEnvironmentVariablesProvider Represents the environment variables provider. The environment variables can be obtained from any provider (e.g., from a Dictionary<TKey,TValue> or from the current process). IEnvLoader Represents the .env files loader. IEnvParser Defines the methods that control the parser behavior. IEnvReader Defines the methods used to read environment variables from a specific provider . IEnvValidator Represents the validator of the required keys. Enums ConcatKeysOptions Specifies the options for concatenation of duplicate keys such as whether to concatenate at the start or end of the value."
  },
  "api/DotEnv.Core.IEnvBinder.AllowBindNonPublicProperties.html": {
    "href": "api/DotEnv.Core.IEnvBinder.AllowBindNonPublicProperties.html",
    "title": "Method AllowBindNonPublicProperties | DotEnv.Core",
    "keywords": "Method AllowBindNonPublicProperties | Improve this Doc View Source AllowBindNonPublicProperties() Allows binding of non-public properties. This method tells the binder that it can set non-public properties. Declaration IEnvBinder AllowBindNonPublicProperties() Returns Type Description IEnvBinder An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvBinder.Bind.html": {
    "href": "api/DotEnv.Core.IEnvBinder.Bind.html",
    "title": "Method Bind | DotEnv.Core",
    "keywords": "Method Bind | Improve this Doc View Source Bind<TSettings>(out EnvValidationResult) Binds the instance of the environment variables provider to a new instance of type TSettings. Declaration TSettings Bind<TSettings>(out EnvValidationResult result) where TSettings : new() Parameters Type Name Description EnvValidationResult result The result contains the errors found by the binder. Returns Type Description TSettings The new instance of TSettings. Type Parameters Name Description TSettings The type of the new instance to bind. Remarks Binds only read-write properties and, moreover, only sets public properties. Exceptions Type Condition BinderException If the binder encounters one or more errors. | Improve this Doc View Source Bind<TSettings>() Binds the instance of the environment variables provider to a new instance of type TSettings. Declaration TSettings Bind<TSettings>() where TSettings : new() Returns Type Description TSettings The new instance of TSettings. Type Parameters Name Description TSettings The type of the new instance to bind. Remarks Binds only read-write properties and, moreover, only sets public properties. Exceptions Type Condition BinderException If the binder encounters one or more errors."
  },
  "api/DotEnv.Core.IEnvBinder.html": {
    "href": "api/DotEnv.Core.IEnvBinder.html",
    "title": "Interface IEnvBinder | DotEnv.Core",
    "keywords": "Interface IEnvBinder Allows binding strongly typed objects to configuration values. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvBinder Methods Name Description AllowBindNonPublicProperties() Allows binding of non-public properties. This method tells the binder that it can set non-public properties. Bind<TSettings>() Binds the instance of the environment variables provider to a new instance of type TSettings. Bind<TSettings>(out EnvValidationResult) Binds the instance of the environment variables provider to a new instance of type TSettings. IgnoreException() Disables/ignores BinderException . This method tells the binder not to throw an exception when it encounters one or more errors."
  },
  "api/DotEnv.Core.IEnvBinder.IgnoreException.html": {
    "href": "api/DotEnv.Core.IEnvBinder.IgnoreException.html",
    "title": "Method IgnoreException | DotEnv.Core",
    "keywords": "Method IgnoreException | Improve this Doc View Source IgnoreException() Disables/ignores BinderException . This method tells the binder not to throw an exception when it encounters one or more errors. Declaration IEnvBinder IgnoreException() Returns Type Description IEnvBinder An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvironmentVariablesProvider.html": {
    "href": "api/DotEnv.Core.IEnvironmentVariablesProvider.html",
    "title": "Interface IEnvironmentVariablesProvider | DotEnv.Core",
    "keywords": "Interface IEnvironmentVariablesProvider Represents the environment variables provider. The environment variables can be obtained from any provider (e.g., from a Dictionary<TKey,TValue> or from the current process). Inherited Members IEnumerable<KeyValuePair<String, String>>.GetEnumerator() IEnumerable.GetEnumerator() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvironmentVariablesProvider : IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description Item[String] Gets or sets the value of the variable. Extension Methods EnvironmentVariablesProviderExtensions.CreateValidator(IEnvironmentVariablesProvider) EnvironmentVariablesProviderExtensions.CreateReader(IEnvironmentVariablesProvider) EnvironmentVariablesProviderExtensions.CreateBinder(IEnvironmentVariablesProvider) EnvironmentVariablesProviderExtensions.ToDictionary(IEnvironmentVariablesProvider)"
  },
  "api/DotEnv.Core.IEnvironmentVariablesProvider.Item.html": {
    "href": "api/DotEnv.Core.IEnvironmentVariablesProvider.Item.html",
    "title": "Property Item | DotEnv.Core",
    "keywords": "Property Item | Improve this Doc View Source Item[String] Gets or sets the value of the variable. Declaration string this[string variable] { get; set; } Parameters Type Name Description String variable The variable to get or set. Property Value Type Description String Remarks The property gets a null value in case the variable is not found in the provider. Exceptions Type Condition ArgumentNullException variable is null ."
  },
  "api/DotEnv.Core.IEnvLoader.AddEnvFile.html": {
    "href": "api/DotEnv.Core.IEnvLoader.AddEnvFile.html",
    "title": "Method AddEnvFile | DotEnv.Core",
    "keywords": "Method AddEnvFile | Improve this Doc View Source AddEnvFile(String) Adds an .env file in a collection. Declaration IEnvLoader AddEnvFile(string path) Parameters Type Name Description String path The .env file path to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, Encoding) Adds an .env file with its encoding in a collection. Declaration IEnvLoader AddEnvFile(string path, Encoding encoding) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, Encoding, Boolean) Adds an .env file with its encoding in a collection. Declaration IEnvLoader AddEnvFile(string path, Encoding encoding, bool optional) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, String) Adds an .env file with its encoding name in a collection. Declaration IEnvLoader AddEnvFile(string path, string encodingName) Parameters Type Name Description String path The .env file path to add. String encodingName The encoding name of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path , or encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source AddEnvFile(String, String, Boolean) Adds an .env file with its encoding name in a collection. Declaration IEnvLoader AddEnvFile(string path, string encodingName, bool optional) Parameters Type Name Description String path The .env file path to add. String encodingName The encoding name of the .env file. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path , or encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source AddEnvFile(String, Boolean) Adds an .env file to a collection and indicates whether the .env file can be optional, or not. Declaration IEnvLoader AddEnvFile(string path, bool optional) Parameters Type Name Description String path The .env file path to add. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null ."
  },
  "api/DotEnv.Core.IEnvLoader.AddEnvFiles.html": {
    "href": "api/DotEnv.Core.IEnvLoader.AddEnvFiles.html",
    "title": "Method AddEnvFiles | DotEnv.Core",
    "keywords": "Method AddEnvFiles | Improve this Doc View Source AddEnvFiles(String[]) Adds the .env files in a collection. Declaration IEnvLoader AddEnvFiles(params string[] paths) Parameters Type Name Description String [] paths The .env files paths to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException paths is null . ArgumentException The length of the paths list is zero."
  },
  "api/DotEnv.Core.IEnvLoader.AllowAllEnvFilesOptional.html": {
    "href": "api/DotEnv.Core.IEnvLoader.AllowAllEnvFilesOptional.html",
    "title": "Method AllowAllEnvFilesOptional | DotEnv.Core",
    "keywords": "Method AllowAllEnvFilesOptional | Improve this Doc View Source AllowAllEnvFilesOptional() Allows all .env files to be optional. This tells the loader not to raise an error in case the .env file is not found in any directory. Declaration IEnvLoader AllowAllEnvFilesOptional() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.AllowConcatDuplicateKeys.html": {
    "href": "api/DotEnv.Core.IEnvLoader.AllowConcatDuplicateKeys.html",
    "title": "Method AllowConcatDuplicateKeys | DotEnv.Core",
    "keywords": "Method AllowConcatDuplicateKeys | Improve this Doc View Source AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. Declaration IEnvLoader AllowConcatDuplicateKeys(ConcatKeysOptions option = ConcatKeysOptions.End) Parameters Type Name Description ConcatKeysOptions option The option indicates whether the concatenation is at the start or at the end of the value. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentException option is not one of the ConcatKeysOptions values."
  },
  "api/DotEnv.Core.IEnvLoader.AllowOverwriteExistingVars.html": {
    "href": "api/DotEnv.Core.IEnvLoader.AllowOverwriteExistingVars.html",
    "title": "Method AllowOverwriteExistingVars | DotEnv.Core",
    "keywords": "Method AllowOverwriteExistingVars | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Declaration IEnvLoader AllowOverwriteExistingVars() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.AvoidModifyEnvironment.html": {
    "href": "api/DotEnv.Core.IEnvLoader.AvoidModifyEnvironment.html",
    "title": "Method AvoidModifyEnvironment | DotEnv.Core",
    "keywords": "Method AvoidModifyEnvironment | Improve this Doc View Source AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. Declaration IEnvLoader AvoidModifyEnvironment() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.DisableTrimEndKeys.html": {
    "href": "api/DotEnv.Core.IEnvLoader.DisableTrimEndKeys.html",
    "title": "Method DisableTrimEndKeys | DotEnv.Core",
    "keywords": "Method DisableTrimEndKeys | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. Declaration IEnvLoader DisableTrimEndKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.DisableTrimEndValues.html": {
    "href": "api/DotEnv.Core.IEnvLoader.DisableTrimEndValues.html",
    "title": "Method DisableTrimEndValues | DotEnv.Core",
    "keywords": "Method DisableTrimEndValues | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. Declaration IEnvLoader DisableTrimEndValues() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.DisableTrimKeys.html": {
    "href": "api/DotEnv.Core.IEnvLoader.DisableTrimKeys.html",
    "title": "Method DisableTrimKeys | DotEnv.Core",
    "keywords": "Method DisableTrimKeys | Improve this Doc View Source DisableTrimKeys() Disables the trim at the start and end of the keys. Declaration IEnvLoader DisableTrimKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.DisableTrimStartComments.html": {
    "href": "api/DotEnv.Core.IEnvLoader.DisableTrimStartComments.html",
    "title": "Method DisableTrimStartComments | DotEnv.Core",
    "keywords": "Method DisableTrimStartComments | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. Declaration IEnvLoader DisableTrimStartComments() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.DisableTrimStartKeys.html": {
    "href": "api/DotEnv.Core.IEnvLoader.DisableTrimStartKeys.html",
    "title": "Method DisableTrimStartKeys | DotEnv.Core",
    "keywords": "Method DisableTrimStartKeys | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. Declaration IEnvLoader DisableTrimStartKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.DisableTrimStartValues.html": {
    "href": "api/DotEnv.Core.IEnvLoader.DisableTrimStartValues.html",
    "title": "Method DisableTrimStartValues | DotEnv.Core",
    "keywords": "Method DisableTrimStartValues | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. Declaration IEnvLoader DisableTrimStartValues() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.DisableTrimValues.html": {
    "href": "api/DotEnv.Core.IEnvLoader.DisableTrimValues.html",
    "title": "Method DisableTrimValues | DotEnv.Core",
    "keywords": "Method DisableTrimValues | Improve this Doc View Source DisableTrimValues() Disables the trim at the start and end of the values. Declaration IEnvLoader DisableTrimValues() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.EnableFileNotFoundException.html": {
    "href": "api/DotEnv.Core.IEnvLoader.EnableFileNotFoundException.html",
    "title": "Method EnableFileNotFoundException | DotEnv.Core",
    "keywords": "Method EnableFileNotFoundException | Improve this Doc View Source EnableFileNotFoundException() Enables FileNotFoundException . This method tells the loader to throw an exception when one or more .env files are not found. Declaration IEnvLoader EnableFileNotFoundException() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.html": {
    "href": "api/DotEnv.Core.IEnvLoader.html",
    "title": "Interface IEnvLoader | DotEnv.Core",
    "keywords": "Interface IEnvLoader Represents the .env files loader. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvLoader Methods Name Description AddEnvFile(String) Adds an .env file in a collection. AddEnvFile(String, Boolean) Adds an .env file to a collection and indicates whether the .env file can be optional, or not. AddEnvFile(String, String) Adds an .env file with its encoding name in a collection. AddEnvFile(String, String, Boolean) Adds an .env file with its encoding name in a collection. AddEnvFile(String, Encoding) Adds an .env file with its encoding in a collection. AddEnvFile(String, Encoding, Boolean) Adds an .env file with its encoding in a collection. AddEnvFiles(String[]) Adds the .env files in a collection. AllowAllEnvFilesOptional() Allows all .env files to be optional. This tells the loader not to raise an error in case the .env file is not found in any directory. AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. DisableTrimKeys() Disables the trim at the start and end of the keys. DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. DisableTrimValues() Disables the trim at the start and end of the values. EnableFileNotFoundException() Enables FileNotFoundException . This method tells the loader to throw an exception when one or more .env files are not found. IgnoreParentDirectories() Ignores search in parent directories. This tells the loader not to search in parent directories when the .env file is not in a directory. IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Load() Loads one or more .env files. By default, it will search for a file called .env . Load(out EnvValidationResult) Loads one or more .env files. By default, it will search for a file called .env . LoadEnv() Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local (has the highest priority). .env.local .env.[environment] .env (has the lowest priority). The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . LoadEnv(out EnvValidationResult) Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local (has the highest priority). .env.local .env.[environment] .env (has the lowest priority). The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . SetBasePath(String) Sets the base path for the .env files. SetCommentChar(Char) Sets the character that will define the beginning of a comment. SetDefaultEnvFileName(String) Sets the default name of an .env file. SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. SetEncoding(String) Sets the encoding name of the .env files. SetEncoding(Encoding) Sets the encoding of the .env files. SetEnvironmentName(String) Sets the name of the environment. SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider."
  },
  "api/DotEnv.Core.IEnvLoader.IgnoreParentDirectories.html": {
    "href": "api/DotEnv.Core.IEnvLoader.IgnoreParentDirectories.html",
    "title": "Method IgnoreParentDirectories | DotEnv.Core",
    "keywords": "Method IgnoreParentDirectories | Improve this Doc View Source IgnoreParentDirectories() Ignores search in parent directories. This tells the loader not to search in parent directories when the .env file is not in a directory. Declaration IEnvLoader IgnoreParentDirectories() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.IgnoreParserException.html": {
    "href": "api/DotEnv.Core.IEnvLoader.IgnoreParserException.html",
    "title": "Method IgnoreParserException | DotEnv.Core",
    "keywords": "Method IgnoreParserException | Improve this Doc View Source IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Declaration IEnvLoader IgnoreParserException() Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.Load.html": {
    "href": "api/DotEnv.Core.IEnvLoader.Load.html",
    "title": "Method Load | DotEnv.Core",
    "keywords": "Method Load | Improve this Doc View Source Load(out EnvValidationResult) Loads one or more .env files. By default, it will search for a file called .env . Declaration IEnvironmentVariablesProvider Load(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the loader. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source Load() Loads one or more .env files. By default, it will search for a file called .env . Declaration IEnvironmentVariablesProvider Load() Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked."
  },
  "api/DotEnv.Core.IEnvLoader.LoadEnv.html": {
    "href": "api/DotEnv.Core.IEnvLoader.LoadEnv.html",
    "title": "Method LoadEnv | DotEnv.Core",
    "keywords": "Method LoadEnv | Improve this Doc View Source LoadEnv(out EnvValidationResult) Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local (has the highest priority). .env.local .env.[environment] .env (has the lowest priority). The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . Declaration IEnvironmentVariablesProvider LoadEnv(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the loader. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source LoadEnv() Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local (has the highest priority). .env.local .env.[environment] .env (has the lowest priority). The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . Declaration IEnvironmentVariablesProvider LoadEnv() Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked."
  },
  "api/DotEnv.Core.IEnvLoader.SetBasePath.html": {
    "href": "api/DotEnv.Core.IEnvLoader.SetBasePath.html",
    "title": "Method SetBasePath | DotEnv.Core",
    "keywords": "Method SetBasePath | Improve this Doc View Source SetBasePath(String) Sets the base path for the .env files. Declaration IEnvLoader SetBasePath(string basePath) Parameters Type Name Description String basePath The base path to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException basePath is null ."
  },
  "api/DotEnv.Core.IEnvLoader.SetCommentChar.html": {
    "href": "api/DotEnv.Core.IEnvLoader.SetCommentChar.html",
    "title": "Method SetCommentChar | DotEnv.Core",
    "keywords": "Method SetCommentChar | Improve this Doc View Source SetCommentChar(Char) Sets the character that will define the beginning of a comment. Declaration IEnvLoader SetCommentChar(char commentChar) Parameters Type Name Description Char commentChar The character that defines the beginning of a comment. Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.SetDefaultEnvFileName.html": {
    "href": "api/DotEnv.Core.IEnvLoader.SetDefaultEnvFileName.html",
    "title": "Method SetDefaultEnvFileName | DotEnv.Core",
    "keywords": "Method SetDefaultEnvFileName | Improve this Doc View Source SetDefaultEnvFileName(String) Sets the default name of an .env file. Declaration IEnvLoader SetDefaultEnvFileName(string envFileName) Parameters Type Name Description String envFileName The default name to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException envFileName is null ."
  },
  "api/DotEnv.Core.IEnvLoader.SetDelimiterKeyValuePair.html": {
    "href": "api/DotEnv.Core.IEnvLoader.SetDelimiterKeyValuePair.html",
    "title": "Method SetDelimiterKeyValuePair | DotEnv.Core",
    "keywords": "Method SetDelimiterKeyValuePair | Improve this Doc View Source SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. Declaration IEnvLoader SetDelimiterKeyValuePair(char separator) Parameters Type Name Description Char separator The character that separates the key-value pair. Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvLoader.SetEncoding.html": {
    "href": "api/DotEnv.Core.IEnvLoader.SetEncoding.html",
    "title": "Method SetEncoding | DotEnv.Core",
    "keywords": "Method SetEncoding | Improve this Doc View Source SetEncoding(Encoding) Sets the encoding of the .env files. Declaration IEnvLoader SetEncoding(Encoding encoding) Parameters Type Name Description Encoding encoding The type of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException encoding is null . | Improve this Doc View Source SetEncoding(String) Sets the encoding name of the .env files. Declaration IEnvLoader SetEncoding(string encodingName) Parameters Type Name Description String encodingName The name of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform."
  },
  "api/DotEnv.Core.IEnvLoader.SetEnvironmentName.html": {
    "href": "api/DotEnv.Core.IEnvLoader.SetEnvironmentName.html",
    "title": "Method SetEnvironmentName | DotEnv.Core",
    "keywords": "Method SetEnvironmentName | Improve this Doc View Source SetEnvironmentName(String) Sets the name of the environment. Declaration IEnvLoader SetEnvironmentName(string envName) Parameters Type Name Description String envName The name of the environment. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException envName is null . ArgumentException envName is a Empty or consists only of white-space characters."
  },
  "api/DotEnv.Core.IEnvLoader.SetEnvironmentVariablesProvider.html": {
    "href": "api/DotEnv.Core.IEnvLoader.SetEnvironmentVariablesProvider.html",
    "title": "Method SetEnvironmentVariablesProvider | DotEnv.Core",
    "keywords": "Method SetEnvironmentVariablesProvider | Improve this Doc View Source SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider. Declaration IEnvLoader SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The custom environment variables provider. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException provider is null ."
  },
  "api/DotEnv.Core.IEnvParser.AllowConcatDuplicateKeys.html": {
    "href": "api/DotEnv.Core.IEnvParser.AllowConcatDuplicateKeys.html",
    "title": "Method AllowConcatDuplicateKeys | DotEnv.Core",
    "keywords": "Method AllowConcatDuplicateKeys | Improve this Doc View Source AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. Declaration IEnvParser AllowConcatDuplicateKeys(ConcatKeysOptions option = ConcatKeysOptions.End) Parameters Type Name Description ConcatKeysOptions option The option indicates whether the concatenation is at the start or at the end of the value. Returns Type Description IEnvParser An instance implementing the fluent interface. Exceptions Type Condition ArgumentException option is not one of the ConcatKeysOptions values."
  },
  "api/DotEnv.Core.IEnvParser.AllowOverwriteExistingVars.html": {
    "href": "api/DotEnv.Core.IEnvParser.AllowOverwriteExistingVars.html",
    "title": "Method AllowOverwriteExistingVars | DotEnv.Core",
    "keywords": "Method AllowOverwriteExistingVars | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Declaration IEnvParser AllowOverwriteExistingVars() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.AvoidModifyEnvironment.html": {
    "href": "api/DotEnv.Core.IEnvParser.AvoidModifyEnvironment.html",
    "title": "Method AvoidModifyEnvironment | DotEnv.Core",
    "keywords": "Method AvoidModifyEnvironment | Improve this Doc View Source AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. Declaration IEnvParser AvoidModifyEnvironment() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.DisableTrimEndKeys.html": {
    "href": "api/DotEnv.Core.IEnvParser.DisableTrimEndKeys.html",
    "title": "Method DisableTrimEndKeys | DotEnv.Core",
    "keywords": "Method DisableTrimEndKeys | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. Declaration IEnvParser DisableTrimEndKeys() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.DisableTrimEndValues.html": {
    "href": "api/DotEnv.Core.IEnvParser.DisableTrimEndValues.html",
    "title": "Method DisableTrimEndValues | DotEnv.Core",
    "keywords": "Method DisableTrimEndValues | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. Declaration IEnvParser DisableTrimEndValues() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.DisableTrimKeys.html": {
    "href": "api/DotEnv.Core.IEnvParser.DisableTrimKeys.html",
    "title": "Method DisableTrimKeys | DotEnv.Core",
    "keywords": "Method DisableTrimKeys | Improve this Doc View Source DisableTrimKeys() Disables the trim at the start and end of the keys. Declaration IEnvParser DisableTrimKeys() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.DisableTrimStartComments.html": {
    "href": "api/DotEnv.Core.IEnvParser.DisableTrimStartComments.html",
    "title": "Method DisableTrimStartComments | DotEnv.Core",
    "keywords": "Method DisableTrimStartComments | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. Declaration IEnvParser DisableTrimStartComments() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.DisableTrimStartKeys.html": {
    "href": "api/DotEnv.Core.IEnvParser.DisableTrimStartKeys.html",
    "title": "Method DisableTrimStartKeys | DotEnv.Core",
    "keywords": "Method DisableTrimStartKeys | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. Declaration IEnvParser DisableTrimStartKeys() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.DisableTrimStartValues.html": {
    "href": "api/DotEnv.Core.IEnvParser.DisableTrimStartValues.html",
    "title": "Method DisableTrimStartValues | DotEnv.Core",
    "keywords": "Method DisableTrimStartValues | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. Declaration IEnvParser DisableTrimStartValues() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.DisableTrimValues.html": {
    "href": "api/DotEnv.Core.IEnvParser.DisableTrimValues.html",
    "title": "Method DisableTrimValues | DotEnv.Core",
    "keywords": "Method DisableTrimValues | Improve this Doc View Source DisableTrimValues() Disables the trim at the start and end of the values. Declaration IEnvParser DisableTrimValues() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.html": {
    "href": "api/DotEnv.Core.IEnvParser.html",
    "title": "Interface IEnvParser | DotEnv.Core",
    "keywords": "Interface IEnvParser Defines the methods that control the parser behavior. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvParser Methods Name Description AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. DisableTrimKeys() Disables the trim at the start and end of the keys. DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. DisableTrimValues() Disables the trim at the start and end of the values. IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Parse(String) Start the parsing to extract the key-value pair from a data source. Parse(String, out EnvValidationResult) Start the parsing to extract the key-value pair from a data source. SetCommentChar(Char) Sets the character that will define the beginning of a comment. SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider."
  },
  "api/DotEnv.Core.IEnvParser.IgnoreParserException.html": {
    "href": "api/DotEnv.Core.IEnvParser.IgnoreParserException.html",
    "title": "Method IgnoreParserException | DotEnv.Core",
    "keywords": "Method IgnoreParserException | Improve this Doc View Source IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Declaration IEnvParser IgnoreParserException() Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.Parse.html": {
    "href": "api/DotEnv.Core.IEnvParser.Parse.html",
    "title": "Method Parse | DotEnv.Core",
    "keywords": "Method Parse | Improve this Doc View Source Parse(String, out EnvValidationResult) Start the parsing to extract the key-value pair from a data source. Declaration IEnvironmentVariablesProvider Parse(string dataSource, out EnvValidationResult result) Parameters Type Name Description String dataSource The data source to parsing. EnvValidationResult result The result contains the errors found by the parser. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Exceptions Type Condition ArgumentNullException dataSource is null . ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. | Improve this Doc View Source Parse(String) Start the parsing to extract the key-value pair from a data source. Declaration IEnvironmentVariablesProvider Parse(string dataSource) Parameters Type Name Description String dataSource The data source to parsing. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Exceptions Type Condition ArgumentNullException dataSource is null . ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked."
  },
  "api/DotEnv.Core.IEnvParser.SetCommentChar.html": {
    "href": "api/DotEnv.Core.IEnvParser.SetCommentChar.html",
    "title": "Method SetCommentChar | DotEnv.Core",
    "keywords": "Method SetCommentChar | Improve this Doc View Source SetCommentChar(Char) Sets the character that will define the beginning of a comment. Declaration IEnvParser SetCommentChar(char commentChar) Parameters Type Name Description Char commentChar The character that defines the beginning of a comment. Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.SetDelimiterKeyValuePair.html": {
    "href": "api/DotEnv.Core.IEnvParser.SetDelimiterKeyValuePair.html",
    "title": "Method SetDelimiterKeyValuePair | DotEnv.Core",
    "keywords": "Method SetDelimiterKeyValuePair | Improve this Doc View Source SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. Declaration IEnvParser SetDelimiterKeyValuePair(char separator) Parameters Type Name Description Char separator The character that separates the key-value pair. Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.SetEnvironmentVariablesProvider.html": {
    "href": "api/DotEnv.Core.IEnvParser.SetEnvironmentVariablesProvider.html",
    "title": "Method SetEnvironmentVariablesProvider | DotEnv.Core",
    "keywords": "Method SetEnvironmentVariablesProvider | Improve this Doc View Source SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider. Declaration IEnvParser SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The custom environment variables provider. Returns Type Description IEnvParser An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException provider is null ."
  },
  "api/DotEnv.Core.IEnvReader.EnvBool.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvBool.html",
    "title": "Method EnvBool | DotEnv.Core",
    "keywords": "Method EnvBool | Improve this Doc View Source EnvBool(String, Boolean) Gets the value of a variable in bool format. Declaration bool EnvBool(string variable, bool defaultValue = false) Parameters Type Name Description String variable Environment variable name. Boolean defaultValue A default value in case the variable is not set. Returns Type Description Boolean A value of the environment variable in bool format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in bool format."
  },
  "api/DotEnv.Core.IEnvReader.EnvByte.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvByte.html",
    "title": "Method EnvByte | DotEnv.Core",
    "keywords": "Method EnvByte | Improve this Doc View Source EnvByte(String, Byte) Gets the value of a variable in byte format. Declaration byte EnvByte(string variable, byte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Byte defaultValue A default value in case the variable is not set. Returns Type Description Byte A value of the environment variable in byte format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in byte format."
  },
  "api/DotEnv.Core.IEnvReader.EnvChar.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvChar.html",
    "title": "Method EnvChar | DotEnv.Core",
    "keywords": "Method EnvChar | Improve this Doc View Source EnvChar(String, Char) Gets the value of a variable in char format. Declaration char EnvChar(string variable, char defaultValue = '\\0') Parameters Type Name Description String variable Environment variable name. Char defaultValue A default value in case the variable is not set. Returns Type Description Char A value of the environment variable in char format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in char format."
  },
  "api/DotEnv.Core.IEnvReader.EnvDecimal.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvDecimal.html",
    "title": "Method EnvDecimal | DotEnv.Core",
    "keywords": "Method EnvDecimal | Improve this Doc View Source EnvDecimal(String, Decimal) Gets the value of a variable in decimal format. Declaration decimal EnvDecimal(string variable, decimal defaultValue = 0M) Parameters Type Name Description String variable Environment variable name. Decimal defaultValue A default value in case the variable is not set. Returns Type Description Decimal A value of the environment variable in decimal format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in decimal format."
  },
  "api/DotEnv.Core.IEnvReader.EnvDouble.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvDouble.html",
    "title": "Method EnvDouble | DotEnv.Core",
    "keywords": "Method EnvDouble | Improve this Doc View Source EnvDouble(String, Double) Gets the value of a variable in double format. Declaration double EnvDouble(string variable, double defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Double defaultValue A default value in case the variable is not set. Returns Type Description Double A value of the environment variable in double format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in double format."
  },
  "api/DotEnv.Core.IEnvReader.EnvFloat.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvFloat.html",
    "title": "Method EnvFloat | DotEnv.Core",
    "keywords": "Method EnvFloat | Improve this Doc View Source EnvFloat(String, Single) Gets the value of a variable in float format. Declaration float EnvFloat(string variable, float defaultValue = 0F) Parameters Type Name Description String variable Environment variable name. Single defaultValue A default value in case the variable is not set. Returns Type Description Single A value of the environment variable in float format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in float format."
  },
  "api/DotEnv.Core.IEnvReader.EnvInt.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvInt.html",
    "title": "Method EnvInt | DotEnv.Core",
    "keywords": "Method EnvInt | Improve this Doc View Source EnvInt(String, Int32) Gets the value of a variable in int format. Declaration int EnvInt(string variable, int defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int32 defaultValue A default value in case the variable is not set. Returns Type Description Int32 A value of the environment variable in int format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in int format."
  },
  "api/DotEnv.Core.IEnvReader.EnvLong.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvLong.html",
    "title": "Method EnvLong | DotEnv.Core",
    "keywords": "Method EnvLong | Improve this Doc View Source EnvLong(String, Int64) Gets the value of a variable in long format. Declaration long EnvLong(string variable, long defaultValue = 0L) Parameters Type Name Description String variable Environment variable name. Int64 defaultValue A default value in case the variable is not set. Returns Type Description Int64 A value of the environment variable in long format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in long format."
  },
  "api/DotEnv.Core.IEnvReader.EnvSByte.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvSByte.html",
    "title": "Method EnvSByte | DotEnv.Core",
    "keywords": "Method EnvSByte | Improve this Doc View Source EnvSByte(String, SByte) Gets the value of a variable in sbyte format. Declaration sbyte EnvSByte(string variable, sbyte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. SByte defaultValue A default value in case the variable is not set. Returns Type Description SByte A value of the environment variable in sbyte format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in sbyte format."
  },
  "api/DotEnv.Core.IEnvReader.EnvShort.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvShort.html",
    "title": "Method EnvShort | DotEnv.Core",
    "keywords": "Method EnvShort | Improve this Doc View Source EnvShort(String, Int16) Gets the value of a variable in short format. Declaration short EnvShort(string variable, short defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int16 defaultValue A default value in case the variable is not set. Returns Type Description Int16 A value of the environment variable in short format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in short format."
  },
  "api/DotEnv.Core.IEnvReader.EnvString.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvString.html",
    "title": "Method EnvString | DotEnv.Core",
    "keywords": "Method EnvString | Improve this Doc View Source EnvString(String, String) Gets the value of a variable in string format. Declaration string EnvString(string variable, string defaultValue = null) Parameters Type Name Description String variable Environment variable name. String defaultValue A default value in case the variable is not set. Returns Type Description String A value of the environment variable in string format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null ."
  },
  "api/DotEnv.Core.IEnvReader.EnvUInt.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvUInt.html",
    "title": "Method EnvUInt | DotEnv.Core",
    "keywords": "Method EnvUInt | Improve this Doc View Source EnvUInt(String, UInt32) Gets the value of a variable in uint format. Declaration uint EnvUInt(string variable, uint defaultValue = 0U) Parameters Type Name Description String variable Environment variable name. UInt32 defaultValue A default value in case the variable is not set. Returns Type Description UInt32 A value of the environment variable in uint format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in uint format."
  },
  "api/DotEnv.Core.IEnvReader.EnvULong.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvULong.html",
    "title": "Method EnvULong | DotEnv.Core",
    "keywords": "Method EnvULong | Improve this Doc View Source EnvULong(String, UInt64) Gets the value of a variable in ulong format. Declaration ulong EnvULong(string variable, ulong defaultValue = 0UL) Parameters Type Name Description String variable Environment variable name. UInt64 defaultValue A default value in case the variable is not set. Returns Type Description UInt64 A value of the environment variable in ulong format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ulong format."
  },
  "api/DotEnv.Core.IEnvReader.EnvUShort.html": {
    "href": "api/DotEnv.Core.IEnvReader.EnvUShort.html",
    "title": "Method EnvUShort | DotEnv.Core",
    "keywords": "Method EnvUShort | Improve this Doc View Source EnvUShort(String, UInt16) Gets the value of a variable in ushort format. Declaration ushort EnvUShort(string variable, ushort defaultValue = 0) Parameters Type Name Description String variable Environment variable name. UInt16 defaultValue A default value in case the variable is not set. Returns Type Description UInt16 A value of the environment variable in ushort format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ushort format."
  },
  "api/DotEnv.Core.IEnvReader.GetBoolValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetBoolValue.html",
    "title": "Method GetBoolValue | DotEnv.Core",
    "keywords": "Method GetBoolValue | Improve this Doc View Source GetBoolValue(String) Gets the value of a variable in bool format. Declaration bool GetBoolValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Boolean A value of the variable in bool format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in bool format."
  },
  "api/DotEnv.Core.IEnvReader.GetByteValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetByteValue.html",
    "title": "Method GetByteValue | DotEnv.Core",
    "keywords": "Method GetByteValue | Improve this Doc View Source GetByteValue(String) Gets the value of a variable in byte format. Declaration byte GetByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Byte A value of the variable in byte format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in byte format."
  },
  "api/DotEnv.Core.IEnvReader.GetCharValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetCharValue.html",
    "title": "Method GetCharValue | DotEnv.Core",
    "keywords": "Method GetCharValue | Improve this Doc View Source GetCharValue(String) Gets the value of a variable in char format. Declaration char GetCharValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Char A value of the variable in char format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in char format."
  },
  "api/DotEnv.Core.IEnvReader.GetDecimalValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetDecimalValue.html",
    "title": "Method GetDecimalValue | DotEnv.Core",
    "keywords": "Method GetDecimalValue | Improve this Doc View Source GetDecimalValue(String) Gets the value of a variable in decimal format. Declaration decimal GetDecimalValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Decimal A value of the variable in decimal format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in decimal format."
  },
  "api/DotEnv.Core.IEnvReader.GetDoubleValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetDoubleValue.html",
    "title": "Method GetDoubleValue | DotEnv.Core",
    "keywords": "Method GetDoubleValue | Improve this Doc View Source GetDoubleValue(String) Gets the value of a variable in double format. Declaration double GetDoubleValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Double A value of the variable in double format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in double format."
  },
  "api/DotEnv.Core.IEnvReader.GetFloatValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetFloatValue.html",
    "title": "Method GetFloatValue | DotEnv.Core",
    "keywords": "Method GetFloatValue | Improve this Doc View Source GetFloatValue(String) Gets the value of a variable in float format. Declaration float GetFloatValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Single A value of the variable in float format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in float format."
  },
  "api/DotEnv.Core.IEnvReader.GetIntValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetIntValue.html",
    "title": "Method GetIntValue | DotEnv.Core",
    "keywords": "Method GetIntValue | Improve this Doc View Source GetIntValue(String) Gets the value of a variable in int format. Declaration int GetIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int32 A value of the variable in int format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in int format."
  },
  "api/DotEnv.Core.IEnvReader.GetLongValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetLongValue.html",
    "title": "Method GetLongValue | DotEnv.Core",
    "keywords": "Method GetLongValue | Improve this Doc View Source GetLongValue(String) Gets the value of a variable in long format. Declaration long GetLongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int64 A value of the variable in long format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in long format."
  },
  "api/DotEnv.Core.IEnvReader.GetSByteValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetSByteValue.html",
    "title": "Method GetSByteValue | DotEnv.Core",
    "keywords": "Method GetSByteValue | Improve this Doc View Source GetSByteValue(String) Gets the value of a variable in sbyte format. Declaration sbyte GetSByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description SByte A value of the variable in sbyte format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in sbyte format."
  },
  "api/DotEnv.Core.IEnvReader.GetShortValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetShortValue.html",
    "title": "Method GetShortValue | DotEnv.Core",
    "keywords": "Method GetShortValue | Improve this Doc View Source GetShortValue(String) Gets the value of a variable in short format. Declaration short GetShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int16 A value of the variable in short format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in short format."
  },
  "api/DotEnv.Core.IEnvReader.GetStringValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetStringValue.html",
    "title": "Method GetStringValue | DotEnv.Core",
    "keywords": "Method GetStringValue | Improve this Doc View Source GetStringValue(String) Gets the value of a variable in string format. Declaration string GetStringValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description String A value of the variable in string format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set."
  },
  "api/DotEnv.Core.IEnvReader.GetUIntValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetUIntValue.html",
    "title": "Method GetUIntValue | DotEnv.Core",
    "keywords": "Method GetUIntValue | Improve this Doc View Source GetUIntValue(String) Gets the value of a variable in uint format. Declaration uint GetUIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt32 A value of the variable in uint format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in uint format."
  },
  "api/DotEnv.Core.IEnvReader.GetULongValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetULongValue.html",
    "title": "Method GetULongValue | DotEnv.Core",
    "keywords": "Method GetULongValue | Improve this Doc View Source GetULongValue(String) Gets the value of a variable in ulong format. Declaration ulong GetULongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt64 A value of the variable in ulong format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in ulong format."
  },
  "api/DotEnv.Core.IEnvReader.GetUShortValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.GetUShortValue.html",
    "title": "Method GetUShortValue | DotEnv.Core",
    "keywords": "Method GetUShortValue | Improve this Doc View Source GetUShortValue(String) Gets the value of a variable in ushort format. Declaration ushort GetUShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt16 A value of the variable in ushort format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in ushort format."
  },
  "api/DotEnv.Core.IEnvReader.HasValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.HasValue.html",
    "title": "Method HasValue | DotEnv.Core",
    "keywords": "Method HasValue | Improve this Doc View Source HasValue(String) Checks if the variable has a value. Declaration bool HasValue(string variable) Parameters Type Name Description String variable The variable to validate. Returns Type Description Boolean true if the variable has a value, otherwise false . Exceptions Type Condition ArgumentNullException variable is null ."
  },
  "api/DotEnv.Core.IEnvReader.html": {
    "href": "api/DotEnv.Core.IEnvReader.html",
    "title": "Interface IEnvReader | DotEnv.Core",
    "keywords": "Interface IEnvReader Defines the methods used to read environment variables from a specific provider . Inherited Members IEnumerable<KeyValuePair<String, String>>.GetEnumerator() IEnumerable.GetEnumerator() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvReader : IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties Name Description Item[String] Gets the value of a variable in string format. Methods Name Description EnvBool(String, Boolean) Gets the value of a variable in bool format. EnvByte(String, Byte) Gets the value of a variable in byte format. EnvChar(String, Char) Gets the value of a variable in char format. EnvDecimal(String, Decimal) Gets the value of a variable in decimal format. EnvDouble(String, Double) Gets the value of a variable in double format. EnvFloat(String, Single) Gets the value of a variable in float format. EnvInt(String, Int32) Gets the value of a variable in int format. EnvLong(String, Int64) Gets the value of a variable in long format. EnvSByte(String, SByte) Gets the value of a variable in sbyte format. EnvShort(String, Int16) Gets the value of a variable in short format. EnvString(String, String) Gets the value of a variable in string format. EnvUInt(String, UInt32) Gets the value of a variable in uint format. EnvULong(String, UInt64) Gets the value of a variable in ulong format. EnvUShort(String, UInt16) Gets the value of a variable in ushort format. GetBoolValue(String) Gets the value of a variable in bool format. GetByteValue(String) Gets the value of a variable in byte format. GetCharValue(String) Gets the value of a variable in char format. GetDecimalValue(String) Gets the value of a variable in decimal format. GetDoubleValue(String) Gets the value of a variable in double format. GetFloatValue(String) Gets the value of a variable in float format. GetIntValue(String) Gets the value of a variable in int format. GetLongValue(String) Gets the value of a variable in long format. GetSByteValue(String) Gets the value of a variable in sbyte format. GetShortValue(String) Gets the value of a variable in short format. GetStringValue(String) Gets the value of a variable in string format. GetUIntValue(String) Gets the value of a variable in uint format. GetULongValue(String) Gets the value of a variable in ulong format. GetUShortValue(String) Gets the value of a variable in ushort format. HasValue(String) Checks if the variable has a value. TryGetBoolValue(String, out Boolean) Try to retrieve the value of a variable in bool format. TryGetByteValue(String, out Byte) Try to retrieve the value of a variable in byte format. TryGetCharValue(String, out Char) Try to retrieve the value of a variable in char format. TryGetDecimalValue(String, out Decimal) Try to retrieve the value of a variable in decimal format. TryGetDoubleValue(String, out Double) Try to retrieve the value of a variable in double format. TryGetFloatValue(String, out Single) Try to retrieve the value of a variable in float format. TryGetIntValue(String, out Int32) Try to retrieve the value of a variable in int format. TryGetLongValue(String, out Int64) Try to retrieve the value of a variable in long format. TryGetSByteValue(String, out SByte) Try to retrieve the value of a variable in sbyte format. TryGetShortValue(String, out Int16) Try to retrieve the value of a variable in short format. TryGetStringValue(String, out String) Try to retrieve the value of a variable in string format. TryGetUIntValue(String, out UInt32) Try to retrieve the value of a variable in uint format. TryGetULongValue(String, out UInt64) Try to retrieve the value of a variable in ulong format. TryGetUShortValue(String, out UInt16) Try to retrieve the value of a variable in ushort format."
  },
  "api/DotEnv.Core.IEnvReader.Item.html": {
    "href": "api/DotEnv.Core.IEnvReader.Item.html",
    "title": "Property Item | DotEnv.Core",
    "keywords": "Property Item | Improve this Doc View Source Item[String] Gets the value of a variable in string format. Declaration string this[string variable] { get; } Parameters Type Name Description String variable The variable name of the value to get. Property Value Type Description String The value of the variable in string format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set."
  },
  "api/DotEnv.Core.IEnvReader.TryGetBoolValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetBoolValue.html",
    "title": "Method TryGetBoolValue | DotEnv.Core",
    "keywords": "Method TryGetBoolValue | Improve this Doc View Source TryGetBoolValue(String, out Boolean) Try to retrieve the value of a variable in bool format. Declaration bool TryGetBoolValue(string variable, out bool value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Boolean value The bool value retrieved or false . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in bool format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetByteValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetByteValue.html",
    "title": "Method TryGetByteValue | DotEnv.Core",
    "keywords": "Method TryGetByteValue | Improve this Doc View Source TryGetByteValue(String, out Byte) Try to retrieve the value of a variable in byte format. Declaration bool TryGetByteValue(string variable, out byte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Byte value The byte value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in byte format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetCharValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetCharValue.html",
    "title": "Method TryGetCharValue | DotEnv.Core",
    "keywords": "Method TryGetCharValue | Improve this Doc View Source TryGetCharValue(String, out Char) Try to retrieve the value of a variable in char format. Declaration bool TryGetCharValue(string variable, out char value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Char value The char value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in char format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetDecimalValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetDecimalValue.html",
    "title": "Method TryGetDecimalValue | DotEnv.Core",
    "keywords": "Method TryGetDecimalValue | Improve this Doc View Source TryGetDecimalValue(String, out Decimal) Try to retrieve the value of a variable in decimal format. Declaration bool TryGetDecimalValue(string variable, out decimal value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Decimal value The decimal value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in decimal format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetDoubleValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetDoubleValue.html",
    "title": "Method TryGetDoubleValue | DotEnv.Core",
    "keywords": "Method TryGetDoubleValue | Improve this Doc View Source TryGetDoubleValue(String, out Double) Try to retrieve the value of a variable in double format. Declaration bool TryGetDoubleValue(string variable, out double value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Double value The double value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in double format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetFloatValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetFloatValue.html",
    "title": "Method TryGetFloatValue | DotEnv.Core",
    "keywords": "Method TryGetFloatValue | Improve this Doc View Source TryGetFloatValue(String, out Single) Try to retrieve the value of a variable in float format. Declaration bool TryGetFloatValue(string variable, out float value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Single value The float value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in float format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetIntValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetIntValue.html",
    "title": "Method TryGetIntValue | DotEnv.Core",
    "keywords": "Method TryGetIntValue | Improve this Doc View Source TryGetIntValue(String, out Int32) Try to retrieve the value of a variable in int format. Declaration bool TryGetIntValue(string variable, out int value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int32 value The int value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in int format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetLongValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetLongValue.html",
    "title": "Method TryGetLongValue | DotEnv.Core",
    "keywords": "Method TryGetLongValue | Improve this Doc View Source TryGetLongValue(String, out Int64) Try to retrieve the value of a variable in long format. Declaration bool TryGetLongValue(string variable, out long value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int64 value The long value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in long format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetSByteValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetSByteValue.html",
    "title": "Method TryGetSByteValue | DotEnv.Core",
    "keywords": "Method TryGetSByteValue | Improve this Doc View Source TryGetSByteValue(String, out SByte) Try to retrieve the value of a variable in sbyte format. Declaration bool TryGetSByteValue(string variable, out sbyte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. SByte value The sbyte value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in sbyte format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetShortValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetShortValue.html",
    "title": "Method TryGetShortValue | DotEnv.Core",
    "keywords": "Method TryGetShortValue | Improve this Doc View Source TryGetShortValue(String, out Int16) Try to retrieve the value of a variable in short format. Declaration bool TryGetShortValue(string variable, out short value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int16 value The short value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in short format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetStringValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetStringValue.html",
    "title": "Method TryGetStringValue | DotEnv.Core",
    "keywords": "Method TryGetStringValue | Improve this Doc View Source TryGetStringValue(String, out String) Try to retrieve the value of a variable in string format. Declaration bool TryGetStringValue(string variable, out string value) Parameters Type Name Description String variable The variable name of the value to try retrieve. String value The string value retrieved or null . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null ."
  },
  "api/DotEnv.Core.IEnvReader.TryGetUIntValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetUIntValue.html",
    "title": "Method TryGetUIntValue | DotEnv.Core",
    "keywords": "Method TryGetUIntValue | Improve this Doc View Source TryGetUIntValue(String, out UInt32) Try to retrieve the value of a variable in uint format. Declaration bool TryGetUIntValue(string variable, out uint value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt32 value The uint value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in uint format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetULongValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetULongValue.html",
    "title": "Method TryGetULongValue | DotEnv.Core",
    "keywords": "Method TryGetULongValue | Improve this Doc View Source TryGetULongValue(String, out UInt64) Try to retrieve the value of a variable in ulong format. Declaration bool TryGetULongValue(string variable, out ulong value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt64 value The ulong value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ulong format."
  },
  "api/DotEnv.Core.IEnvReader.TryGetUShortValue.html": {
    "href": "api/DotEnv.Core.IEnvReader.TryGetUShortValue.html",
    "title": "Method TryGetUShortValue | DotEnv.Core",
    "keywords": "Method TryGetUShortValue | Improve this Doc View Source TryGetUShortValue(String, out UInt16) Try to retrieve the value of a variable in ushort format. Declaration bool TryGetUShortValue(string variable, out ushort value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt16 value The ushort value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ushort format."
  },
  "api/DotEnv.Core.IEnvValidator.html": {
    "href": "api/DotEnv.Core.IEnvValidator.html",
    "title": "Interface IEnvValidator | DotEnv.Core",
    "keywords": "Interface IEnvValidator Represents the validator of the required keys. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvValidator Methods Name Description IgnoreException() Disables/ignores RequiredKeysNotPresentException . This method tells the validator not to throw an exception when it encounters one or more errors. SetRequiredKeys(String[]) Sets the required keys by means of a string collection. SetRequiredKeys(Type) Sets the required keys by means of the properties of a class or struct. SetRequiredKeys<TKeys>() Sets the required keys by means of the properties of a class or struct. Validate() Validates whether the required keys are present in the application. Validate(out EnvValidationResult) Validates whether the required keys are present in the application."
  },
  "api/DotEnv.Core.IEnvValidator.IgnoreException.html": {
    "href": "api/DotEnv.Core.IEnvValidator.IgnoreException.html",
    "title": "Method IgnoreException | DotEnv.Core",
    "keywords": "Method IgnoreException | Improve this Doc View Source IgnoreException() Disables/ignores RequiredKeysNotPresentException . This method tells the validator not to throw an exception when it encounters one or more errors. Declaration IEnvValidator IgnoreException() Returns Type Description IEnvValidator An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvValidator.SetRequiredKeys.html": {
    "href": "api/DotEnv.Core.IEnvValidator.SetRequiredKeys.html",
    "title": "Method SetRequiredKeys | DotEnv.Core",
    "keywords": "Method SetRequiredKeys | Improve this Doc View Source SetRequiredKeys(String[]) Sets the required keys by means of a string collection. Declaration IEnvValidator SetRequiredKeys(params string[] keys) Parameters Type Name Description String [] keys The required keys to set. Returns Type Description IEnvValidator An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException keys is null . ArgumentException The length of the keys list is zero. | Improve this Doc View Source SetRequiredKeys<TKeys>() Sets the required keys by means of the properties of a class or struct. Declaration IEnvValidator SetRequiredKeys<TKeys>() Returns Type Description IEnvValidator An instance implementing the fluent interface. Type Parameters Name Description TKeys The type with the required keys. | Improve this Doc View Source SetRequiredKeys(Type) Sets the required keys by means of the properties of a class or struct. Declaration IEnvValidator SetRequiredKeys(Type keysType) Parameters Type Name Description Type keysType The type with the required keys. Returns Type Description IEnvValidator An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException keysType is null ."
  },
  "api/DotEnv.Core.IEnvValidator.Validate.html": {
    "href": "api/DotEnv.Core.IEnvValidator.Validate.html",
    "title": "Method Validate | DotEnv.Core",
    "keywords": "Method Validate | Improve this Doc View Source Validate(out EnvValidationResult) Validates whether the required keys are present in the application. Declaration void Validate(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the validator. Exceptions Type Condition InvalidOperationException The required keys are not specified with the SetRequiredKeys method. RequiredKeysNotPresentException If the required keys are not present in the application. This exception is not thrown if the IgnoreException() method is invoked. | Improve this Doc View Source Validate() Validates whether the required keys are present in the application. Declaration void Validate() Exceptions Type Condition InvalidOperationException The required keys are not specified with the SetRequiredKeys method. RequiredKeysNotPresentException If the required keys are not present in the application. This exception is not thrown if the IgnoreException() method is invoked."
  },
  "api/DotEnv.Core.ParserException.-ctor.html": {
    "href": "api/DotEnv.Core.ParserException.-ctor.html",
    "title": "Constructor ParserException | DotEnv.Core",
    "keywords": "Constructor ParserException | Improve this Doc View Source ParserException() Initializes a new instance of the ParserException class with a default message. Declaration public ParserException() | Improve this Doc View Source ParserException(String) Initializes a new instance of the ParserException class with the a specified error message. Declaration public ParserException(string message) Parameters Type Name Description String message The message that describes the error."
  },
  "api/DotEnv.Core.ParserException.html": {
    "href": "api/DotEnv.Core.ParserException.html",
    "title": "Class ParserException | DotEnv.Core",
    "keywords": "Class ParserException The exception that is thrown when the parser encounters one or more errors. Inheritance Object Exception ParserException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class ParserException : Exception, ISerializable Constructors Name Description ParserException() Initializes a new instance of the ParserException class with a default message. ParserException(String) Initializes a new instance of the ParserException class with the a specified error message."
  },
  "api/DotEnv.Core.RequiredKeysNotPresentException.-ctor.html": {
    "href": "api/DotEnv.Core.RequiredKeysNotPresentException.-ctor.html",
    "title": "Constructor RequiredKeysNotPresentException | DotEnv.Core",
    "keywords": "Constructor RequiredKeysNotPresentException | Improve this Doc View Source RequiredKeysNotPresentException() Initializes a new instance of the RequiredKeysNotPresentException class with a default message. Declaration public RequiredKeysNotPresentException() | Improve this Doc View Source RequiredKeysNotPresentException(String) Initializes a new instance of the RequiredKeysNotPresentException class with the a specified error message. Declaration public RequiredKeysNotPresentException(string message) Parameters Type Name Description String message The message that describes the error."
  },
  "api/DotEnv.Core.RequiredKeysNotPresentException.html": {
    "href": "api/DotEnv.Core.RequiredKeysNotPresentException.html",
    "title": "Class RequiredKeysNotPresentException | DotEnv.Core",
    "keywords": "Class RequiredKeysNotPresentException The exception that is thrown when the required keys are not present in the application. Inheritance Object Exception RequiredKeysNotPresentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class RequiredKeysNotPresentException : Exception, ISerializable Constructors Name Description RequiredKeysNotPresentException() Initializes a new instance of the RequiredKeysNotPresentException class with a default message. RequiredKeysNotPresentException(String) Initializes a new instance of the RequiredKeysNotPresentException class with the a specified error message."
  },
  "api/DotEnv.Core.VariableNotSetException.-ctor.html": {
    "href": "api/DotEnv.Core.VariableNotSetException.-ctor.html",
    "title": "Constructor VariableNotSetException | DotEnv.Core",
    "keywords": "Constructor VariableNotSetException | Improve this Doc View Source VariableNotSetException() Initializes a new instance of the VariableNotSetException class with a default message. Declaration public VariableNotSetException() | Improve this Doc View Source VariableNotSetException(String) Initializes a new instance of the VariableNotSetException class with the a specified error message. Declaration public VariableNotSetException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source VariableNotSetException(String, String) Initializes a new instance of the VariableNotSetException class with the a specified error message, and the parameter name. Declaration public VariableNotSetException(string message, string paramName) Parameters Type Name Description String message The message that describes the error. String paramName The parameter name that caused the exception."
  },
  "api/DotEnv.Core.VariableNotSetException.html": {
    "href": "api/DotEnv.Core.VariableNotSetException.html",
    "title": "Class VariableNotSetException | DotEnv.Core",
    "keywords": "Class VariableNotSetException The exception that is thrown when the environment variable is not set to a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Inheritance Object Exception SystemException ArgumentException VariableNotSetException Implements ISerializable Inherited Members ArgumentException.GetObjectData(SerializationInfo, StreamingContext) ArgumentException.Message ArgumentException.ParamName Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class VariableNotSetException : ArgumentException, ISerializable Constructors Name Description VariableNotSetException() Initializes a new instance of the VariableNotSetException class with a default message. VariableNotSetException(String) Initializes a new instance of the VariableNotSetException class with the a specified error message. VariableNotSetException(String, String) Initializes a new instance of the VariableNotSetException class with the a specified error message, and the parameter name."
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationExtensions.AddEnvFile.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationExtensions.AddEnvFile.html",
    "title": "Method AddEnvFile | DotEnv.Core",
    "keywords": "Method AddEnvFile | Improve this Doc View Source AddEnvFile(IConfigurationBuilder, String) Adds the ENV configuration provider at path to builder . Declaration public static IConfigurationBuilder AddEnvFile(this IConfigurationBuilder builder, string path) Parameters Type Name Description IConfigurationBuilder builder The IConfigurationBuilder to add to. String path The path to the file. Returns Type Description IConfigurationBuilder The IConfigurationBuilder . Exceptions Type Condition ArgumentNullException builder is null . ArgumentException If the path is null, empty or consists only of white-space characters. | Improve this Doc View Source AddEnvFile(IConfigurationBuilder, String, Boolean) Adds a ENV configuration source to builder . Declaration public static IConfigurationBuilder AddEnvFile(this IConfigurationBuilder builder, string path, bool optional) Parameters Type Name Description IConfigurationBuilder builder The IConfigurationBuilder to add to. String path The path to the file. Boolean optional Whether the file is optional. Returns Type Description IConfigurationBuilder The IConfigurationBuilder . Exceptions Type Condition ArgumentNullException builder is null . ArgumentException If the path is null, empty or consists only of white-space characters. | Improve this Doc View Source AddEnvFile(IConfigurationBuilder, Action<EnvConfigurationSource>) Adds a ENV configuration source to builder . Declaration public static IConfigurationBuilder AddEnvFile(this IConfigurationBuilder builder, Action<EnvConfigurationSource> configureSource) Parameters Type Name Description IConfigurationBuilder builder The IConfigurationBuilder to add to. Action < EnvConfigurationSource > configureSource Configures the source. Returns Type Description IConfigurationBuilder The IConfigurationBuilder . Exceptions Type Condition ArgumentNullException builder , or configureSource is null ."
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationExtensions.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationExtensions.html",
    "title": "Class EnvConfigurationExtensions | DotEnv.Core",
    "keywords": "Class EnvConfigurationExtensions Extension methods for adding EnvConfigurationProvider . Inheritance Object EnvConfigurationExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Extensions.Configuration Assembly : DotEnv.Extensions.Microsoft.Configuration.dll Syntax public static class EnvConfigurationExtensions Methods Name Description AddEnvFile(IConfigurationBuilder, Action<EnvConfigurationSource>) Adds a ENV configuration source to builder . AddEnvFile(IConfigurationBuilder, String) Adds the ENV configuration provider at path to builder . AddEnvFile(IConfigurationBuilder, String, Boolean) Adds a ENV configuration source to builder ."
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationProvider.-ctor.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationProvider.-ctor.html",
    "title": "Constructor EnvConfigurationProvider | DotEnv.Core",
    "keywords": "Constructor EnvConfigurationProvider | Improve this Doc View Source EnvConfigurationProvider(EnvConfigurationSource) Initializes a new instance with the specified source. Declaration public EnvConfigurationProvider(EnvConfigurationSource source) Parameters Type Name Description EnvConfigurationSource source The source settings. Exceptions Type Condition ArgumentNullException source is null ."
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationProvider.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationProvider.html",
    "title": "Class EnvConfigurationProvider | DotEnv.Core",
    "keywords": "Class EnvConfigurationProvider An ENV file based ConfigurationProvider . Inheritance Object ConfigurationProvider EnvConfigurationProvider Implements IConfigurationProvider Inherited Members ConfigurationProvider.TryGet(String, String) ConfigurationProvider.Set(String, String) ConfigurationProvider.GetChildKeys(IEnumerable<String>, String) ConfigurationProvider.GetReloadToken() ConfigurationProvider.OnReload() ConfigurationProvider.ToString() ConfigurationProvider.Data Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Microsoft.Extensions.Configuration Assembly : DotEnv.Extensions.Microsoft.Configuration.dll Syntax public class EnvConfigurationProvider : ConfigurationProvider, IConfigurationProvider Constructors Name Description EnvConfigurationProvider(EnvConfigurationSource) Initializes a new instance with the specified source. Methods Name Description Load() Loads the data for this provider."
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationProvider.Load.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationProvider.Load.html",
    "title": "Method Load | DotEnv.Core",
    "keywords": "Method Load | Improve this Doc View Source Load() Loads the data for this provider. Declaration public override void Load() Overrides ConfigurationProvider.Load()"
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationSource.Build.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationSource.Build.html",
    "title": "Method Build | DotEnv.Core",
    "keywords": "Method Build | Improve this Doc View Source Build(IConfigurationBuilder) Builds the EnvConfigurationProvider for this source. Declaration public IConfigurationProvider Build(IConfigurationBuilder builder) Parameters Type Name Description IConfigurationBuilder builder The IConfigurationBuilder . Returns Type Description IConfigurationProvider An EnvConfigurationProvider Implements IConfigurationSource.Build(IConfigurationBuilder) Exceptions Type Condition InvalidOperationException Path is null, empty or consists only of white-space characters."
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationSource.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationSource.html",
    "title": "Class EnvConfigurationSource | DotEnv.Core",
    "keywords": "Class EnvConfigurationSource Represents an ENV file as an IConfigurationSource . Inheritance Object EnvConfigurationSource Implements IConfigurationSource Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Extensions.Configuration Assembly : DotEnv.Extensions.Microsoft.Configuration.dll Syntax public class EnvConfigurationSource : IConfigurationSource Properties Name Description Optional Determines if loading the file is optional. Path The path to the file. Methods Name Description Build(IConfigurationBuilder) Builds the EnvConfigurationProvider for this source."
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationSource.Optional.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationSource.Optional.html",
    "title": "Property Optional | DotEnv.Core",
    "keywords": "Property Optional | Improve this Doc View Source Optional Determines if loading the file is optional. Declaration public bool Optional { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.Extensions.Configuration.EnvConfigurationSource.Path.html": {
    "href": "api/Microsoft.Extensions.Configuration.EnvConfigurationSource.Path.html",
    "title": "Property Path | DotEnv.Core",
    "keywords": "Property Path | Improve this Doc View Source Path The path to the file. Declaration public string Path { get; set; } Property Value Type Description String"
  },
  "api/Microsoft.Extensions.Configuration.html": {
    "href": "api/Microsoft.Extensions.Configuration.html",
    "title": "Namespace Microsoft.Extensions.Configuration | DotEnv.Core",
    "keywords": "Namespace Microsoft.Extensions.Configuration Classes EnvConfigurationExtensions Extension methods for adding EnvConfigurationProvider . EnvConfigurationProvider An ENV file based ConfigurationProvider . EnvConfigurationSource Represents an ENV file as an IConfigurationSource ."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | DotEnv.Core",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ServiceCollectionExtensions"
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCustomEnv.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCustomEnv.html",
    "title": "Method AddCustomEnv | DotEnv.Core",
    "keywords": "Method AddCustomEnv | Improve this Doc View Source AddCustomEnv(IServiceCollection, String, String) Adds the environment vars based on the environment (development, test, staging or production). This registers IEnvReader as a singleton and calls the LoadEnv() method. Declaration public static IEnvReader AddCustomEnv(this IServiceCollection services, string basePath = null, string environmentName = null) Parameters Type Name Description IServiceCollection services The service collection. String basePath The base path where the .env files will be located. String environmentName The name of the environment. Returns Type Description IEnvReader An instance that allows access to the environment variables. Exceptions Type Condition ArgumentNullException services is null . | Improve this Doc View Source AddCustomEnv<TSettings>(IServiceCollection, String, String) Adds the environment vars based on the environment (development, test, staging or production). This registers TSettings as a singleton and calls the LoadEnv() method. Declaration public static TSettings AddCustomEnv<TSettings>(this IServiceCollection services, string basePath = null, string environmentName = null) where TSettings : class, new() Parameters Type Name Description IServiceCollection services The service collection. String basePath The base path where the .env files will be located. String environmentName The name of the environment. Returns Type Description TSettings An instance that allows access to the environment variables. Type Parameters Name Description TSettings The type of the new instance to bind. Exceptions Type Condition ArgumentNullException services is null ."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddDotEnv.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddDotEnv.html",
    "title": "Method AddDotEnv | DotEnv.Core",
    "keywords": "Method AddDotEnv | Improve this Doc View Source AddDotEnv(IServiceCollection) Adds the environment vars using a service. This registers IEnvReader as a singleton and calls the Load() method. Declaration public static IEnvReader AddDotEnv(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The service collection. Returns Type Description IEnvReader An instance that allows access to the environment variables. Exceptions Type Condition ArgumentNullException services is null . | Improve this Doc View Source AddDotEnv(IServiceCollection, String[]) Adds the environment vars using a service. This registers IEnvReader as a singleton and calls the Load() method. Declaration public static IEnvReader AddDotEnv(this IServiceCollection services, params string[] paths) Parameters Type Name Description IServiceCollection services The service collection. String [] paths The .env files paths to add. Returns Type Description IEnvReader An instance that allows access to the environment variables. Exceptions Type Condition ArgumentNullException services , or paths is null . ArgumentException The length of the paths list is zero. | Improve this Doc View Source AddDotEnv<TSettings>(IServiceCollection) Adds the environment vars using a service. This registers TSettings as a singleton and calls the Load() method. Declaration public static TSettings AddDotEnv<TSettings>(this IServiceCollection services) where TSettings : class, new() Parameters Type Name Description IServiceCollection services The service collection. Returns Type Description TSettings An instance that allows access to the environment variables. Type Parameters Name Description TSettings The type of the new instance to bind. Exceptions Type Condition ArgumentNullException services is null . | Improve this Doc View Source AddDotEnv<TSettings>(IServiceCollection, String[]) Adds the environment vars using a service. This registers TSettings as a singleton and calls the Load() method. Declaration public static TSettings AddDotEnv<TSettings>(this IServiceCollection services, params string[] paths) where TSettings : class, new() Parameters Type Name Description IServiceCollection services The service collection. String [] paths The .env files paths to add. Returns Type Description TSettings An instance that allows access to the environment variables. Type Parameters Name Description TSettings The type of the new instance to bind. Exceptions Type Condition ArgumentNullException services , or paths is null . ArgumentException The length of the paths list is zero."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | DotEnv.Core",
    "keywords": "Class ServiceCollectionExtensions Inheritance Object ServiceCollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : DotEnv.Extensions.Microsoft.DI.dll Syntax public static class ServiceCollectionExtensions Methods Name Description AddCustomEnv(IServiceCollection, String, String) Adds the environment vars based on the environment (development, test, staging or production). This registers IEnvReader as a singleton and calls the LoadEnv() method. AddCustomEnv<TSettings>(IServiceCollection, String, String) Adds the environment vars based on the environment (development, test, staging or production). This registers TSettings as a singleton and calls the LoadEnv() method. AddDotEnv(IServiceCollection) Adds the environment vars using a service. This registers IEnvReader as a singleton and calls the Load() method. AddDotEnv(IServiceCollection, String[]) Adds the environment vars using a service. This registers IEnvReader as a singleton and calls the Load() method. AddDotEnv<TSettings>(IServiceCollection) Adds the environment vars using a service. This registers TSettings as a singleton and calls the Load() method. AddDotEnv<TSettings>(IServiceCollection, String[]) Adds the environment vars using a service. This registers TSettings as a singleton and calls the Load() method."
  },
  "articles/accessing_environment_variables.html": {
    "href": "articles/accessing_environment_variables.html",
    "title": "Accessing environment variables | DotEnv.Core",
    "keywords": "Accessing environment variables Helper methods The EnvReader class has multiple helper methods that are used to access the environment variables of a specific provider. Get{Type}Value The helper methods that begin with the word Get will throw an exception when the environment variable is not set: GetStringValue GetIntValue GetLongValue GetFloatValue // And so on... For example: var reader = new EnvReader(); try { string key = reader[\"KEY\"]; string key1 = reader.GetStringValue(\"KEY1\"); int key2 = reader.GetIntValue(\"KEY2\"); long key3 = reader.GetLongValue(\"KEY3\"); float key4 = reader.GetFloatValue(\"KEY4\"); } catch(VariableNotSetException ex) { System.Console.WriteLine(ex.Message); } Don't forget to consult the API documentation for more helper methods starting with the word Get . TryGet{Type}Value The helper methods that begin with the word Try do not throw an exception, but return a false value when the environment variable is not set: TryGetStringValue TryGetIntValue TryGetLongValue TryGetFloatValue // And so on... For example: var reader = new EnvReader(); if(reader.TryGetStringValue(\"KEY1\", out string value1)) { System.Console.WriteLine(value1); } else { System.Console.WriteLine(\"Variable not found!\"); } if(reader.TryGetIntValue(\"KEY2\", out int value2)) { System.Console.WriteLine(value2); } else { System.Console.WriteLine(\"Variable not found!\"); } Don't forget to consult the API documentation for more helper methods starting with the word Try . Env{Type} The helper methods that begin with the word Env return a default value when the environment variable is not set: EnvString EnvInt EnvLong EnvFloat // And so on... For example: var reader = new EnvReader(); string key1 = reader.EnvString(\"KEY1\", \"Variable Not Found!\"); int key2 = reader.EnvInt(\"KEY2\", -1); long key3 = reader.EnvLong(\"KEY3\", -1); float key4 = reader.EnvFloat(\"KEY4\", -1.0F); Then, if for example, the variable KEY1 is not set, then the method returns Variable Not Found! (default value). The second parameter is optional: var reader = new EnvReader(); // Default value: null. string key1 = reader.EnvString(\"KEY1\"); // Default value: 0. int key2 = reader.EnvInt(\"KEY2\"); // Default value: 0. long key3 = reader.EnvLong(\"KEY3\"); // Default value: 0.0 float key4 = reader.EnvFloat(\"KEY4\"); Here for example, if KEY1 is not set, the method returns null (default value). Don't forget to consult the API documentation for more helper methods starting with the word Env . HasValue You can use this method to check if an environment variable has a value: var reader = new EnvReader(); Console.WriteLine(reader.HasValue(\"VARIABLE_NAME\")); Console.WriteLine(EnvReader.Instance.HasValue(\"VARIABLE_NAME\")); In fact, if you look at the source code of this method, what it actually does is to check if the variable is in a specific provider (it could be the environment of the current process or a simple dictionary). Customize EnvReader You can also create a class that inherits from the EnvReader class and can add new methods or override existing methods: class CustomEnvReader : EnvReader { public CustomEnvReader() { } public CustomEnvReader(IEnvironmentVariablesProvider provider) : base(provider) { } public override string GetStringValue(string variable) { // Here you can write your own implementation. } public override bool TryGetStringValue(string variable, out string value) { // Here you can write your own implementation. } public override string EnvString(string variable, string defaultValue = default) { // Here you can write your own implementation. } // And so on... } Iterate You can also access all environment variables using the iterator: var reader = new EnvReader(); foreach(string(key, value) in reader) System.Console.WriteLine($\"{key}, {value}\"); Injecting a Provider The EnvReader class has no relationship to the environment variables provider. So you can use the methods of this class to access environment variables, regardless of whether the variables are in the environment of the current process or in a dictionary<string, string> . Example: var envVars = new EnvLoader() .AvoidModifyEnvironment() .Load(); var reader = new EnvReader(provider: envVars); // We access from a dictionary instead of the current environment. string key1 = reader[\"KEY1\"]; In the previous example we load the .env file without altering the environment, so the environment variables are in a dictionary. Later, we inject the instance of type IEnvironmentVariablesProvider that returns the Load method in the constructor of the EnvReader class, this way we can access the environment variables from a dictionary."
  },
  "articles/configuration_options.html": {
    "href": "articles/configuration_options.html",
    "title": "Configuration options | DotEnv.Core",
    "keywords": "Configuration options There are some options that are for the parser, but we can also use it through the EnvLoader class. DisableTrimStartKeys Disable the trim at the beginning of the keys: new EnvLoader() .DisableTrimStartKeys() .Load(); This method will tell the parser not to remove leading white-spaces from the keys. DisableTrimEndKeys Disable the trim at the end of the keys: new EnvLoader() .DisableTrimEndKeys() .Load(); This method will tell the parser not to remove trailing white-spaces from the keys. DisableTrimKeys Disables the trim at the start and end of the keys: new EnvLoader() .DisableTrimKeys() .Load(); This method will tell the parser not to remove leading and trailing white-spaces from the keys. DisableTrimStartValues Disable the trim at the beginning of the values: new EnvLoader() .DisableTrimStartValues() .Load(); This method will tell the parser not to remove leading white-spaces from the values. DisableTrimEndValues Disable the trim at the end of the values: new EnvLoader() .DisableTrimEndValues() .Load(); This method will tell the parser not to remove trailing white-spaces from the values. DisableTrimValues Disables the trim at the start and end of the values: new EnvLoader() .DisableTrimValues() .Load(); This method will tell the parser not to remove leading and trailing white-spaces from the values. DisableTrimStartComments Disable the trim at the beginning of the comments: new EnvLoader() .DisableTrimStartComments() .Load(); This method will tell the parser not to remove leading white-spaces from the comments. AllowOverwriteExistingVars Allows to overwrite the current value of an existing environment variable: new EnvLoader() .AllowOverwriteExistingVars() .Load(); Imagine that if there is an environment variable called KEY1 whose value is 1 , then in an .env file there can be a key named KEY1 whose value is 2 , if this option is enabled, then, when the parser reads KEY1 from the .env file, it will overwrite the value of KEY1 by 2 . AllowConcatDuplicateKeys Allows to concatenate the values of the duplicate keys: new EnvLoader() .AllowConcatDuplicateKeys() .Load(); This method will by default concatenate to the end of the value, for example, imagine you have the following .env file: KEY1 = Hello KEY1 = World KEY1 = ! The parser will concatenate the duplicate keys in this way: KEY1 = HelloWorld! But we can also tell the parser to concatenate at the beginning of the value using ConcatKeysOptions enum: new EnvLoader() .AllowConcatDuplicateKeys(ConcatKeysOptions.Start) .Load(); So if we follow the above example, the parser will concatenate the duplicate keys in this way: KEY1 = !WorldHello IgnoreParserException Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors: new EnvLoader() .IgnoreParserException() .Load(); SetCommentChar Sets the character that will define the beginning of a comment: new EnvLoader() .SetCommentChar(';') .Load(); So the .env file could look like this: ; comment (1) KEY1=VAL1 ; comment (2) SetDelimiterKeyValuePair Sets the delimiter that separates an assigment of a value to a key: new EnvLoader() .SetDelimiterKeyValuePair(':') .Load(); So the .env file could look like this: KEY1: VAL1 KEY2: VAL2"
  },
  "articles/creating_environment_variables_provider.html": {
    "href": "articles/creating_environment_variables_provider.html",
    "title": "Creating environment variables provider | DotEnv.Core",
    "keywords": "Creating environment variables provider Introduction An environment variables provider ( or also called key-value pairs provider ) is an entity that represents a storage of environment variables and provides a service to access them. In the context of this library, the term \" environment variable \" means a \" pair of key-value \". The DotEnv library has two providers of environment variables: Environment of the current process. A dictionary of key/value pairs (this provider is used when using AvoidModifyEnvironment method). In fact, if you look at the source code of the library, you will notice that it has two classes that represent the provider: DefaultEnvironmentProvider and DictionaryProvider . The library exposes an interface to access the provider: IEnvironmentVariablesProvider . Example: var envVars = new EnvLoader().Load(); In the example, the Load method returns an instance that implements the IEnvironmentVariablesProvider interface, through this interface the environment variables of the provider can be accessed: string key1 = envVars[\"KEY1\"]; In this case the environment variables are obtained from the environment of the current process. Customized Provider Let's start creating our environment variables provider: class CustomProvider : IEnvironmentVariablesProvider { private Dictionary<string, string> _keyValuePairs = new(); public string this[string variable] { get => _keyValuePairs.ContainsKey(variable) ? _keyValuePairs[variable] : null; set => _keyValuePairs[variable] = value; } public IEnumerator<KeyValuePair<string, string>> GetEnumerator() => _keyValuePairs.GetEnumerator(); IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator(); } In this provider is where our environment variables will be stored. Then we will use the SetEnvironmentVariablesProvider method to configure our custom provider: var envVars = new EnvLoader() .SetEnvironmentVariablesProvider(new CustomProvider()) .Load(); string key1 = envVars[\"KEY1\"]; In this case the environment variables are obtained from the custom provider. Extension methods The IEnvironmentVariablesProvider interface has its own extension methods: CreateReader Creates an instance that implements the IEnvReader interface: var envVars = new EnvLoader() .SetEnvironmentVariablesProvider(new CustomProvider()) .Load(); // Equivalent to: var reader = new EnvReader(envVars); IEnvReader reader = envVars.CreateReader(); string key1 = envVars[\"KEY1\"]; CreateValidator Creates an instance that implements the IEnvValidator interface: var envVars = new EnvLoader() .SetEnvironmentVariablesProvider(new CustomProvider()) .Load(); // Equivalent to: var validator = new EnvValidator(envVars); IEnvValidator validator = envVars.CreateValidator(); CreateBinder Creates an instance that implements the IEnvBinder interface: var envVars = new EnvLoader() .SetEnvironmentVariablesProvider(new CustomProvider()) .Load(); // Equivalent to: var binder = new EnvBinder(envVars); IEnvBinder binder = envVars.CreateBinder(); ToDictionary Converts the provider instance to a dictionary: var envVars = new EnvLoader().Load(); var dict = envVars.ToDictionary(); More information can be found in the API Documentation ."
  },
  "articles/dependency_injection.html": {
    "href": "articles/dependency_injection.html",
    "title": "Dependency Injection | DotEnv.Core",
    "keywords": "Dependency Injection Introduction Dependency injection is an object-oriented design pattern, in which objects are supplied to a class instead of the class itself creating those objects. The containing class is the one that supplies the object to our class. In some cases, classes should not directly create an instance of the EnvReader class, because if you change the implementation, you will have to make changes in the classes that depend on EnvReader . For example: class Foo { private EnvReader _reader; public Foo() { _reader = new EnvReader(); } } class Bar { private EnvReader _reader; public Bar() { _reader = new EnvReader(); } } The classes Foo and Bar create the instance in the constructor, this makes it difficult to reverse the dependency. In the future you could create a new class that inherits from EnvReader and this would cause changes in two classes: Foo and Bar : class CustomEnvReader : EnvReader { // Here we can override some methods. } class Foo { private EnvReader _reader; public Foo() { // Change #1. _reader = new CustomEnvReader(); } } class Bar { private EnvReader _reader; public Bar() { // Change #2. _reader = new CustomEnvReader(); } } So to avoid those changes in the future, you can make use of dependency injection pattern: class Foo { private EnvReader _reader; public Foo(EnvReader reader) { _reader = reader; } } class Bar { private EnvReader _reader; public Bar(EnvReader reader) { _reader = reader; } } You can also make use of the IEnvReader interface instead of the base EnvReader class: class Foo { private IEnvReader _reader; public Foo(IEnvReader reader) { _reader = reader; } } class Bar { private IEnvReader _reader; public Bar(IEnvReader reader) { _reader = reader; } } You probably don't want to inject the dependency manually, as in this example: class Program { static void Main(string[] args) { var foo = new Foo(new CustomEnvReader()); var bar = new Bar(new CustomEnvReader()); // More code... } } DI Container So in the end we would consider using a service container to handle dependency injection. Microsoft has created a package in NuGet specifically for this: Microsoft.Extensions.DependencyInjection . The above example could be done in this way using the DI Container: // Import all types. using Microsoft.Extensions.DependencyInjection; using DotEnv.Core; class Program { static void Main(string[] args) { // Load the .env file. new EnvLoader().Load(); // Creates the service collection. var services = new ServiceCollection(); // Register services. services.AddSingleton<IEnvReader>(new EnvReader()) .AddTransient<Foo>() .AddTransient<Bar>(); // Creates the service container. using(var serviceProvider = services.BuildServiceProvider()) { // Retrieves an instance of the service and the container resolves the dependencies. var foo = serviceProvider.GetRequiredService<Foo>(); var bar = serviceProvider.GetRequiredService<Bar>(); } } } Another example // Import all types. using Microsoft.Extensions.DependencyInjection; using DotEnv.Core; class Program { static void Main(string[] args) { // Load the .env file. var envVars = new EnvLoader().Load(); // Creates the service collection. var services = new ServiceCollection(); // Register services. services.AddSingleton<IEnvReader>(envVars.CreateReader()) .AddSingleton<IEnvironmentVariablesProvider>(envVars); } }"
  },
  "articles/getting_started.html": {
    "href": "articles/getting_started.html",
    "title": "Getting Started with dotenv.core | DotEnv.Core",
    "keywords": "Getting Started with dotenv.core Installation If you're want to install the package from Visual Studio, you must open the project/solution in Visual Studio, and open the console using the Tools > NuGet Package Manager > Package Manager Console command and run the install command: Install-Package DotEnv.Core If you are making use of the dotnet CLI, then run the following in your terminal: dotnet add package DotEnv.Core Usage The first thing you need to do is create a .env file in the root directory of your project. Loading .env file You must import the namespace types at the beginning of your class file: using DotEnv.Core; Then you can load the .env file with the Load method of the EnvLoader class: new EnvLoader().Load(); By default, the Load method will search for a file called .env in the current directory and if it does not find it, it will search for it in the parent directories of the current directory. Generally, the current directory is where the executable (your application itself) with its dependencies is located. Remember that if no encoding is specified to the Load method, the default will be UTF-8 . Also, by default, the Load method does not overwrite the value of an existing environment variable. Accessing variables After you have loaded the .env file with the Load method, you can access the environment variables using the EnvReader class: var reader = new EnvReader(); string value = reader[\"CONNECTION_STRING\"]; int dbPort = reader.GetIntValue(\"DB_PORT\"); Or you can also access the environment variables using the static property Instance : string value = EnvReader.Instance[\"CONNECTION_STRING\"]; int dbPort = EnvReader.Instance.GetIntValue(\"DB_PORT\"); If you don't want to use the EnvReader class to access environment variables, you can use the string class: string value = \"CONNECTION_STRING\".GetEnv(); int dbPort = \"DB_PORT\".GetEnv<int>(); You can also use the Environment class or the Configuration API to access the environment variables. Suggestion: It is recommended to use constants to avoid hard-coded keys in the application logic. A complete example can be found here . Changing default name You can also change the default name of the .env file using the SetDefaultEnvFileName method: new EnvLoader() .SetDefaultEnvFileName(\".env.dev\") .Load(); Now the Load method will search for the .env.dev file in the current directory and in the parent directories if it is not found in the current directory. Another case would be: new EnvLoader() .SetDefaultEnvFileName(\".env.dev\") .AddEnvFiles(\"/foo/foo2\", \"/bar/bar2\") .Load(); The Load method will search for two .env.dev files in the paths /foo/foo2 and /bar/bar2 . Specifying path absolute You can also specify the absolute path to the .env file: new EnvLoader() .AddEnvFile(\"/home/MyProject/App/src/.env.dev\") .Load(); In this case the Load method will search for the .env.dev file in the path /home/MyProject/App/src/ , if it does not find it, the method will search for the .env.dev file in the parent directories. In other words, the Load method will search for the file in the parent directories of src such as: App , MyProject , home . It is recommended not to use absolute paths, instead use relative paths. Remember that an absolute path can be different in each operating system, so your application could lose portability. Loading multiple .env files You can also load multiple .env files in a single call: new EnvLoader() .AddEnvFiles(\"env.example\", \"env.example2\") .Load(); Or you can use the AddEnvFile method: new EnvLoader() .AddEnvFile(\"env.example\") .AddEnvFile(\"env.example2\") .Load(); If you need to specify an encoding type for all .env files, you can do it like this: new EnvLoader() .AddEnvFiles(\"env.example\", \"env.example2\") // Or you can also use: SetEncoding(\"Unicode\") .SetEncoding(Encoding.Unicode) .Load(); You can also specify an encoding type for each .env file using the AddEnvFile method: new EnvLoader() .AddEnvFile(\"env.example\", Encoding.Unicode) .AddEnvFile(\"env.example2\", Encoding.ASCII) .AddEnvFile(\"env.example3\", \"Unicode\") .AddEnvFile(\"env.example4\", \"ASCII\") .Load(); Optional .env files You can indicate that the existence of an .env file is optional by means of the AddEnvFile method: new EnvLoader() .AddEnvFile(\".env.example\", optional: true) .Load(); At the end the Load method will not generate any error in case the .env.example file is not in a directory, since it is optional. You can also mark all .env files as optional using the AllowAllEnvFilesOptional method: new EnvLoader() .AddEnvFile(\".env.example1\") .AddEnvFile(\".env.example2\") .AddEnvFile(\".env.example3\") .AllowAllEnvFilesOptional() .Load(); Specifying path relative You can also specify a relative path using the AddEnvFile method: new EnvLoader() .AddEnvFile(\"./dotenv/files\") .Load(); In this case, the .env file is inside a directory, i.e. in files . The Load method will search for the file dotenv/files/.env in the current directory, if it does not find it, it will search for it in parent directories. This is useful when the .env file is located in a different directory than the current one. Specifying base path You can specify one base path for all .env files: new EnvLoader() .SetBasePath(\"./dotenv/files\") .AddEnvFiles(\".env.example\", \".env.example2\") .Load(); In this case, the Base Path is a relative path, so the .env.example and .env.example2 files are inside dotenv/files . Error handling By default, the Load method does not throw any exception if it does not found the .env file but you can change this behavior if you use the EnableFileNotFoundException method: try { new EnvLoader() .EnableFileNotFoundException() .Load(); } catch(FileNotFoundException ex) { System.Console.WriteLine(ex.Message); } You can handle the error without throwing an exception by means of the EnvValidationResult class: new EnvLoader() // To ignore the exception thrown by the parser. .IgnoreParserException() .Load(out EnvValidationResult result); if(result.HasError()) { string msg = result.ErrorMessages; System.Console.WriteLine(msg); // Or you can also iterate over the errors. foreach(string errorMsg in result) System.Console.WriteLine(errorMsg); } else { // Execute some action when there is no error. } Note: If you don't know what each class does, don't forget to check the API documentation . Copying .env file to the publish directory You can copy the .env file to the publish directory using the following package: dotnet add package DotEnv.Core.Props For more information, see the README . If you do not want to use the previous package, add the following to your .csproj file: <ItemGroup> <Content Include=\".env\" CopyToPublishDirectory=\"PreserveNewest\" /> </ItemGroup> Note: Your .env file must be in the same directory as the .csproj file."
  },
  "articles/load_envfile_based_environment.html": {
    "href": "articles/load_envfile_based_environment.html",
    "title": "Load .env file based on environment | DotEnv.Core",
    "keywords": "Load .env file based on environment Introduction You can load an .env file based on the environment (dev, test, staging or production) with the LoadEnv method. The environment is defined by the actual environment variable as DOTNET_ENV : System.Environment.SetEnvironmentVariable(\"DOTNET_ENV\", \"test\"); new EnvLoader().LoadEnv(); The LoadEnv method will search for these .env files in the following order: .env.[environment].local (has the highest priority) .env.local .env.[environment] .env (has the lowest priority) The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . Concepts .env : defines the default values for all environments and machines. .env.local : defines the configuration values for all environments but only on the machine which contains the file. This file should not be committed to the repository. .env.[environment] (e.g. .env.test ): defines the default values for one environment, but for all machines (these files are committed). .env.[environment].local (e.g. .env.test.local ): defines configuration values that are machine-specific but only for one environment. Real environment variables always win over env vars created by any of the .env files. The .env and .env.[environment] files should be committed to the repository because they are the same for all developers and machines. However, the env files ending in .local ( .env.local and .env.[environment].local ) should not be committed because only you will use them. Functioning The behavior of the LoadEnv method is simple. Imagine that you open the shell in Linux and type the following command: export DOTNET_ENV=production; Then we run the application and the following code is executed: new EnvLoader().LoadEnv(); The LoadEnv method loads the following .env files: .env.production.local .env.local .env.production .env In this example, at least file .env.production.local or .env.local must be present, otherwise the LoadEnv method generates an error. There must be at least one local file. Configuration option The SetEnvironmentName method can be used to set the environment name from source code: new EnvLoader() .SetEnvironmentName(\"test\") .LoadEnv(); If the actual environment variable DOTNET_ENV is set, the SetEnvironmentName method will have no effect, because the LoadEnv method will give higher priority to the value of DOTNET_ENV . Error handling You can handle the error without throwing an exception by means of the EnvValidationResult class: new EnvLoader() // To ignore the exception thrown by the parser. .IgnoreParserException() .LoadEnv(out EnvValidationResult result); if(result.HasError()) { string msg = result.ErrorMessages; System.Console.WriteLine(msg); } else { // Execute some action when there is no error. } Helper methods The Env class has helper methods to check if the current environment is development, test, staging, or production. The current environment is defined by the actual environment variable DOTNET_ENV . Example: // Equivalent to: Env.CurrentEnvironment = \"test\"; System.Environment.SetEnvironmentVariable(\"DOTNET_ENV\", \"test\"); System.Console.WriteLine(Env.IsDevelopment()); System.Console.WriteLine(Env.IsTest()); System.Console.WriteLine(Env.IsStaging()); System.Console.WriteLine(Env.IsProduction()); System.Console.WriteLine(Env.IsEnvironment(\"test\")); // The example displays the following output to the console: // false // true // false // false // true"
  },
  "articles/load_envfile_without_altering_environment.html": {
    "href": "articles/load_envfile_without_altering_environment.html",
    "title": "Load .env file without altering the environment | DotEnv.Core",
    "keywords": "Load .env file without altering the environment The AvoidModifyEnvironment method tells the loader not to modify the environment: var envVars = new EnvLoader() .AvoidModifyEnvironment() .Load(); string key1 = envVars[\"KEY1\"]; string key2 = envVars[\"KEY2\"]; This way the .env file is loaded without touching the environment. The Load method will return an instance that implements the IEnvironmentVariablesProvider interface and through this instance we can access the environment variables. In fact, the environment variables are obtained from a dictionary, instead of the current process. You can also iterate over the retrieved elements: foreach(string(variable, value) in envVars) System.Console.WriteLine($\"{variable}, {value}\"); You can also convert the provider instance to a dictionary<string, string> : var dict = envVars.ToDictionary();"
  },
  "articles/required_keys.html": {
    "href": "articles/required_keys.html",
    "title": "Required Keys | DotEnv.Core",
    "keywords": "Required Keys Introduction If a required key is not present in the application, an error should be generated. To require configuration keys: new EnvLoader().Load(); new EnvValidator() .SetRequiredKeys(\"SERVICE_APP_ID\", \"SERVICE_KEY\", \"SERVICE_SECRET\") .Validate(); In the above example we first load the .env file and set the variables, then we call the Validate method to validate if the required keys exist in the current environment, otherwise an exception is thrown. In other words, after calling the Load method, it will check if the keys SERVICE_APP_ID , SERVICE_KEY , SERVICE_SECRET exist in the environment of the current process. Other configuration options IgnoreException With this method you can ignore the exception thrown by the Validate method: new EnvLoader().Load(); new EnvValidator() .IgnoreException() .SetRequiredKeys(\"SERVICE_APP_ID\", \"SERVICE_KEY\", \"SERVICE_SECRET\") .Validate(); SetRequiredKeys With this method we can specify the required keys to be validated. This method has several overloads and one of them is to be able to specify the required keys by means of a class with properties: class RequiredKeys { public string SERVICE_APP_ID { get; } public string SERVICE_KEY { get; } public string SERVICE_SECRET { get; } } new EnvLoader().Load(); new EnvValidator() .SetRequiredKeys<RequiredKeys>() .Validate(); You can also pass an instance of type System.Type : new EnvValidator() .SetRequiredKeys(typeof(RequiredKeys)) .Validate(); You should note that the RequiredKeys class must follow the following rules: Each required key is represented as a property. Each property represents a value of type string . Each property must be public . Each property can be read-only or read-write. Error handling You can handle the error through the EnvValidationResult class instead of throwing an exception: new EnvLoader().Load(); new EnvValidator() // To ignore the exception thrown by the validator. .IgnoreException() .SetRequiredKeys<RequiredKeys>() .Validate(out EnvValidationResult result); if(result.HasError()) { string msg = result.ErrorMessages; System.Console.WriteLine(msg); } else { // Execute some action when there is no error. } Injecting a Provider The EnvValidator class is flexible and adapts to any provider, i.e., you can use this class to validate whether the required keys are set in the current process environment or in a dictionary or custom provider. Example: var envVars = new EnvLoader() .AvoidModifyEnvironment() .Load(); new EnvValidator(provider: envVars) .SetRequiredKeys<RequiredKeys>() .Validate(); In the above example, the Load method does not modify the environment, so the environment variables are obtained from a dictionary. The instance of type IEnvironmentVariablesProvider returned by Load method is injected into the constructor of the EnvValidator class, so the Validate method would be checking if the required keys are present in the dictionary, instead of the current environment."
  },
  "articles/using_binder.html": {
    "href": "articles/using_binder.html",
    "title": "Bind the model instance with the configuration keys | DotEnv.Core",
    "keywords": "Bind the model instance with the configuration keys Introduction Start by creating the model that will represent the application configuration: class AppSettings { [EnvKey(\"CONNECTION_STRING\")] public string ConnectionString { get; set; } [EnvKey(\"SECRET_KEY\")] public string SecretKey { get; set; } } The EnvKey attribute is used in case the key names do not match the properties and this is because the key names in a .env file usually follow this convention: KEY_NAME=VALUE (UpperCase + SnakeCase). Note: As of version 2.3.0, it is no longer necessary to use the EnvKey attribute, because the binder performs an additional step: It converts the property name to UpperCaseSnakeCase and then checks if it exists in the environment. Note that this additional step only occurs if the EnvKey attribute is not used. In case the key names of a .env file match the properties, then it is not necessary to use the attribute ( or decorator ): class AppSettings { public string ConnectionString { get; set; } public string SecretKey { get; set; } } Then call the Bind method to bind the AppSettings class to the keys of a .env file: // You must first load the .env file. new EnvLoader().Load(); var settings = new EnvBinder().Bind<AppSettings>(); string key1 = settings.ConnectionString; string key2 = settings.SecretKey; The AppSettings class must follow the following rules: Each property must be public . Each property must be read-write. Observation If you use the EnvBinder class, then you no longer need to use the EnvValidator class, and this is because the EnvBinder.Bind method already throws an exception in case the key is not present in the application, so it would be redundant to use both classes. Configuration options IgnoreException It tells the Bind method not to throw an exception when it encounters one or more errors: var settings = new EnvBinder() .IgnoreException() .Bind<AppSettings>(); AllowBindNonPublicProperties It tells the Bind method that it can bind non-public properties: class AppSettings { public string ConnectionString { get; set; } internal string SecretKey { get; set; } } var settings = new EnvBinder() .AllowBindNonPublicProperties() .Bind<AppSettings>(); Error handling You can handle the error through the EnvValidationResult class instead of throwing an exception: new EnvLoader().Load(); var settings = new EnvBinder() // To ignore the exception thrown by the binder. .IgnoreException() .Bind<AppSettings>(out EnvValidationResult result); if(result.HasError()) { string msg = result.ErrorMessages; System.Console.WriteLine(msg); } else { // Execute some action when there is no error. } Injecting a Provider The EnvBinder class is flexible, it adapts to any provider, so you can use it to bind the model instance to any environment variables provider (such as the current environment or a dictionary). Example: var envVars = new EnvLoader() .AvoidModifyEnvironment() .Load(); var settings = new EnvBinder(provider: envVars).Bind<AppSettings>(); In the above example, the Load method does not modify the environment, so the environment variables are obtained from a dictionary. The Load method will return an instance that implements the IEnvironmentVariablesProvider interface and the instance is then injected into the constructor of the EnvBinder class. Therefore, the Bind method is binding the instance of the model with the keys that are in the provider (which in this case is a dictionary<string, string> ). Register model as a service If you want to use a DI Container as Microsoft.Extensions.DependencyInjection , you must register the model as a service so that the container takes care of injecting the service when required: // In Program.cs: // You must first load the .env file. new EnvLoader().Load(); var settings = new EnvBinder().Bind<AppSettings>(); var services = new ServiceCollection(); // Register the model as a service. services.AddSingleton<AppSettings>(settings); If you are using ASP.NET Core 3.1 , you must register the service in the ConfigureServices method of the Startup class: public void ConfigureServices(IServiceCollection services) { // You must first load the .env file. new EnvLoader().Load(); var settings = new EnvBinder().Bind<AppSettings>(); // Register the model as a service. services.AddSingleton<AppSettings>(settings); } In ASP.NET Core 6 , you must register the service in Program.cs : var builder = WebApplication.CreateBuilder(args); // You must first load the .env file. new EnvLoader().Load(); var settings = new EnvBinder().Bind<AppSettings>(); // Register the model as a service. builder.Services.AddSingleton<AppSettings>(settings);"
  },
  "articles/using_dotenv_aspnetcore.html": {
    "href": "articles/using_dotenv_aspnetcore.html",
    "title": "Using DotEnv in ASP.NET Core | DotEnv.Core",
    "keywords": "Using DotEnv in ASP.NET Core Registering IEnvReader Open the Startup.cs file and in the ConfigureServices method you must load the .env file and register the IEnvReader service: public void ConfigureServices(IServiceCollection services) { new EnvLoader().Load(); services.AddSingleton<IEnvReader>(new EnvReader()); } Then you can access the environment variables with IEnvReader , for example: class HomeController { public HomeController(IEnvReader reader) { string key = reader[\"KEY_NAME\"]; } } If you are using ASP.NET Core 6 you do not need to add anything in the Startup.cs file, just go to Program.cs and load the .env file and register the service: var builder = WebApplication.CreateBuilder(args); new EnvLoader().Load(); builder.Services.AddSingleton<IEnvReader>(new EnvReader()); Using IConfiguration Open the Startup.cs file and in the constructor of the Startup class you will need to load the .env file and build a new configuration: class Startup { public Startup(IConfiguration configuration) { new EnvLoader().Load(); Configuration = new ConfigurationBuilder() .AddEnvironmentVariables() .Build(); } public IConfiguration Configuration { get; } } The AddEnvironmentVariables method must be called because it will add the environment variables in the configuration object managed by ASP.NET Core, so you can access the variables with IConfiguration : class HomeController { public HomeController(IConfiguration configuration) { string key = configuration[\"KEY_NAME\"]; } } If you are using ASP.NET Core 6 , open the Program.cs file and load the .env file and call the Configuration property of the WebApplicationBuilder class: var builder = WebApplication.CreateBuilder(args); new EnvLoader().Load(); builder.Configuration.AddEnvironmentVariables(); Using IOptions If you do not want to use IEnvReader or IConfiguration , you can create your own configuration class and with this custom class you will be able to access the keys that are read from an .env file: // My Custom Class class AppSettings { public string ConnectionString { get; set; } public string JwtSecret { get; set; } } Remember that each property must match the key name of the .env file. Then you must open the Startup.cs file and load the .env file and build the configuration in the constructor of the Startup class: class Startup { public Startup(IConfiguration configuration) { new EnvLoader().Load(); Configuration = new ConfigurationBuilder() .AddEnvironmentVariables() .Build(); } public IConfiguration Configuration { get; } } Then go to ConfigureServices method and register the configuration instance. The idea is to bind the AppSettings class with the configuration instance referenced by the Startup.Configuration property: class Startup { public void ConfigureServices(IServiceCollection services) { services.Configure<AppSettings>(Configuration); } public IConfiguration Configuration { get; } } And ready, you can now use the IOptions interface to access the keys: class HomeController { public HomeController(IOptions<AppSettings> options) { AppSettings settings = options.Value; string key1 = settings.ConnectionString; string key2 = settings.JwtSecret; } } The above explanation is not difficult to adapt to ASP.NET Core 6 if you are using it. I leave you the complete example so that you can guide you: // In Program.cs file: var builder = WebApplication.CreateBuilder(args); new EnvLoader().Load(); builder.Configuration.AddEnvironmentVariables(); builder.Services.Configure<AppSettings>(builder.Configuration); Registering AppSettings If you don't want to use the IOptions interface, you can register the AppSettings class as service: class Startup { public Startup(IConfiguration configuration) { // Load .env file. new EnvLoader().Load(); // Build Configuration. Configuration = new ConfigurationBuilder() .AddEnvironmentVariables() .Build(); } public void ConfigureServices(IServiceCollection services) { // Bind the 'AppSettings' class with the configuration instance. AppSettings settings = ConfigurationBinder.Get<AppSettings>(Configuration); // Register the 'AppSettings' class as service. services.AddSingleton(settings); } public IConfiguration Configuration { get; } } Then you can directly use the AppSettings class to access the configuration values: class HomeController { public HomeController(AppSettings settings) { string key1 = settings.ConnectionString; string key2 = settings.JwtSecret; } } In case you are using ASP.NET Core 6 : // In Program.cs file: var builder = WebApplication.CreateBuilder(args); new EnvLoader().Load(); builder.Configuration.AddEnvironmentVariables(); AppSettings settings = ConfigurationBinder.Get<AppSettings>(builder.Configuration); builder.Services.AddSingleton(settings);"
  },
  "articles/using_parser.html": {
    "href": "articles/using_parser.html",
    "title": "Parsing | DotEnv.Core",
    "keywords": "Parsing Introduction You can also use the parser directly, as in this example: string dataSource = @\" KEY1=VAL1 KEY2=VAL2 KEY3=VAL3 \"; new EnvParser().Parse(dataSource); System.Console.WriteLine(EnvReader.Instance[\"KEY1\"]); System.Console.WriteLine(EnvReader.Instance[\"KEY2\"]); System.Console.WriteLine(EnvReader.Instance[\"KEY3\"]); // The example displays the following output to the console: // VAL1 // VAL2 // VAL3 By default, the Parse method does not overwrite the value of the environment variable. For example: System.Environment.SetEnvironmentVariable(\"KEY1\", \"1\"); new EnvParser().Parse(\"KEY1=VAL1\"); System.Console.WriteLine(EnvReader.Instance[\"KEY1\"]); // The example displays the following output to the console: // 1 In this case, the parser does not overwrite the variable KEY1 , so its current value is maintained. You can also retrieve keys from any data source and pass it to the parser: string dataSource = System.IO.File.ReadAllText(\"./.env\"); new EnvParser().Parse(dataSource); Configuring parser behavior There are configuration options that allow you to change the behavior of the parser, one of them are: string dataSource = System.IO.File.ReadAllText(\"./.env\"); new EnvParser() .DisableTrimStartKeys() .DisableTrimEndKeys() .DisableTrimStartValues() .DisableTrimEndValues() .DisableTrimStartComments() .AllowOverwriteExistingVars() .Parse(dataSource); Don't forget to look up in the API documentation what each configuration option means. Error handling We can handle errors with the EnvValidationResult class instead of throwing an exception: string dataSource = System.IO.File.ReadAllText(\"./.env\"); new EnvParser() // To ignore the exception thrown by the parser. .IgnoreParserException() .Parse(dataSource, out EnvValidationResult result); if(result.HasError()) { System.Console.WriteLine(result.ErrorMessages); } else { // Execute some action when there is no error. } Avoid modifying the environment You can tell the parser not to modify the environment: string dataSource = System.IO.File.ReadAllText(\"./.env\"); var envVars = new EnvParser() .AvoidModifyEnvironment() .Parse(dataSource); As the environment cannot be modified, the Parse method will return an instance that implements the IEnvironmentVariablesProvider interface, through this returned instance, we can access the environment variables that have been set in a dictionary: // The value of the variable is obtained from a dictionary and not from the current environment. string key1 = envVars[\"KEY1\"];"
  },
  "extensions/microsoft_extensions_config.html": {
    "href": "extensions/microsoft_extensions_config.html",
    "title": "Dotenv.Extensions.Microsoft.Configuration | DotEnv.Core",
    "keywords": "Dotenv.Extensions.Microsoft.Configuration ENV configuration provider implementation for Microsoft.Extensions.Configuration . This library adds extension methods for the Microsoft.Extensions.Configuration package, which can be accessed through the IConfigurationBuilder interface. So, this library is just a wrapper and behind the scenes what happens is that it uses the classes and methods from the DotEnv.Core project. This project was created to integrate the DotEnv.Core package into the .NET configuration system. Refer to the API documentation . Installation If you're want to install the package from Visual Studio, you must open the project/solution in Visual Studio, and open the console using the Tools > NuGet Package Manager > Package Manager Console command and run the install command: Install-Package Dotenv.Extensions.Microsoft.Configuration If you are making use of the dotnet CLI, then run the following in your terminal: dotnet add package Dotenv.Extensions.Microsoft.Configuration Usage The following example shows how to read the application configuration from ENV file. using System; using Microsoft.Extensions.Configuration; class Program { static void Main() { // Build a configuration object from ENV file. IConfiguration config = new ConfigurationBuilder() .AddEnvFile(\"appsettings.env\", optional: true) .Build(); // Get a configuration section. IConfigurationSection section = config.GetSection(\"Settings\"); // Read configuration values. Console.WriteLine($\"Server: {section[\"Server\"]}\"); Console.WriteLine($\"Database: {section[\"Database\"]}\"); } } To run this example, include an appsettings.env file with the following content in your project: Settings__Server=example.com Settings__Database=Northwind It doesn't matter if your .env file is in the root directory of your project, the configuration provider will start searching from the current directory and go up the parent directories until it finds it. Samples DotEnv.Extensions.Microsoft.Configuration"
  },
  "extensions/microsoft_extensions_DI.html": {
    "href": "extensions/microsoft_extensions_DI.html",
    "title": "Dotenv.Extensions.Microsoft.DI | DotEnv.Core",
    "keywords": "Dotenv.Extensions.Microsoft.DI This library adds extension methods for the Microsoft.Extensions.DependencyInjection package, which can be accessed through the IServiceCollection interface. So, this library is just a wrapper and behind the scenes what happens is that it uses the classes and methods from the DotEnv.Core project. This project was created to add support for DI and can be used in ASP.NET Core projects. Refer to the API documentation . Advantages The advantages of using this wrapper are: No need to manually call the EnvLoader.Load method to set the environment variables from the .env file. No need to manually call the EnvBinder.Bind method to map the keys of the .env file with the model properties. No need to manually register the service as a singleton: IEnvReader or AppSettings . Installation If you're want to install the package from Visual Studio, you must open the project/solution in Visual Studio, and open the console using the Tools > NuGet Package Manager > Package Manager Console command and run the install command: Install-Package Dotenv.Extensions.Microsoft.DependencyInjection If you are making use of the dotnet CLI, then run the following in your terminal: dotnet add package Dotenv.Extensions.Microsoft.DependencyInjection Usage You only need to invoke the AddDotEnv method to add the environment vars using a service: // Example in ASP.NET Core 6+. var builder = WebApplication.CreateBuilder(args); // Add services to the container. IServiceCollection services = builder.Services; services.AddDotEnv<AppSettings>(); var app = builder.Build(); The following line of code: services.AddDotEnv<AppSettings>(); It does several things: Invokes the Load method of the EnvLoader class to set the environment variables from a file named .env . Invokes the Bind method of the EnvBinder class to map the keys of the .env file with the AppSettings properties. Registers AppSettings as a singleton for the DI container. Subsequently, the configuration class can be used in the controllers and the DI container will take care of injecting the instance when necessary: public class HomeController : ControllerBase { private readonly AppSettings _settings; public HomeController(AppSettings settings) { _settings = settings; } } Note: You can also take a look at the source code of the example project. Load .env file based on environment Use the AddCustomEnv method to adds the environment vars based on the environment (development, test, staging or production): // Example in ASP.NET Core 6+ var builder = WebApplication.CreateBuilder(args); // Add services to the container. IServiceCollection services = builder.Services; services.AddCustomEnv<AppSettings>(); var app = builder.Build(); The following line of code: services.AddCustomEnv<AppSettings>(); It does several things: Invokes the LoadEnv method of the EnvLoader class to set the environment variables from a .env file. This method will search for these .env files in the following order: .env.[environment].local (has the highest priority) .env.local .env.[environment] .env (has the lowest priority) The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . Invokes the Bind method of the EnvBinder class to map the keys of the .env file with the AppSettings properties. Registers AppSettings as a singleton for the DI container. Done, use AppSettings on the controllers and let the container perform the dependency injection. Samples DotEnv.Extensions.Microsoft.DependencyInjection"
  },
  "index.html": {
    "href": "index.html",
    "title": "Features | DotEnv.Core",
    "keywords": "DotEnv.Core is a class library for read and parsing .env files in .NET Core and also provides a mechanism to retrieve the value of an environment variable in a simple and easy way. The advantage of using this library is that you do not need to set the environment variable from the operating system shell ( dotenv sets environment variables from a .env file). Features It has a fluent interface , which makes it simple and easy to use. Support for load multiple .env files. Support to load the .env file depending on the environment (development, test, staging, or production). Searches in parent directories when it does not find the .env file in the current directory. You can set the base path for a set of .env files. You can define which keys should be required by the application. You can change the default .env file name, so it does not necessarily have to be .env . Support for the variables interpolation. And much more. Basic Concepts What is a .env file? A .env file or dotenv file is a simple text configuration file for controlling your Applications environment constants. What do .env files look like? .env files are line delimitated text files, meaning that each new line represents a single variable. By convention .env variable names are uppercase words separated by underscores. Variable names are followed directly by an = which, in turn is followed directly by the value, for example: VARIABLE_NAME=value What is environment variable? An environment variable is a dynamic variable that can affect the behavior of running processes on a computer. They are part of the environment in which a process runs. File Format Empty lines or lines with white-spaces will be ignored. The key-value format must be as follows: KEY=VAL . Single or double quotes in a value are removed. If the value of a key is an empty string, it will be converted to a white-space. White-spaces at both ends of the key and value are ignored. Comments Each line beginning with the # character is a comment. White-spaces at the beginning of each comment will be ignored. Example: # This is a comment without white-spaces # This is a comment with white-spaces KEY=VALUE A comment may begin anywhere on a line after a space (inline comments): KEY=VALUE # This is an inline comment VAR=VALUE # This is another inline comment Interpolating variables Sometimes you will need to interpolate variables within a value, for example: MYSQL_USER=root MYSQL_ROOT_PASSWORD=1234 CONNECTION_STRING=username=${MYSQL_USER};password=${MYSQL_ROOT_PASSWORD};database=testdb; If the variable embedded in the value is not set, the parser will throw an exception, for example: MYSQL_ROOT_PASSWORD=1234 CONNECTION_STRING=username=${MYSQL_USER};password=${MYSQL_ROOT_PASSWORD};database=testdb; MYSQL_USER=root In the above example, the parser should throw an exception because the MYSQL_USER variable is not set. Export variables Lines can start with the export prefix, which has no effect on their interpretation. export VAR=VALUE export KEY=VALUE The export prefix makes it possible to export environment variables from a file using the source command: source .env Multiline values It is possible for single- or double-quoted values to span multiple lines. The following examples are equivalent: KEY=\"first line second line\" VAR='first line second line' KEY=\"first line\\nsecond line\" VAR='first line\\nsecond line' Frequently Answered Questions Can I use an .env file in a production environment? Generally, you should not add sensitive data (such as passwords) to a .env file, as it would be unencrypted! Instead, you could use a secrets manager such as Azure Key Vault or AWS Secrets Manager . If you are going to use .env files in production, make sure you have good security at the infrastructure level and also grant read/write permissions to a specific user (such as admin), so that not just anyone can access your .env file. Should I commit my .env file? Credentials should only be accessible on the machines that need access to them. Never commit sensitive information to a repository that is not needed by every development machine. Why is it not overriding existing environment variables? By default, it won't overwrite existing environment variables as dotenv assumes the deployment environment has more knowledge about configuration than the application does. Contribution Any contribution is welcome, the parser is still VERY dumb, so if you can improve it, do it. Follow the steps below: Fork it Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Added some feature') Push to the branch (git push origin my-new-feature) Create new Pull Request"
  }
}