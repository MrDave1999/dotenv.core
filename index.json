{
  "api/DotEnv.Core.ConcatKeysOptions.html": {
    "href": "api/DotEnv.Core.ConcatKeysOptions.html",
    "title": "Enum ConcatKeysOptions | DotEnv.Core",
    "keywords": "Enum ConcatKeysOptions Specifies the options for concatenation of duplicate keys such as whether to concatenate at the start or end of the value. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public enum ConcatKeysOptions Fields Name Description End This option will tell the parser to concatenate at the end of the value of a duplicate key. Start This option will tell the parser to concatenate at the beginning of the value of a duplicate key."
  },
  "api/DotEnv.Core.Env.html": {
    "href": "api/DotEnv.Core.Env.html",
    "title": "Class Env | DotEnv.Core",
    "keywords": "Class Env This class defines methods to perform checks with the current environment. Inheritance Object Env Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public static class Env Properties | Improve this Doc View Source CurrentEnvironment Gets or sets the current environment (dev, test, staging, or production). Declaration public static string CurrentEnvironment { get; set; } Property Value Type Description String Methods | Improve this Doc View Source IsDevelopment() Checks if the current environment name is development , or dev . Declaration public static bool IsDevelopment() Returns Type Description Boolean true if the environment name is development or dev, otherwise false . | Improve this Doc View Source IsEnvironment(String) Compares the current environment name against the specified value. Declaration public static bool IsEnvironment(string environmentName) Parameters Type Name Description String environmentName The environment name to validate against. Returns Type Description Boolean true if the specified name is the same as the current environment, otherwise false . Exceptions Type Condition ArgumentNullException environmentName is null . | Improve this Doc View Source IsProduction() Checks if the current environment name is production , or prod . Declaration public static bool IsProduction() Returns Type Description Boolean true if the environment name is production or prod, otherwise false . | Improve this Doc View Source IsStaging() Checks if the current environment name is staging . Declaration public static bool IsStaging() Returns Type Description Boolean true if the environment name is staging, otherwise false . | Improve this Doc View Source IsTest() Checks if the current environment name is test . Declaration public static bool IsTest() Returns Type Description Boolean true if the environment name is test, otherwise false ."
  },
  "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.html": {
    "href": "api/DotEnv.Core.EnvironmentVariablesProviderExtensions.html",
    "title": "Class EnvironmentVariablesProviderExtensions | DotEnv.Core",
    "keywords": "Class EnvironmentVariablesProviderExtensions Extension methods for adding IEnvironmentVariablesProvider . Inheritance Object EnvironmentVariablesProviderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public static class EnvironmentVariablesProviderExtensions Methods | Improve this Doc View Source CreateReader(IEnvironmentVariablesProvider) Creates an instance that implements the IEnvReader interface. Declaration public static IEnvReader CreateReader(this IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Returns Type Description IEnvReader An instance that implements the IEnvReader interface. | Improve this Doc View Source CreateValidator(IEnvironmentVariablesProvider) Creates an instance that implements the IEnvValidator interface. Declaration public static IEnvValidator CreateValidator(this IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Returns Type Description IEnvValidator An instance that implements the IEnvValidator interface. | Improve this Doc View Source ToDictionary(IEnvironmentVariablesProvider) Converts the environment variables provider to a dictionary. Declaration public static Dictionary<string, string> ToDictionary(this IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Returns Type Description Dictionary < String , String > A dictionary with the environment variables."
  },
  "api/DotEnv.Core.EnvLoader.html": {
    "href": "api/DotEnv.Core.EnvLoader.html",
    "title": "Class EnvLoader | DotEnv.Core",
    "keywords": "Class EnvLoader Represents the .env files loader. Inheritance Object EnvLoader Implements IEnvLoader Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvLoader : IEnvLoader Methods | Improve this Doc View Source AddEnvFile(String) Adds an .env file in a collection. Declaration public IEnvLoader AddEnvFile(string path) Parameters Type Name Description String path The .env file path to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, Boolean) Adds an .env file to a collection and indicates whether the .env file can be optional, or not. Declaration public IEnvLoader AddEnvFile(string path, bool optional) Parameters Type Name Description String path The .env file path to add. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, String) Adds an .env file with its encoding name in a collection. Declaration public IEnvLoader AddEnvFile(string path, string encodingName) Parameters Type Name Description String path The .env file path to add. String encodingName The encoding name of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path , or encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source AddEnvFile(String, String, Boolean) Adds an .env file with its encoding name in a collection. Declaration public IEnvLoader AddEnvFile(string path, string encodingName, bool optional) Parameters Type Name Description String path The .env file path to add. String encodingName The encoding name of the .env file. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path , or encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source AddEnvFile(String, Encoding) Adds an .env file with its encoding in a collection. Declaration public IEnvLoader AddEnvFile(string path, Encoding encoding) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, Encoding, Boolean) Adds an .env file with its encoding in a collection. Declaration public IEnvLoader AddEnvFile(string path, Encoding encoding, bool optional) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFiles(String[]) Adds the .env files in a collection. Declaration public IEnvLoader AddEnvFiles(params string[] paths) Parameters Type Name Description String [] paths The .env files paths to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException paths is null . ArgumentException The length of the paths list is zero. | Improve this Doc View Source AllowAllEnvFilesOptional() Allows all .env files to be optional. This tells the loader not to raise an error in case the .env file is not found in any directory. Declaration public IEnvLoader AllowAllEnvFilesOptional() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. Declaration public IEnvLoader AllowConcatDuplicateKeys(ConcatKeysOptions option = ConcatKeysOptions.End) Parameters Type Name Description ConcatKeysOptions option The option indicates whether the concatenation is at the start or at the end of the value. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentException option is not one of the ConcatKeysOptions values. | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Declaration public IEnvLoader AllowOverwriteExistingVars() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. Declaration public IEnvLoader AvoidModifyEnvironment() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. Declaration public IEnvLoader DisableTrimEndKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. Declaration public IEnvLoader DisableTrimEndValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimKeys() Disables the trim at the start and end of the keys. Declaration public IEnvLoader DisableTrimKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. Declaration public IEnvLoader DisableTrimStartComments() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. Declaration public IEnvLoader DisableTrimStartKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. Declaration public IEnvLoader DisableTrimStartValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimValues() Disables the trim at the start and end of the values. Declaration public IEnvLoader DisableTrimValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source EnableFileNotFoundException() Enables FileNotFoundException . This method tells the loader to throw an exception when one or more .env files are not found. Declaration public IEnvLoader EnableFileNotFoundException() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source IgnoreParentDirectories() Ignores search in parent directories. This tells the loader not to search in parent directories when the .env file is not in a directory. Declaration public IEnvLoader IgnoreParentDirectories() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Declaration public IEnvLoader IgnoreParserException() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source Load() Loads one or more .env files. By default, it will search for a file called .env . Declaration public IEnvironmentVariablesProvider Load() Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source Load(out EnvValidationResult) Loads one or more .env files. By default, it will search for a file called .env . Declaration public IEnvironmentVariablesProvider Load(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the loader. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source LoadEnv() Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local, .env.local, .env.[environment], .env Declaration public IEnvironmentVariablesProvider LoadEnv() Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source LoadEnv(out EnvValidationResult) Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local, .env.local, .env.[environment], .env Declaration public IEnvironmentVariablesProvider LoadEnv(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the loader. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source SetBasePath(String) Sets the base path for the .env files. Declaration public IEnvLoader SetBasePath(string basePath) Parameters Type Name Description String basePath The base path to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException basePath is null . | Improve this Doc View Source SetCommentChar(Char) Sets the character that will define the beginning of a comment. Declaration public IEnvLoader SetCommentChar(char commentChar) Parameters Type Name Description Char commentChar The character that defines the beginning of a comment. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source SetDefaultEnvFileName(String) Sets the default name of an .env file. Declaration public IEnvLoader SetDefaultEnvFileName(string envFileName) Parameters Type Name Description String envFileName The default name to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException envFileName is null . | Improve this Doc View Source SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. Declaration public IEnvLoader SetDelimiterKeyValuePair(char separator) Parameters Type Name Description Char separator The character that separates the key-value pair. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source SetEncoding(String) Sets the encoding name of the .env files. Declaration public IEnvLoader SetEncoding(string encodingName) Parameters Type Name Description String encodingName The name of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source SetEncoding(Encoding) Sets the encoding of the .env files. Declaration public IEnvLoader SetEncoding(Encoding encoding) Parameters Type Name Description Encoding encoding The type of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException encoding is null . | Improve this Doc View Source SetEnvironmentName(String) Sets the name of the environment. Declaration public IEnvLoader SetEnvironmentName(string envName) Parameters Type Name Description String envName The name of the environment. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException envName is null . ArgumentException envName is a Empty or consists only of white-space characters. | Improve this Doc View Source SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider. Declaration public IEnvLoader SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The custom environment variables provider. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader"
  },
  "api/DotEnv.Core.EnvParser.html": {
    "href": "api/DotEnv.Core.EnvParser.html",
    "title": "Class EnvParser | DotEnv.Core",
    "keywords": "Class EnvParser Defines the methods that control the parser behavior. Inheritance Object EnvParser Implements IEnvParser Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvParser : IEnvParser Methods | Improve this Doc View Source AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. Declaration public IEnvParser AllowConcatDuplicateKeys(ConcatKeysOptions option = ConcatKeysOptions.End) Parameters Type Name Description ConcatKeysOptions option The option indicates whether the concatenation is at the start or at the end of the value. Returns Type Description IEnvParser An instance implementing the fluent interface. Exceptions Type Condition ArgumentException option is not one of the ConcatKeysOptions values. | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Declaration public IEnvParser AllowOverwriteExistingVars() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. Declaration public IEnvParser AvoidModifyEnvironment() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. Declaration public IEnvParser DisableTrimEndKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. Declaration public IEnvParser DisableTrimEndValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimKeys() Disables the trim at the start and end of the keys. Declaration public IEnvParser DisableTrimKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. Declaration public IEnvParser DisableTrimStartComments() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. Declaration public IEnvParser DisableTrimStartKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. Declaration public IEnvParser DisableTrimStartValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimValues() Disables the trim at the start and end of the values. Declaration public IEnvParser DisableTrimValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Declaration public IEnvParser IgnoreParserException() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source Parse(String) Start the parsing to extract the key-value pair from a data source. Declaration public IEnvironmentVariablesProvider Parse(string dataSource) Parameters Type Name Description String dataSource The data source to parsing. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Exceptions Type Condition ArgumentNullException dataSource is null . ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. | Improve this Doc View Source Parse(String, out EnvValidationResult) Start the parsing to extract the key-value pair from a data source. Declaration public IEnvironmentVariablesProvider Parse(string dataSource, out EnvValidationResult result) Parameters Type Name Description String dataSource The data source to parsing. EnvValidationResult result The result contains the errors found by the parser. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Exceptions Type Condition ArgumentNullException dataSource is null . ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. | Improve this Doc View Source SetCommentChar(Char) Sets the character that will define the beginning of a comment. Declaration public IEnvParser SetCommentChar(char commentChar) Parameters Type Name Description Char commentChar The character that defines the beginning of a comment. Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. Declaration public IEnvParser SetDelimiterKeyValuePair(char separator) Parameters Type Name Description Char separator The character that separates the key-value pair. Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider. Declaration public IEnvParser SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The custom environment variables provider. Returns Type Description IEnvParser An instance implementing the fluent interface. Implements IEnvParser"
  },
  "api/DotEnv.Core.EnvReader.html": {
    "href": "api/DotEnv.Core.EnvReader.html",
    "title": "Class EnvReader | DotEnv.Core",
    "keywords": "Class EnvReader Defines the methods used to read the value of an environment variable. Inheritance Object EnvReader Implements IEnvReader IEnumerable < KeyValuePair < String , String >> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvReader : IEnvReader, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors | Improve this Doc View Source EnvReader() Initializes a new instance of the EnvReader class. Declaration public EnvReader() | Improve this Doc View Source EnvReader(IEnvironmentVariablesProvider) Initializes a new instance of the EnvReader class with environment variables provider. Declaration public EnvReader(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Properties | Improve this Doc View Source Instance Gets an instance of type EnvReader . Declaration public static EnvReader Instance { get; } Property Value Type Description EnvReader Remarks This method is thread-safe. | Improve this Doc View Source Item[String] Gets the value of a variable in string format. Declaration public virtual string this[string variable] { get; } Parameters Type Name Description String variable The variable name of the value to get. Property Value Type Description String The value of the variable in string format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. Methods | Improve this Doc View Source EnvBool(String, Boolean) Gets the value of a variable in bool format. Declaration public virtual bool EnvBool(string variable, bool defaultValue = false) Parameters Type Name Description String variable Environment variable name. Boolean defaultValue A default value in case the variable is not set. Returns Type Description Boolean A value of the environment variable in bool format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in bool format. | Improve this Doc View Source EnvByte(String, Byte) Gets the value of a variable in byte format. Declaration public virtual byte EnvByte(string variable, byte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Byte defaultValue A default value in case the variable is not set. Returns Type Description Byte A value of the environment variable in byte format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in byte format. | Improve this Doc View Source EnvChar(String, Char) Gets the value of a variable in char format. Declaration public virtual char EnvChar(string variable, char defaultValue = '\\0') Parameters Type Name Description String variable Environment variable name. Char defaultValue A default value in case the variable is not set. Returns Type Description Char A value of the environment variable in char format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in char format. | Improve this Doc View Source EnvDecimal(String, Decimal) Gets the value of a variable in decimal format. Declaration public virtual decimal EnvDecimal(string variable, decimal defaultValue = 0M) Parameters Type Name Description String variable Environment variable name. Decimal defaultValue A default value in case the variable is not set. Returns Type Description Decimal A value of the environment variable in decimal format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in decimal format. | Improve this Doc View Source EnvDouble(String, Double) Gets the value of a variable in double format. Declaration public virtual double EnvDouble(string variable, double defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Double defaultValue A default value in case the variable is not set. Returns Type Description Double A value of the environment variable in double format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in double format. | Improve this Doc View Source EnvFloat(String, Single) Gets the value of a variable in float format. Declaration public virtual float EnvFloat(string variable, float defaultValue = 0F) Parameters Type Name Description String variable Environment variable name. Single defaultValue A default value in case the variable is not set. Returns Type Description Single A value of the environment variable in float format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in float format. | Improve this Doc View Source EnvInt(String, Int32) Gets the value of a variable in int format. Declaration public virtual int EnvInt(string variable, int defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int32 defaultValue A default value in case the variable is not set. Returns Type Description Int32 A value of the environment variable in int format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in int format. | Improve this Doc View Source EnvLong(String, Int64) Gets the value of a variable in long format. Declaration public virtual long EnvLong(string variable, long defaultValue = 0L) Parameters Type Name Description String variable Environment variable name. Int64 defaultValue A default value in case the variable is not set. Returns Type Description Int64 A value of the environment variable in long format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in long format. | Improve this Doc View Source EnvSByte(String, SByte) Gets the value of a variable in sbyte format. Declaration public virtual sbyte EnvSByte(string variable, sbyte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. SByte defaultValue A default value in case the variable is not set. Returns Type Description SByte A value of the environment variable in sbyte format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in sbyte format. | Improve this Doc View Source EnvShort(String, Int16) Gets the value of a variable in short format. Declaration public virtual short EnvShort(string variable, short defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int16 defaultValue A default value in case the variable is not set. Returns Type Description Int16 A value of the environment variable in short format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in short format. | Improve this Doc View Source EnvString(String, String) Gets the value of a variable in string format. Declaration public virtual string EnvString(string variable, string defaultValue = null) Parameters Type Name Description String variable Environment variable name. String defaultValue A default value in case the variable is not set. Returns Type Description String A value of the environment variable in string format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . | Improve this Doc View Source EnvUInt(String, UInt32) Gets the value of a variable in uint format. Declaration public virtual uint EnvUInt(string variable, uint defaultValue = 0U) Parameters Type Name Description String variable Environment variable name. UInt32 defaultValue A default value in case the variable is not set. Returns Type Description UInt32 A value of the environment variable in uint format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in uint format. | Improve this Doc View Source EnvULong(String, UInt64) Gets the value of a variable in ulong format. Declaration public virtual ulong EnvULong(string variable, ulong defaultValue = 0UL) Parameters Type Name Description String variable Environment variable name. UInt64 defaultValue A default value in case the variable is not set. Returns Type Description UInt64 A value of the environment variable in ulong format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ulong format. | Improve this Doc View Source EnvUShort(String, UInt16) Gets the value of a variable in ushort format. Declaration public virtual ushort EnvUShort(string variable, ushort defaultValue = 0) Parameters Type Name Description String variable Environment variable name. UInt16 defaultValue A default value in case the variable is not set. Returns Type Description UInt16 A value of the environment variable in ushort format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ushort format. | Improve this Doc View Source GetBoolValue(String) Gets the value of a variable in bool format. Declaration public virtual bool GetBoolValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Boolean A value of the variable in bool format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in bool format. | Improve this Doc View Source GetByteValue(String) Gets the value of a variable in byte format. Declaration public virtual byte GetByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Byte A value of the variable in byte format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in byte format. | Improve this Doc View Source GetCharValue(String) Gets the value of a variable in char format. Declaration public virtual char GetCharValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Char A value of the variable in char format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in char format. | Improve this Doc View Source GetDecimalValue(String) Gets the value of a variable in decimal format. Declaration public virtual decimal GetDecimalValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Decimal A value of the variable in decimal format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in decimal format. | Improve this Doc View Source GetDoubleValue(String) Gets the value of a variable in double format. Declaration public virtual double GetDoubleValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Double A value of the variable in double format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in double format. | Improve this Doc View Source GetFloatValue(String) Gets the value of a variable in float format. Declaration public virtual float GetFloatValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Single A value of the variable in float format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in float format. | Improve this Doc View Source GetIntValue(String) Gets the value of a variable in int format. Declaration public virtual int GetIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int32 A value of the variable in int format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in int format. | Improve this Doc View Source GetLongValue(String) Gets the value of a variable in long format. Declaration public virtual long GetLongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int64 A value of the variable in long format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in long format. | Improve this Doc View Source GetSByteValue(String) Gets the value of a variable in sbyte format. Declaration public virtual sbyte GetSByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description SByte A value of the variable in sbyte format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in sbyte format. | Improve this Doc View Source GetShortValue(String) Gets the value of a variable in short format. Declaration public virtual short GetShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int16 A value of the variable in short format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in short format. | Improve this Doc View Source GetStringValue(String) Gets the value of a variable in string format. Declaration public virtual string GetStringValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description String A value of the variable in string format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. | Improve this Doc View Source GetUIntValue(String) Gets the value of a variable in uint format. Declaration public virtual uint GetUIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt32 A value of the variable in uint format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in uint format. | Improve this Doc View Source GetULongValue(String) Gets the value of a variable in ulong format. Declaration public virtual ulong GetULongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt64 A value of the variable in ulong format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in ulong format. | Improve this Doc View Source GetUShortValue(String) Gets the value of a variable in ushort format. Declaration public virtual ushort GetUShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt16 A value of the variable in ushort format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in ushort format. | Improve this Doc View Source HasValue(String) Checks if the variable has a value. Declaration public virtual bool HasValue(string variable) Parameters Type Name Description String variable The variable to validate. Returns Type Description Boolean true if the variable has a value, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . | Improve this Doc View Source TryGetBoolValue(String, out Boolean) Try to retrieve the value of a variable in bool format. Declaration public virtual bool TryGetBoolValue(string variable, out bool value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Boolean value The bool value retrieved or false . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in bool format. | Improve this Doc View Source TryGetByteValue(String, out Byte) Try to retrieve the value of a variable in byte format. Declaration public virtual bool TryGetByteValue(string variable, out byte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Byte value The byte value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in byte format. | Improve this Doc View Source TryGetCharValue(String, out Char) Try to retrieve the value of a variable in char format. Declaration public virtual bool TryGetCharValue(string variable, out char value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Char value The char value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in char format. | Improve this Doc View Source TryGetDecimalValue(String, out Decimal) Try to retrieve the value of a variable in decimal format. Declaration public virtual bool TryGetDecimalValue(string variable, out decimal value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Decimal value The decimal value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in decimal format. | Improve this Doc View Source TryGetDoubleValue(String, out Double) Try to retrieve the value of a variable in double format. Declaration public virtual bool TryGetDoubleValue(string variable, out double value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Double value The double value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in double format. | Improve this Doc View Source TryGetFloatValue(String, out Single) Try to retrieve the value of a variable in float format. Declaration public virtual bool TryGetFloatValue(string variable, out float value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Single value The float value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in float format. | Improve this Doc View Source TryGetIntValue(String, out Int32) Try to retrieve the value of a variable in int format. Declaration public virtual bool TryGetIntValue(string variable, out int value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int32 value The int value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in int format. | Improve this Doc View Source TryGetLongValue(String, out Int64) Try to retrieve the value of a variable in long format. Declaration public virtual bool TryGetLongValue(string variable, out long value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int64 value The long value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in long format. | Improve this Doc View Source TryGetSByteValue(String, out SByte) Try to retrieve the value of a variable in sbyte format. Declaration public virtual bool TryGetSByteValue(string variable, out sbyte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. SByte value The sbyte value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in sbyte format. | Improve this Doc View Source TryGetShortValue(String, out Int16) Try to retrieve the value of a variable in short format. Declaration public virtual bool TryGetShortValue(string variable, out short value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int16 value The short value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in short format. | Improve this Doc View Source TryGetStringValue(String, out String) Try to retrieve the value of a variable in string format. Declaration public virtual bool TryGetStringValue(string variable, out string value) Parameters Type Name Description String variable The variable name of the value to try retrieve. String value The string value retrieved or null . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . | Improve this Doc View Source TryGetUIntValue(String, out UInt32) Try to retrieve the value of a variable in uint format. Declaration public virtual bool TryGetUIntValue(string variable, out uint value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt32 value The uint value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in uint format. | Improve this Doc View Source TryGetULongValue(String, out UInt64) Try to retrieve the value of a variable in ulong format. Declaration public virtual bool TryGetULongValue(string variable, out ulong value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt64 value The ulong value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ulong format. | Improve this Doc View Source TryGetUShortValue(String, out UInt16) Try to retrieve the value of a variable in ushort format. Declaration public virtual bool TryGetUShortValue(string variable, out ushort value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt16 value The ushort value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ushort format. Implements IEnvReader System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/DotEnv.Core.EnvValidationResult.html": {
    "href": "api/DotEnv.Core.EnvValidationResult.html",
    "title": "Class EnvValidationResult | DotEnv.Core",
    "keywords": "Class EnvValidationResult Represents a container for the results of a validation. Inheritance Object EnvValidationResult Implements IEnumerable < String > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvValidationResult : IEnumerable<string>, IEnumerable Properties | Improve this Doc View Source Count Gets the number of errors contained in the container. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source ErrorMessages Gets the error messages. Declaration public string ErrorMessages { get; } Property Value Type Description String Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the errors contained in the container. Declaration public IEnumerator<string> GetEnumerator() Returns Type Description IEnumerator < String > An enumerator that can be used to iterate through the errors contained in the container. | Improve this Doc View Source HasError() Check if there has been an error. Declaration public bool HasError() Returns Type Description Boolean true if an error occurred, otherwise false . Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/DotEnv.Core.EnvValidator.html": {
    "href": "api/DotEnv.Core.EnvValidator.html",
    "title": "Class EnvValidator | DotEnv.Core",
    "keywords": "Class EnvValidator Represents the validator of the required keys. Inheritance Object EnvValidator Implements IEnvValidator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvValidator : IEnvValidator Constructors | Improve this Doc View Source EnvValidator() Initializes a new instance of the EnvValidator class. Declaration public EnvValidator() | Improve this Doc View Source EnvValidator(IEnvironmentVariablesProvider) Initializes a new instance of the EnvValidator class with environment variables provider. Declaration public EnvValidator(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The environment variables provider. Methods | Improve this Doc View Source IgnoreException() Disables/ignores RequiredKeysNotPresentException . This method tells the validator not to throw an exception when it encounters one or more errors. Declaration public IEnvValidator IgnoreException() Returns Type Description IEnvValidator An instance implementing the fluent interface. | Improve this Doc View Source SetRequiredKeys(String[]) Sets the required keys by means of a string collection. Declaration public IEnvValidator SetRequiredKeys(params string[] keys) Parameters Type Name Description String [] keys The required keys to set. Returns Type Description IEnvValidator An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException keys is null . ArgumentException The length of the keys list is zero. | Improve this Doc View Source SetRequiredKeys(Type) Sets the required keys by means of the properties of a class or struct. Declaration public IEnvValidator SetRequiredKeys(Type keysType) Parameters Type Name Description Type keysType The type with the required keys. Returns Type Description IEnvValidator An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException keysType is null . | Improve this Doc View Source SetRequiredKeys<TKeys>() Sets the required keys by means of the properties of a class or struct. Declaration public IEnvValidator SetRequiredKeys<TKeys>() Returns Type Description IEnvValidator An instance implementing the fluent interface. Type Parameters Name Description TKeys The type with the required keys. | Improve this Doc View Source Validate() Validates whether the required keys are present in the application. Declaration public void Validate() Exceptions Type Condition InvalidOperationException The required keys are not specified with the SetRequiredKeys method. RequiredKeysNotPresentException If the required keys are not present in the application. This exception is not thrown if the IgnoreException() method is invoked. | Improve this Doc View Source Validate(out EnvValidationResult) Validates whether the required keys are present in the application. Declaration public void Validate(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the validator. Exceptions Type Condition InvalidOperationException The required keys are not specified with the SetRequiredKeys method. RequiredKeysNotPresentException If the required keys are not present in the application. This exception is not thrown if the IgnoreException() method is invoked. Implements IEnvValidator"
  },
  "api/DotEnv.Core.html": {
    "href": "api/DotEnv.Core.html",
    "title": "Namespace DotEnv.Core | DotEnv.Core",
    "keywords": "Namespace DotEnv.Core Classes Env This class defines methods to perform checks with the current environment. EnvironmentVariablesProviderExtensions Extension methods for adding IEnvironmentVariablesProvider . EnvLoader Represents the .env files loader. EnvParser Defines the methods that control the parser behavior. EnvReader Defines the methods used to read the value of an environment variable. EnvValidationResult Represents a container for the results of a validation. EnvValidator Represents the validator of the required keys. ParserException The exception that is thrown when the parser encounters one or more errors. RequiredKeysNotPresentException The exception that is thrown when the required keys are not present in the application. VariableNotSetException The exception that is thrown when the environment variable is not set to a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Interfaces IEnvironmentVariablesProvider Represents the environment variables provider. The environment variables can be obtained from any provider (e.g., from a Dictionary<TKey,TValue> or from the current process). IEnvLoader Represents the .env files loader. IEnvParser Defines the methods that control the parser behavior. IEnvReader Defines the methods used to read the value of an environment variable. IEnvValidator Represents the validator of the required keys. Enums ConcatKeysOptions Specifies the options for concatenation of duplicate keys such as whether to concatenate at the start or end of the value."
  },
  "api/DotEnv.Core.IEnvironmentVariablesProvider.html": {
    "href": "api/DotEnv.Core.IEnvironmentVariablesProvider.html",
    "title": "Interface IEnvironmentVariablesProvider | DotEnv.Core",
    "keywords": "Interface IEnvironmentVariablesProvider Represents the environment variables provider. The environment variables can be obtained from any provider (e.g., from a Dictionary<TKey,TValue> or from the current process). Inherited Members IEnumerable<KeyValuePair<String, String>>.GetEnumerator() IEnumerable.GetEnumerator() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvironmentVariablesProvider : IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties | Improve this Doc View Source Item[String] Gets or sets the value of the variable. Declaration string this[string variable] { get; set; } Parameters Type Name Description String variable The variable to get or set. Property Value Type Description String Remarks The property gets a null value in case the variable is not found in the provider. Exceptions Type Condition ArgumentNullException variable is null . Extension Methods EnvironmentVariablesProviderExtensions.CreateValidator(IEnvironmentVariablesProvider) EnvironmentVariablesProviderExtensions.CreateReader(IEnvironmentVariablesProvider) EnvironmentVariablesProviderExtensions.ToDictionary(IEnvironmentVariablesProvider)"
  },
  "api/DotEnv.Core.IEnvLoader.html": {
    "href": "api/DotEnv.Core.IEnvLoader.html",
    "title": "Interface IEnvLoader | DotEnv.Core",
    "keywords": "Interface IEnvLoader Represents the .env files loader. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvLoader Methods | Improve this Doc View Source AddEnvFile(String) Adds an .env file in a collection. Declaration IEnvLoader AddEnvFile(string path) Parameters Type Name Description String path The .env file path to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, Boolean) Adds an .env file to a collection and indicates whether the .env file can be optional, or not. Declaration IEnvLoader AddEnvFile(string path, bool optional) Parameters Type Name Description String path The .env file path to add. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, String) Adds an .env file with its encoding name in a collection. Declaration IEnvLoader AddEnvFile(string path, string encodingName) Parameters Type Name Description String path The .env file path to add. String encodingName The encoding name of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path , or encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source AddEnvFile(String, String, Boolean) Adds an .env file with its encoding name in a collection. Declaration IEnvLoader AddEnvFile(string path, string encodingName, bool optional) Parameters Type Name Description String path The .env file path to add. String encodingName The encoding name of the .env file. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path , or encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source AddEnvFile(String, Encoding) Adds an .env file with its encoding in a collection. Declaration IEnvLoader AddEnvFile(string path, Encoding encoding) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFile(String, Encoding, Boolean) Adds an .env file with its encoding in a collection. Declaration IEnvLoader AddEnvFile(string path, Encoding encoding, bool optional) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Boolean optional The value indicating whether the existence of the .env file is optional, or not. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException path is null . | Improve this Doc View Source AddEnvFiles(String[]) Adds the .env files in a collection. Declaration IEnvLoader AddEnvFiles(params string[] paths) Parameters Type Name Description String [] paths The .env files paths to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException paths is null . ArgumentException The length of the paths list is zero. | Improve this Doc View Source AllowAllEnvFilesOptional() Allows all .env files to be optional. This tells the loader not to raise an error in case the .env file is not found in any directory. Declaration IEnvLoader AllowAllEnvFilesOptional() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. Declaration IEnvLoader AllowConcatDuplicateKeys(ConcatKeysOptions option = ConcatKeysOptions.End) Parameters Type Name Description ConcatKeysOptions option The option indicates whether the concatenation is at the start or at the end of the value. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentException option is not one of the ConcatKeysOptions values. | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Declaration IEnvLoader AllowOverwriteExistingVars() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. Declaration IEnvLoader AvoidModifyEnvironment() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. Declaration IEnvLoader DisableTrimEndKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. Declaration IEnvLoader DisableTrimEndValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimKeys() Disables the trim at the start and end of the keys. Declaration IEnvLoader DisableTrimKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. Declaration IEnvLoader DisableTrimStartComments() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. Declaration IEnvLoader DisableTrimStartKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. Declaration IEnvLoader DisableTrimStartValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimValues() Disables the trim at the start and end of the values. Declaration IEnvLoader DisableTrimValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source EnableFileNotFoundException() Enables FileNotFoundException . This method tells the loader to throw an exception when one or more .env files are not found. Declaration IEnvLoader EnableFileNotFoundException() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source IgnoreParentDirectories() Ignores search in parent directories. This tells the loader not to search in parent directories when the .env file is not in a directory. Declaration IEnvLoader IgnoreParentDirectories() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Declaration IEnvLoader IgnoreParserException() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source Load() Loads one or more .env files. By default, it will search for a file called .env . Declaration IEnvironmentVariablesProvider Load() Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source Load(out EnvValidationResult) Loads one or more .env files. By default, it will search for a file called .env . Declaration IEnvironmentVariablesProvider Load(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the loader. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source LoadEnv() Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local, .env.local, .env.[environment], .env Declaration IEnvironmentVariablesProvider LoadEnv() Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source LoadEnv(out EnvValidationResult) Loads an .env file based on the environment (development, test, staging or production). This method will load these .env files in the following order: .env.[environment].local, .env.local, .env.[environment], .env Declaration IEnvironmentVariablesProvider LoadEnv(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the loader. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. FileNotFoundException If the .env files are not found. This exception is only thrown if the EnableFileNotFoundException() method is invoked. | Improve this Doc View Source SetBasePath(String) Sets the base path for the .env files. Declaration IEnvLoader SetBasePath(string basePath) Parameters Type Name Description String basePath The base path to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException basePath is null . | Improve this Doc View Source SetCommentChar(Char) Sets the character that will define the beginning of a comment. Declaration IEnvLoader SetCommentChar(char commentChar) Parameters Type Name Description Char commentChar The character that defines the beginning of a comment. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source SetDefaultEnvFileName(String) Sets the default name of an .env file. Declaration IEnvLoader SetDefaultEnvFileName(string envFileName) Parameters Type Name Description String envFileName The default name to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException envFileName is null . | Improve this Doc View Source SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. Declaration IEnvLoader SetDelimiterKeyValuePair(char separator) Parameters Type Name Description Char separator The character that separates the key-value pair. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source SetEncoding(String) Sets the encoding name of the .env files. Declaration IEnvLoader SetEncoding(string encodingName) Parameters Type Name Description String encodingName The name of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException encodingName is null . ArgumentException encodingName is not a valid code page name or is not supported by the underlying platform. | Improve this Doc View Source SetEncoding(Encoding) Sets the encoding of the .env files. Declaration IEnvLoader SetEncoding(Encoding encoding) Parameters Type Name Description Encoding encoding The type of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException encoding is null . | Improve this Doc View Source SetEnvironmentName(String) Sets the name of the environment. Declaration IEnvLoader SetEnvironmentName(string envName) Parameters Type Name Description String envName The name of the environment. Returns Type Description IEnvLoader An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException envName is null . ArgumentException envName is a Empty or consists only of white-space characters. | Improve this Doc View Source SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider. Declaration IEnvLoader SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The custom environment variables provider. Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.html": {
    "href": "api/DotEnv.Core.IEnvParser.html",
    "title": "Interface IEnvParser | DotEnv.Core",
    "keywords": "Interface IEnvParser Defines the methods that control the parser behavior. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvParser Methods | Improve this Doc View Source AllowConcatDuplicateKeys(ConcatKeysOptions) Allows concatenating the values of the duplicate keys. Declaration IEnvParser AllowConcatDuplicateKeys(ConcatKeysOptions option = ConcatKeysOptions.End) Parameters Type Name Description ConcatKeysOptions option The option indicates whether the concatenation is at the start or at the end of the value. Returns Type Description IEnvParser An instance implementing the fluent interface. Exceptions Type Condition ArgumentException option is not one of the ConcatKeysOptions values. | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting the existing variables of a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Declaration IEnvParser AllowOverwriteExistingVars() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source AvoidModifyEnvironment() Avoids modifying the environment of the current process. When this method is used, the environment variables are obtained from a Dictionary<TKey,TValue> and not from the current process. Declaration IEnvParser AvoidModifyEnvironment() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white spaces from the keys. Declaration IEnvParser DisableTrimEndKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white spaces from the values. Declaration IEnvParser DisableTrimEndValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimKeys() Disables the trim at the start and end of the keys. Declaration IEnvParser DisableTrimKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the start of the comments. This method will tell the parser not to remove leading white spaces from the comments. Declaration IEnvParser DisableTrimStartComments() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the start of the keys. This method will tell the parser not to remove leading white spaces from the keys. Declaration IEnvParser DisableTrimStartKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the start of the values. This method will tell the parser not to remove leading white spaces from the values. Declaration IEnvParser DisableTrimStartValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimValues() Disables the trim at the start and end of the values. Declaration IEnvParser DisableTrimValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source IgnoreParserException() Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors. Declaration IEnvParser IgnoreParserException() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source Parse(String) Start the parsing to extract the key-value pair from a data source. Declaration IEnvironmentVariablesProvider Parse(string dataSource) Parameters Type Name Description String dataSource The data source to parsing. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Exceptions Type Condition ArgumentNullException dataSource is null . ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. | Improve this Doc View Source Parse(String, out EnvValidationResult) Start the parsing to extract the key-value pair from a data source. Declaration IEnvironmentVariablesProvider Parse(string dataSource, out EnvValidationResult result) Parameters Type Name Description String dataSource The data source to parsing. EnvValidationResult result The result contains the errors found by the parser. Returns Type Description IEnvironmentVariablesProvider An instance representing the provider of environment variables. Exceptions Type Condition ArgumentNullException dataSource is null . ParserException If the parser encounters one or more errors. This exception is not thrown if the IgnoreParserException() method is invoked. | Improve this Doc View Source SetCommentChar(Char) Sets the character that will define the beginning of a comment. Declaration IEnvParser SetCommentChar(char commentChar) Parameters Type Name Description Char commentChar The character that defines the beginning of a comment. Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source SetDelimiterKeyValuePair(Char) Sets the delimiter that separates an assignment of a value to a key. Declaration IEnvParser SetDelimiterKeyValuePair(char separator) Parameters Type Name Description Char separator The character that separates the key-value pair. Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider) Sets the environment variables provider. When this method is used, the environment variables are obtained from the custom provider. Declaration IEnvParser SetEnvironmentVariablesProvider(IEnvironmentVariablesProvider provider) Parameters Type Name Description IEnvironmentVariablesProvider provider The custom environment variables provider. Returns Type Description IEnvParser An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvReader.html": {
    "href": "api/DotEnv.Core.IEnvReader.html",
    "title": "Interface IEnvReader | DotEnv.Core",
    "keywords": "Interface IEnvReader Defines the methods used to read the value of an environment variable. Inherited Members IEnumerable<KeyValuePair<String, String>>.GetEnumerator() IEnumerable.GetEnumerator() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvReader : IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties | Improve this Doc View Source Item[String] Gets the value of a variable in string format. Declaration string this[string variable] { get; } Parameters Type Name Description String variable The variable name of the value to get. Property Value Type Description String The value of the variable in string format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. Methods | Improve this Doc View Source EnvBool(String, Boolean) Gets the value of a variable in bool format. Declaration bool EnvBool(string variable, bool defaultValue = false) Parameters Type Name Description String variable Environment variable name. Boolean defaultValue A default value in case the variable is not set. Returns Type Description Boolean A value of the environment variable in bool format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in bool format. | Improve this Doc View Source EnvByte(String, Byte) Gets the value of a variable in byte format. Declaration byte EnvByte(string variable, byte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Byte defaultValue A default value in case the variable is not set. Returns Type Description Byte A value of the environment variable in byte format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in byte format. | Improve this Doc View Source EnvChar(String, Char) Gets the value of a variable in char format. Declaration char EnvChar(string variable, char defaultValue = '\\0') Parameters Type Name Description String variable Environment variable name. Char defaultValue A default value in case the variable is not set. Returns Type Description Char A value of the environment variable in char format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in char format. | Improve this Doc View Source EnvDecimal(String, Decimal) Gets the value of a variable in decimal format. Declaration decimal EnvDecimal(string variable, decimal defaultValue = 0M) Parameters Type Name Description String variable Environment variable name. Decimal defaultValue A default value in case the variable is not set. Returns Type Description Decimal A value of the environment variable in decimal format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in decimal format. | Improve this Doc View Source EnvDouble(String, Double) Gets the value of a variable in double format. Declaration double EnvDouble(string variable, double defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Double defaultValue A default value in case the variable is not set. Returns Type Description Double A value of the environment variable in double format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in double format. | Improve this Doc View Source EnvFloat(String, Single) Gets the value of a variable in float format. Declaration float EnvFloat(string variable, float defaultValue = 0F) Parameters Type Name Description String variable Environment variable name. Single defaultValue A default value in case the variable is not set. Returns Type Description Single A value of the environment variable in float format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in float format. | Improve this Doc View Source EnvInt(String, Int32) Gets the value of a variable in int format. Declaration int EnvInt(string variable, int defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int32 defaultValue A default value in case the variable is not set. Returns Type Description Int32 A value of the environment variable in int format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in int format. | Improve this Doc View Source EnvLong(String, Int64) Gets the value of a variable in long format. Declaration long EnvLong(string variable, long defaultValue = 0L) Parameters Type Name Description String variable Environment variable name. Int64 defaultValue A default value in case the variable is not set. Returns Type Description Int64 A value of the environment variable in long format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in long format. | Improve this Doc View Source EnvSByte(String, SByte) Gets the value of a variable in sbyte format. Declaration sbyte EnvSByte(string variable, sbyte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. SByte defaultValue A default value in case the variable is not set. Returns Type Description SByte A value of the environment variable in sbyte format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in sbyte format. | Improve this Doc View Source EnvShort(String, Int16) Gets the value of a variable in short format. Declaration short EnvShort(string variable, short defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int16 defaultValue A default value in case the variable is not set. Returns Type Description Int16 A value of the environment variable in short format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in short format. | Improve this Doc View Source EnvString(String, String) Gets the value of a variable in string format. Declaration string EnvString(string variable, string defaultValue = null) Parameters Type Name Description String variable Environment variable name. String defaultValue A default value in case the variable is not set. Returns Type Description String A value of the environment variable in string format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . | Improve this Doc View Source EnvUInt(String, UInt32) Gets the value of a variable in uint format. Declaration uint EnvUInt(string variable, uint defaultValue = 0U) Parameters Type Name Description String variable Environment variable name. UInt32 defaultValue A default value in case the variable is not set. Returns Type Description UInt32 A value of the environment variable in uint format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in uint format. | Improve this Doc View Source EnvULong(String, UInt64) Gets the value of a variable in ulong format. Declaration ulong EnvULong(string variable, ulong defaultValue = 0UL) Parameters Type Name Description String variable Environment variable name. UInt64 defaultValue A default value in case the variable is not set. Returns Type Description UInt64 A value of the environment variable in ulong format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ulong format. | Improve this Doc View Source EnvUShort(String, UInt16) Gets the value of a variable in ushort format. Declaration ushort EnvUShort(string variable, ushort defaultValue = 0) Parameters Type Name Description String variable Environment variable name. UInt16 defaultValue A default value in case the variable is not set. Returns Type Description UInt16 A value of the environment variable in ushort format. Remarks If the environment variable is not set, the method will return the default value. Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ushort format. | Improve this Doc View Source GetBoolValue(String) Gets the value of a variable in bool format. Declaration bool GetBoolValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Boolean A value of the variable in bool format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in bool format. | Improve this Doc View Source GetByteValue(String) Gets the value of a variable in byte format. Declaration byte GetByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Byte A value of the variable in byte format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in byte format. | Improve this Doc View Source GetCharValue(String) Gets the value of a variable in char format. Declaration char GetCharValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Char A value of the variable in char format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in char format. | Improve this Doc View Source GetDecimalValue(String) Gets the value of a variable in decimal format. Declaration decimal GetDecimalValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Decimal A value of the variable in decimal format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in decimal format. | Improve this Doc View Source GetDoubleValue(String) Gets the value of a variable in double format. Declaration double GetDoubleValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Double A value of the variable in double format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in double format. | Improve this Doc View Source GetFloatValue(String) Gets the value of a variable in float format. Declaration float GetFloatValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Single A value of the variable in float format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in float format. | Improve this Doc View Source GetIntValue(String) Gets the value of a variable in int format. Declaration int GetIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int32 A value of the variable in int format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in int format. | Improve this Doc View Source GetLongValue(String) Gets the value of a variable in long format. Declaration long GetLongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int64 A value of the variable in long format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in long format. | Improve this Doc View Source GetSByteValue(String) Gets the value of a variable in sbyte format. Declaration sbyte GetSByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description SByte A value of the variable in sbyte format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in sbyte format. | Improve this Doc View Source GetShortValue(String) Gets the value of a variable in short format. Declaration short GetShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int16 A value of the variable in short format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in short format. | Improve this Doc View Source GetStringValue(String) Gets the value of a variable in string format. Declaration string GetStringValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description String A value of the variable in string format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. | Improve this Doc View Source GetUIntValue(String) Gets the value of a variable in uint format. Declaration uint GetUIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt32 A value of the variable in uint format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in uint format. | Improve this Doc View Source GetULongValue(String) Gets the value of a variable in ulong format. Declaration ulong GetULongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt64 A value of the variable in ulong format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in ulong format. | Improve this Doc View Source GetUShortValue(String) Gets the value of a variable in ushort format. Declaration ushort GetUShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt16 A value of the variable in ushort format. Exceptions Type Condition ArgumentNullException variable is null . VariableNotSetException variable is not set. FormatException value is not in ushort format. | Improve this Doc View Source HasValue(String) Checks if the variable has a value. Declaration bool HasValue(string variable) Parameters Type Name Description String variable The variable to validate. Returns Type Description Boolean true if the variable has a value, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . | Improve this Doc View Source TryGetBoolValue(String, out Boolean) Try to retrieve the value of a variable in bool format. Declaration bool TryGetBoolValue(string variable, out bool value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Boolean value The bool value retrieved or false . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in bool format. | Improve this Doc View Source TryGetByteValue(String, out Byte) Try to retrieve the value of a variable in byte format. Declaration bool TryGetByteValue(string variable, out byte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Byte value The byte value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in byte format. | Improve this Doc View Source TryGetCharValue(String, out Char) Try to retrieve the value of a variable in char format. Declaration bool TryGetCharValue(string variable, out char value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Char value The char value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in char format. | Improve this Doc View Source TryGetDecimalValue(String, out Decimal) Try to retrieve the value of a variable in decimal format. Declaration bool TryGetDecimalValue(string variable, out decimal value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Decimal value The decimal value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in decimal format. | Improve this Doc View Source TryGetDoubleValue(String, out Double) Try to retrieve the value of a variable in double format. Declaration bool TryGetDoubleValue(string variable, out double value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Double value The double value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in double format. | Improve this Doc View Source TryGetFloatValue(String, out Single) Try to retrieve the value of a variable in float format. Declaration bool TryGetFloatValue(string variable, out float value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Single value The float value retrieved or 0.0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in float format. | Improve this Doc View Source TryGetIntValue(String, out Int32) Try to retrieve the value of a variable in int format. Declaration bool TryGetIntValue(string variable, out int value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int32 value The int value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in int format. | Improve this Doc View Source TryGetLongValue(String, out Int64) Try to retrieve the value of a variable in long format. Declaration bool TryGetLongValue(string variable, out long value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int64 value The long value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in long format. | Improve this Doc View Source TryGetSByteValue(String, out SByte) Try to retrieve the value of a variable in sbyte format. Declaration bool TryGetSByteValue(string variable, out sbyte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. SByte value The sbyte value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in sbyte format. | Improve this Doc View Source TryGetShortValue(String, out Int16) Try to retrieve the value of a variable in short format. Declaration bool TryGetShortValue(string variable, out short value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int16 value The short value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in short format. | Improve this Doc View Source TryGetStringValue(String, out String) Try to retrieve the value of a variable in string format. Declaration bool TryGetStringValue(string variable, out string value) Parameters Type Name Description String variable The variable name of the value to try retrieve. String value The string value retrieved or null . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . | Improve this Doc View Source TryGetUIntValue(String, out UInt32) Try to retrieve the value of a variable in uint format. Declaration bool TryGetUIntValue(string variable, out uint value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt32 value The uint value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in uint format. | Improve this Doc View Source TryGetULongValue(String, out UInt64) Try to retrieve the value of a variable in ulong format. Declaration bool TryGetULongValue(string variable, out ulong value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt64 value The ulong value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ulong format. | Improve this Doc View Source TryGetUShortValue(String, out UInt16) Try to retrieve the value of a variable in ushort format. Declaration bool TryGetUShortValue(string variable, out ushort value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt16 value The ushort value retrieved or 0 . Returns Type Description Boolean true if the variable is set, otherwise false . Exceptions Type Condition ArgumentNullException variable is null . FormatException value is not in ushort format."
  },
  "api/DotEnv.Core.IEnvValidator.html": {
    "href": "api/DotEnv.Core.IEnvValidator.html",
    "title": "Interface IEnvValidator | DotEnv.Core",
    "keywords": "Interface IEnvValidator Represents the validator of the required keys. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvValidator Methods | Improve this Doc View Source IgnoreException() Disables/ignores RequiredKeysNotPresentException . This method tells the validator not to throw an exception when it encounters one or more errors. Declaration IEnvValidator IgnoreException() Returns Type Description IEnvValidator An instance implementing the fluent interface. | Improve this Doc View Source SetRequiredKeys(String[]) Sets the required keys by means of a string collection. Declaration IEnvValidator SetRequiredKeys(params string[] keys) Parameters Type Name Description String [] keys The required keys to set. Returns Type Description IEnvValidator An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException keys is null . ArgumentException The length of the keys list is zero. | Improve this Doc View Source SetRequiredKeys(Type) Sets the required keys by means of the properties of a class or struct. Declaration IEnvValidator SetRequiredKeys(Type keysType) Parameters Type Name Description Type keysType The type with the required keys. Returns Type Description IEnvValidator An instance implementing the fluent interface. Exceptions Type Condition ArgumentNullException keysType is null . | Improve this Doc View Source SetRequiredKeys<TKeys>() Sets the required keys by means of the properties of a class or struct. Declaration IEnvValidator SetRequiredKeys<TKeys>() Returns Type Description IEnvValidator An instance implementing the fluent interface. Type Parameters Name Description TKeys The type with the required keys. | Improve this Doc View Source Validate() Validates whether the required keys are present in the application. Declaration void Validate() Exceptions Type Condition InvalidOperationException The required keys are not specified with the SetRequiredKeys method. RequiredKeysNotPresentException If the required keys are not present in the application. This exception is not thrown if the IgnoreException() method is invoked. | Improve this Doc View Source Validate(out EnvValidationResult) Validates whether the required keys are present in the application. Declaration void Validate(out EnvValidationResult result) Parameters Type Name Description EnvValidationResult result The result contains the errors found by the validator. Exceptions Type Condition InvalidOperationException The required keys are not specified with the SetRequiredKeys method. RequiredKeysNotPresentException If the required keys are not present in the application. This exception is not thrown if the IgnoreException() method is invoked."
  },
  "api/DotEnv.Core.ParserException.html": {
    "href": "api/DotEnv.Core.ParserException.html",
    "title": "Class ParserException | DotEnv.Core",
    "keywords": "Class ParserException The exception that is thrown when the parser encounters one or more errors. Inheritance Object Exception ParserException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class ParserException : Exception, ISerializable Constructors | Improve this Doc View Source ParserException() Initializes a new instance of the ParserException class. Declaration public ParserException() | Improve this Doc View Source ParserException(String) Initializes a new instance of the ParserException class with the a specified error message. Declaration public ParserException(string message) Parameters Type Name Description String message The message that describes the error. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/DotEnv.Core.RequiredKeysNotPresentException.html": {
    "href": "api/DotEnv.Core.RequiredKeysNotPresentException.html",
    "title": "Class RequiredKeysNotPresentException | DotEnv.Core",
    "keywords": "Class RequiredKeysNotPresentException The exception that is thrown when the required keys are not present in the application. Inheritance Object Exception RequiredKeysNotPresentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class RequiredKeysNotPresentException : Exception, ISerializable Constructors | Improve this Doc View Source RequiredKeysNotPresentException() Initializes a new instance of the RequiredKeysNotPresentException class. Declaration public RequiredKeysNotPresentException() | Improve this Doc View Source RequiredKeysNotPresentException(String) Initializes a new instance of the RequiredKeysNotPresentException class with the a specified error message. Declaration public RequiredKeysNotPresentException(string message) Parameters Type Name Description String message The message that describes the error. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/DotEnv.Core.VariableNotSetException.html": {
    "href": "api/DotEnv.Core.VariableNotSetException.html",
    "title": "Class VariableNotSetException | DotEnv.Core",
    "keywords": "Class VariableNotSetException The exception that is thrown when the environment variable is not set to a specific provider (e.g., current process or a Dictionary<TKey,TValue> ). Inheritance Object Exception SystemException ArgumentException VariableNotSetException Implements ISerializable Inherited Members ArgumentException.GetObjectData(SerializationInfo, StreamingContext) ArgumentException.Message ArgumentException.ParamName Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class VariableNotSetException : ArgumentException, ISerializable Constructors | Improve this Doc View Source VariableNotSetException() Initializes a new instance of the VariableNotSetException class. Declaration public VariableNotSetException() | Improve this Doc View Source VariableNotSetException(String) Initializes a new instance of the VariableNotSetException class with the a specified error message. Declaration public VariableNotSetException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source VariableNotSetException(String, String) Initializes a new instance of the VariableNotSetException class with the a specified error message, and the parameter name. Declaration public VariableNotSetException(string message, string paramName) Parameters Type Name Description String message The message that describes the error. String paramName The parameter name that caused the exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "articles/configuration_options.html": {
    "href": "articles/configuration_options.html",
    "title": "Configuration options | DotEnv.Core",
    "keywords": "Configuration options There are some options that are for the parser, but we can also use it through the EnvLoader class. DisableTrimStartKeys Disable the trim at the beginning of the keys: new EnvLoader() .DisableTrimStartKeys() .Load(); This method will tell the parser not to remove leading white-spaces from the keys. DisableTrimEndKeys Disable the trim at the end of the keys: new EnvLoader() .DisableTrimEndKeys() .Load(); This method will tell the parser not to remove trailing white-spaces from the keys. DisableTrimKeys Disables the trim at the start and end of the keys: new EnvLoader() .DisableTrimKeys() .Load(); This method will tell the parser not to remove leading and trailing white-spaces from the keys. DisableTrimStartValues Disable the trim at the beginning of the values: new EnvLoader() .DisableTrimStartValues() .Load(); This method will tell the parser not to remove leading white-spaces from the values. DisableTrimEndValues Disable the trim at the end of the values: new EnvLoader() .DisableTrimEndValues() .Load(); This method will tell the parser not to remove trailing white-spaces from the values. DisableTrimValues Disables the trim at the start and end of the values: new EnvLoader() .DisableTrimValues() .Load(); This method will tell the parser not to remove leading and trailing white-spaces from the values. DisableTrimStartComments Disable the trim at the beginning of the comments: new EnvLoader() .DisableTrimStartComments() .Load(); This method will tell the parser not to remove leading white-spaces from the comments. AllowOverwriteExistingVars Allows to overwrite the current value of an existing environment variable: new EnvLoader() .AllowOverwriteExistingVars() .Load(); Imagine that if there is an environment variable called KEY1 whose value is 1 , then in an .env file there can be a key named KEY1 whose value is 2 , if this option is enabled, then, when the parser reads KEY1 from the .env file, it will overwrite the value of KEY1 by 2 . AllowConcatDuplicateKeys Allows to concatenate the values of the duplicate keys: new EnvLoader() .AllowConcatDuplicateKeys() .Load(); This method will by default concatenate to the end of the value, for example, imagine you have the following .env file: KEY1 = Hello KEY1 = World KEY1 = ! The parser will concatenate the duplicate keys in this way: KEY1 = HelloWorld! But we can also tell the parser to concatenate at the beginning of the value using ConcatKeysOptions enum: new EnvLoader() .AllowConcatDuplicateKeys(ConcatKeysOptions.Start) .Load(); So if we follow the above example, the parser will concatenate the duplicate keys in this way: KEY1 = !WorldHello IgnoreParserException Disables/ignores ParserException . This method tells the parser not to throw an exception when it encounters one or more errors: new EnvLoader() .IgnoreParserException() .Load(); SetCommentChar Sets the character that will define the beginning of a comment: new EnvLoader() .SetCommentChar(';') .Load(); So the .env file could look like this: ; comment (1) KEY1=VAL1 ; comment (2) SetDelimiterKeyValuePair Sets the delimiter that separates an assigment of a value to a key: new EnvLoader() .SetDelimiterKeyValuePair(':') .Load(); So the .env file could look like this: KEY1: VAL1 KEY2: VAL2"
  },
  "articles/creating_environment_variables_provider.html": {
    "href": "articles/creating_environment_variables_provider.html",
    "title": "Creating environment variables provider | DotEnv.Core",
    "keywords": "Creating environment variables provider Introduction An environment variable provider is a class that provides services to other classes. What kind of service? Access to environment variables. The DotEnv library has two providers of environment variables: Environment of the current process. A dictionary of key/value pairs (this provider is used when using AvoidModifyEnvironment method). In fact, if you look at the source code of the library, you will notice that it has two classes that represent the provider: DefaultEnvironmentProvider and DictionaryProvider . The library exposes an interface to access the provider: IEnvironmentVariablesProvider . Example: var envVars = new EnvLoader().Load(); In the example, the Load method returns an instance that implements the IEnvironmentVariablesProvider interface, through this interface the environment variables of the provider can be accessed: string key1 = envVars[\"KEY1\"]; In this case the environment variables are obtained from the environment of the current process. Customized Provider Let's start creating our environment variables provider: class CustomProvider : IEnvironmentVariablesProvider { private Dictionary<string, string> _keyValuePairs = new Dictionary<string, string>(); public string this[string variable] { get => _keyValuePairs.ContainsKey(variable) ? _keyValuePairs[variable] : null; set => _keyValuePairs[variable] = value; } public IEnumerator<KeyValuePair<string, string>> GetEnumerator() => _keyValuePairs.GetEnumerator(); IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator(); } In this provider is where our environment variables will be stored. Then we will use the SetEnvironmentVariablesProvider method to configure our custom provider: var envVars = new EnvLoader() .SetEnvironmentVariablesProvider(new CustomProvider()) .Load(); string key1 = envVars[\"KEY1\"]; In this case the environment variables are obtained from the custom provider. Extension methods The IEnvironmentVariablesProvider interface has its own extension methods: CreateReader Creates an instance that implements the IEnvReader interface. Example: var envVars = new EnvLoader() .SetEnvironmentVariablesProvider(new CustomProvider()) .Load(); // Equivalent to: var reader = new EnvReader(envVars); IEnvReader reader = envVars.CreateReader(); string key1 = envVars[\"KEY1\"]; CreateValidator Creates an instance that implements the IEnvValidator interface. Example: var envVars = new EnvLoader() .SetEnvironmentVariablesProvider(new CustomProvider()) .Load(); // Equivalent to: var validator = new EnvValidator(envVars); IEnvValidator validator = envVars.CreateValidator(); ToDictionary Converts the provider instance to a dictionary. Example: var envVars = new EnvLoader().Load(); var dic = envVars.ToDictionary();"
  },
  "articles/dependency_injection.html": {
    "href": "articles/dependency_injection.html",
    "title": "Dependency Injection | DotEnv.Core",
    "keywords": "Dependency Injection Introduction Dependency injection is an object-oriented design pattern, in which objects are supplied to a class instead of the class itself creating those objects. The containing class is the one that supplies the object to our class. In some cases, classes should not directly create an instance of the EnvReader class, because if you change the implementation, you will have to make changes in the classes that depend on EnvReader . For example: class Foo { private EnvReader _reader; public Foo() { _reader = new EnvReader(); } } class Bar { private EnvReader _reader; public Bar() { _reader = new EnvReader(); } } The classes Foo and Bar create the instance in the constructor, this makes it difficult to reverse the dependency. In the future you could create a new class that inherits from EnvReader and this would cause changes in two classes: Foo and Bar : class CustomEnvReader : EnvReader { // Here we can override some methods. } class Foo { private EnvReader _reader; public Foo() { // change #1 _reader = new CustomEnvReader(); } } class Bar { private EnvReader _reader; public Bar() { // change #2 _reader = new CustomEnvReader(); } } So to avoid those changes in the future, you can make use of dependency injection pattern: class Foo { private EnvReader _reader; public Foo(EnvReader reader) { _reader = reader; } } class Bar { private EnvReader _reader; public Bar(EnvReader reader) { _reader = reader; } } You can also make use of the IEnvReader interface instead of the base EnvReader class: class Foo { private IEnvReader _reader; public Foo(IEnvReader reader) { _reader = reader; } } class Bar { private IEnvReader _reader; public Bar(IEnvReader reader) { _reader = reader; } } You probably don't want to inject the dependency manually, as in this example: class Program { static void Main(string[] args) { var foo = new Foo(new CustomEnvReader()); var bar = new Bar(new CustomEnvReader()); // more code... } } Container DI So in the end we would consider using a service container to handle dependency injection. Microsoft has created a package in NuGet specifically for this: Microsoft.Extensions.DependencyInjection . The above example could be done in this way using the container DI: // Import all types. using Microsoft.Extensions.DependencyInjection; using DotEnv.Core; class Program { static void Main(string[] args) { // Load the .env file. new EnvLoader().Load(); // Creates the service collection. var services = new ServiceCollection(); // Register services. services.AddSingleton<IEnvReader>(new EnvReader()) .AddTransient<Foo>() .AddTransient<Bar>(); // Creates the service container. using(var serviceProvider = services.BuildServiceProvider()) { // Retrieves an instance of the service and the container resolves the dependencies. var foo = serviceProvider.GetRequiredService<Foo>(); var bar = serviceProvider.GetRequiredService<Bar>(); } } } Another example // Import all types. using Microsoft.Extensions.DependencyInjection; using DotEnv.Core; class Program { static void Main(string[] args) { // Load the .env file. var envVars = new EnvLoader().Load(); // Creates the service collection. var services = new ServiceCollection(); // Register services. services.AddSingleton<IEnvReader>(envVars.CreateReader()) .AddSingleton<IEnvironmentVariablesProvider>(envVars); } }"
  },
  "articles/getting_started.html": {
    "href": "articles/getting_started.html",
    "title": "Getting Started with dotenv.core | DotEnv.Core",
    "keywords": "Getting Started with dotenv.core Installation If you're an hardcore and want to do it manually, you must add the following to the csproj file: <PackageReference Include=\"DotEnv.Core\" Version=\"2.0.0\" /> If you're want to install the package from Visual Studio, you must open the project/solution in Visual Studio, and open the console using the Tools > NuGet Package Manager > Package Manager Console command and run the install command: Install-Package DotEnv.Core If you are making use of the dotnet CLI, then run the following in your terminal: dotnet add package DotEnv.Core Usage Loading .env file You must import the namespace types at the beginning of your class file: using DotEnv.Core; Then you can load the .env file with the Load method of the EnvLoader class: new EnvLoader().Load(); By default, the Load method will search for a file called .env in the current directory and if it does not find it, it will search for it in the parent directories of the current directory. The current directory is where the executable with its dependencies is located. Remember that if no encoding is specified to the Load method, the default will be UTF-8 . Also, by default, the Load method does not overwrite the value of the environment variable. Accessing variables After you have loaded the .env file with the Load method, you can access the environment variables using the indexer of the EnvReader class: var reader = new EnvReader(); string key1 = reader[\"KEY1\"]; string key2 = reader[\"KEY2\"]; Or you can also access the environment variables using the static property Instance : string key1 = EnvReader.Instance[\"KEY1\"]; string key2 = EnvReader.Instance[\"KEY2\"]; Changing default name You can also change the default name of the .env file using the SetDefaultEnvFileName method: new EnvLoader() .SetDefaultEnvFileName(\".env.dev\") .Load(); Now the Load method will search for the .env.dev file in the current directory and in the parent directories if it is not found in the current directory. Another case would be: new EnvLoader() .SetDefaultEnvFileName(\".env.dev\") .AddEnvFiles(\"/foo/foo2\", \"/bar/bar2\") .Load(); The Load method will search for two .env.dev files in the paths /foo/foo2 and /bar/bar2 . Specifying path absolute You can also specify the absolute path to the .env file: new EnvLoader() .AddEnvFile(\"/home/MyProject/App/src/.env.dev\") .Load(); In this case the Load method will search for the .env.dev file in the path /home/MyProject/App/src/ , if it does not find it, the method will search for the .env.dev file in the parent directories. In other words, the Load method will search for the file in the parent directories of src such as: App , MyProject , home . It is recommended not to use absolute paths, instead use relative paths. Remember that an absolute path can be different in each operating system, so your application could lose portability. Loading multiple .env files You can also load multiple .env files in a single call: new EnvLoader() .AddEnvFiles(\"env.example\", \"env.example2\") .Load(); Or you can use the AddEnvFile method: new EnvLoader() .AddEnvFile(\"env.example\") .AddEnvFile(\"env.example2\") .Load(); If you need to specify an encoding type for all .env files, you can do it like this: new EnvLoader() .AddEnvFiles(\"env.example\", \"env.example2\") .SetEncoding(Encoding.Unicode) // Or you can also use: SetEncoding(\"Unicode\") .Load(); You can also specify an encoding type for each .env file using the AddEnvFile method: new EnvLoader() .AddEnvFile(\"env.example\", Encoding.Unicode) .AddEnvFile(\"env.example2\", Encoding.ASCII) .AddEnvFile(\"env.example3\", \"Unicode\") .AddEnvFile(\"env.example4\", \"ASCII\") .Load(); Optional .env files You can indicate that the existence of an .env file is optional by means of the AddEnvFile method: new EnvLoader() .AddEnvFile(\".env.example\", optional: true) .Load(); At the end the Load method will not generate any error in case the .env.example file is not in a directory, since it is optional. You can also mark all .env files as optional using the AllowAllEnvFilesOptional method: new EnvLoader() .AddEnvFile(\".env.example1\") .AddEnvFile(\".env.example2\") .AddEnvFile(\".env.example3\") .AllowAllEnvFilesOptional() .Load(); Specifying path relative You can also specify a relative path using the AddEnvFile method: new EnvLoader() .AddEnvFile(\"./dotenv/files\") .Load(); In this case, the .env file is inside a directory, i.e. in files . The Load method will search for the file dotenv/files/.env in the current directory, if it does not find it, it will search for it in parent directories. This is useful when the .env file is located in a different directory than the current one. Specifying base path You can specify one base path for all .env files: new EnvLoader() .SetBasePath(\"./dotenv/files\") .AddEnvFiles(\".env.example\", \".env.example2\") .Load(); In this case, the Base Path is a relative path, so the .env.example and .env.example2 files are inside dotenv/files . Error handling By default, the Load method does not throw any exception if it does not found the .env file but you can change this behavior if you use the EnableFileNotFoundException method: try { new EnvLoader() .EnableFileNotFoundException() .Load(); } catch(FileNotFoundException ex) { System.Console.WriteLine(ex.Message); } You can handle the error without throwing an exception by means of the EnvValidationResult class: new EnvLoader() .IgnoreParserException() // To ignore the exception thrown by the parser. .Load(out EnvValidationResult result); if(result.HasError()) { string msg = result.ErrorMessages; System.Console.WriteLine(msg); // or you can also iterate over the errors: foreach(string errorMsg in result) System.Console.WriteLine(errorMsg); } else { // Execute some action when there is no error. } Note: If you don't know what each class does, don't forget to check the API documentation ."
  },
  "articles/load_envfile_based_environment.html": {
    "href": "articles/load_envfile_based_environment.html",
    "title": "Load .env file based on environment | DotEnv.Core",
    "keywords": "Load .env file based on environment Introduction You can load an .env file based on the environment (dev, test, staging or production) with the LoadEnv method. The environment is defined by the actual environment variable as DOTNET_ENV : System.Environment.SetEnvironmentVariable(\"DOTNET_ENV\", \"test\"); new EnvLoader().LoadEnv(); The LoadEnv method will search for these .env files in the following order: .env.[environment].local (has the highest priority) .env.local .env.[environment] .env (has the lowest priority) The environment is specified by the actual environment variable DOTNET_ENV . It should be noted that the default environment will be development or dev if the environment is never specified with DOTNET_ENV . Concepts .env : defines the default values for all environments and machines. .env.local : defines the configuration values for all environments but only on the machine which contains the file. This file should not be committed to the repository. .env.[environment] (e.g. .env.test ): defines the default values for one environment, but for all machines (these files are committed). .env.[environment].local (e.g. .env.test.local ): defines configuration values that are machine-specific but only for one environment. Real environment variables always win over env vars created by any of the .env files. The .env and .env.[environment] files should be committed to the repository because they are the same for all developers and machines. However, the env files ending in .local ( .env.local and .env.[environment].local ) should not be committed because only you will use them. Functioning The behavior of the LoadEnv method is simple. Imagine that you open the shell in Linux and type the following command: export DOTNET_ENV=production; Then we run the application and the following code is executed: new EnvLoader().LoadEnv(); The LoadEnv method loads the following .env files: .env.production.local .env.local .env.production .env In this example, at least file .env.production.local or .env.local must be present, otherwise the LoadEnv method generates an error. There must be at least one local file. Configuration option The SetEnvironmentName method can be used to set the environment name from source code: new EnvLoader() .SetEnvironmentName(\"test\") .LoadEnv(); If the actual environment variable DOTNET_ENV is set, the SetEnvironmentName method will have no effect, because the LoadEnv method will give higher priority to the value of DOTNET_ENV . Error handling You can handle the error without throwing an exception by means of the EnvValidationResult class: new EnvLoader() .IgnoreParserException() // To ignore the exception thrown by the parser. .LoadEnv(out EnvValidationResult result); if(result.HasError()) { string msg = result.ErrorMessages; System.Console.WriteLine(msg); } else { // Execute some action when there is no error. } Helper methods The Env class has helper methods to check if the current environment is development, test, staging, or production. The current environment is defined by the actual environment variable DOTNET_ENV . Example: // Equivalent to: Env.CurrentEnvironment = \"test\"; System.Environment.SetEnvironmentVariable(\"DOTNET_ENV\", \"test\"); System.Console.WriteLine(Env.IsDevelopment()); // output: false System.Console.WriteLine(Env.IsTest()); // output: true System.Console.WriteLine(Env.IsStaging()); // output: false System.Console.WriteLine(Env.IsProduction()); // output: false System.Console.WriteLine(Env.IsEnvironment(\"test\")); // output: true"
  },
  "articles/load_envfile_without_altering_environment.html": {
    "href": "articles/load_envfile_without_altering_environment.html",
    "title": "Load .env file without altering the environment | DotEnv.Core",
    "keywords": "Load .env file without altering the environment The AvoidModifyEnvironment method tells the loader not to modify the environment: var envVars = new EnvLoader() .AvoidModifyEnvironment() .Load(); string key1 = envVars[\"KEY1\"]; string key2 = envVars[\"KEY2\"]; This way the .env file is loaded without touching the environment. The Load method will return an instance that implements the IEnvironmentVariablesProvider interface and through this instance we can access the environment variables. In fact, the environment variables are obtained from a dictionary, instead of the current process. You can also iterate over the retrieved elements: foreach(string(variable, value) in envVars) System.Console.WriteLine($\"{variable}, {value}\"); You can also convert the provider instance to a dictionary<string, string> : var dict = envVars.ToDictionary();"
  },
  "articles/required_keys.html": {
    "href": "articles/required_keys.html",
    "title": "Required Keys | DotEnv.Core",
    "keywords": "Required Keys Introduction If a required key is not present in the application, an error should be generated. To require configuration keys: new EnvLoader().Load(); new EnvValidator() .SetRequiredKeys(\"SERVICE_APP_ID\", \"SERVICE_KEY\", \"SERVICE_SECRET\") .Validate(); In the above example we first load the .env file and set the variables, then we call the Validate method to validate if the required keys exist in the current environment, otherwise an exception is thrown. In other words, after calling the Load method, it will check if the keys SERVICE_APP_ID , SERVICE_KEY , SERVICE_SECRET exist in the environment of the current process. Other configuration options IgnoreException With this method you can ignore the exception thrown by the Validate method: new EnvLoader().Load(); new EnvValidator() .IgnoreException() .SetRequiredKeys(\"SERVICE_APP_ID\", \"SERVICE_KEY\", \"SERVICE_SECRET\") .Validate(); SetRequiredKeys With this method we can specify the required keys to be validated. This method has several overloads and one of them is to be able to specify the required keys by means of a class with properties: class RequiredKeys { public string SERVICE_APP_ID { get; } public string SERVICE_KEY { get; } public string SERVICE_SECRET { get; } } new EnvLoader().Load(); new EnvValidator() .SetRequiredKeys<RequiredKeys>() .Validate(); You can also pass an instance of type System.Type : new EnvValidator() .SetRequiredKeys(typeof(RequiredKeys)) .Validate(); Error handling You can handle the error through the EnvValidationResult class instead of throwing an exception: new EnvLoader().Load(); new EnvValidator() .IgnoreException() // To ignore the exception thrown by the validator. .SetRequiredKeys<RequiredKeys>() .Validate(out EnvValidationResult result); if(result.HasError()) { string msg = result.ErrorMessages; System.Console.WriteLine(msg); } else { // Execute some action when there is no error. } Injecting a Provider The EnvValidator class is flexible and adapts to any provider, i.e., you can use this class to validate whether the required keys are set in the current process environment or in a dictionary or custom provider. Example: var envVars = new EnvLoader() .AvoidModifyEnvironment() .Load(); new EnvValidator(provider: envVars) .SetRequiredKeys<RequiredKeys>() .Validate(); In the above example, the Load method does not modify the environment, so the environment variables are obtained from a dictionary. The instance of type IEnvironmentVariablesProvider returned by Load method is injected into the constructor of the EnvValidator class, so the Validate method would be checking if the required keys are present in the dictionary, instead of the current environment."
  },
  "articles/using_dotenv_aspnetcore.html": {
    "href": "articles/using_dotenv_aspnetcore.html",
    "title": "Using DotEnv in ASP.NET Core | DotEnv.Core",
    "keywords": "Using DotEnv in ASP.NET Core Use the dotenv.core library in ASP. NET Core is very easy, the only thing you have to do, is to open the Startup.cs file and then add the following code in the ConfigureServices method: public void ConfigureServices(IServiceCollection services) { // To load the .env file. new EnvLoader().Load(); // To register the IEnvReader service. services.AddSingleton<IEnvReader>(new EnvReader()); // more services... } It is useful to register the IEnvReader service when other classes use the IEnvReader interface, however, it is optional. Of course, you can also load the .env file in the main method: public static void Main(string[] args) { // To load the .env file. new EnvLoader().Load(); CreateHostBuilder(args).Build().Run(); } public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); }); Maybe you are using .NET 6, so you won't find a Startup.cs file or main method. Simply load the .env file into the Program.cs file. For example: // In Program.cs var builder = WebApplication.CreateBuilder(args); // To load the .env file. new EnvLoader().Load(); // Add services to the container. builder.services.AddSingleton<IEnvReader>(new EnvReader()); var app = builder.Build(); // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler(\"/Error\"); } app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.MapRazorPages(); app.Run();"
  },
  "articles/using_envreader.html": {
    "href": "articles/using_envreader.html",
    "title": "Accessing environment variables | DotEnv.Core",
    "keywords": "Accessing environment variables Helper methods Get{Type}Value The EnvReader class has multiple helper methods, so methods starting with the word Get will throw an exception when the environment variable is not set: GetStringValue GetIntValue GetLongValue GetFloatValue //and so on... For example: var reader = new EnvReader(); try { string key = reader[\"KEY\"]; string key1 = reader.GetStringValue(\"KEY1\"); int key2 = reader.GetIntValue(\"KEY2\"); long key3 = reader.GetLongValue(\"KEY3\"); float key4 = reader.GetFloatValue(\"KEY4\"); } catch(VariableNotSetException ex) { System.Console.WriteLine(ex.Message); } Don't forget to consult the API documentation for more helper methods starting with the word Get . TryGet{Type}Value The helper methods that begin with the word Try do not throw an exception, but return a false value when the environment variable is not set: TryGetStringValue TryGetIntValue TryGetLongValue TryGetFloatValue //and so on... For example: var reader = new EnvReader(); if(reader.TryGetStringValue(\"KEY1\", out string value1)) { System.Console.WriteLine(value1); } else { System.Console.WriteLine(\"Variable not found!\"); } if(reader.TryGetIntValue(\"KEY2\", out int value2)) { System.Console.WriteLine(value2); } else { System.Console.WriteLine(\"Variable not found!\"); } Don't forget to consult the API documentation for more helper methods starting with the word Try . Env{Type} The helper methods starting with the word Env return a default value when the environment variable is not set: EnvString EnvInt EnvLong EnvFloat //and so on... For example: var reader = new EnvReader(); string key1 = reader.EnvString(\"KEY1\", \"Variable Not Found!\"); int key2 = reader.EnvInt(\"KEY2\", -1); long key3 = reader.EnvLong(\"KEY3\", -1); float key4 = reader.EnvFloat(\"KEY4\", -1.0F); Then, if for example, the variable KEY1 is not set, then the method returns Variable Not Found! (default value). The second parameter is optional: var reader = new EnvReader(); string key1 = reader.EnvString(\"KEY1\"); // default value: null int key2 = reader.EnvInt(\"KEY2\"); // default value: 0 long key3 = reader.EnvLong(\"KEY3\"); // default value: 0 float key4 = reader.EnvFloat(\"KEY4\"); // default value: 0.0 Here for example, if KEY1 is not set, the method returns null (default value). Don't forget to consult the API documentation for more helper methods starting with the word Env . HasValue You can use this method to check if an environment variable has a value: var reader = new EnvReader(); Console.WriteLine(reader.HasValue(\"VARIABLE_NAME\")); Console.WriteLine(EnvReader.Instance.HasValue(\"VARIABLE_NAME\")); In fact, if you look at the source code of this method, what it actually does is to check if the variable is in a specific provider (it could be the environment of the current process or a simple dictionary). Customize EnvReader You can also create a class that inherits from the EnvReader class and can add new methods or override existing methods: class CustomEnvReader : EnvReader { public CustomEnvReader() { } public CustomEnvReader(IEnvironmentVariablesProvider provider) : base(provider) { } public override string GetStringValue(string variable) { // Here you can write your own implementation. } public override bool TryGetStringValue(string variable, out string value) { // Here you can write your own implementation. } public override string EnvString(string variable, string defaultValue = default) { // Here you can write your own implementation. } //and so on... } Iterate You can also access all environment variables using the iterator: var reader = new EnvReader(); foreach(string(key, value) in reader) System.Console.WriteLine($\"{key}, {value}\"); Injecting a Provider The EnvReader class has no relationship to the environment variables provider. So you can use the methods of this class to access environment variables, regardless of whether the variables are in the environment of the current process or in a dictionary<string, string> . Example: var envVars = new EnvLoader() .AvoidModifyEnvironment() .Load(); var reader = new EnvReader(provider: envVars); string key1 = reader[\"KEY1\"]; // we access from a dictionary instead of the current environment. In the previous example we load the .env file without altering the environment, so the environment variables are in a dictionary. Later, we inject the instance of type IEnvironmentVariablesProvider that returns the Load method in the constructor of the EnvReader class, this way we can access the environment variables from a dictionary."
  },
  "articles/using_parser.html": {
    "href": "articles/using_parser.html",
    "title": "Parsing | DotEnv.Core",
    "keywords": "Parsing Introduction You can also use the parser directly, as in this example: string dataSource = @\" KEY1=VAL1 KEY2=VAL2 KEY3=VAL3 \"; new EnvParser().Parse(dataSource); System.Console.WriteLine(EnvReader.Instance[\"KEY1\"]); // Print \"VAL1\". System.Console.WriteLine(EnvReader.Instance[\"KEY2\"]); // Print \"VAL2\". System.Console.WriteLine(EnvReader.Instance[\"KEY3\"]); // Print \"VAL3\". By default, the Parse method does not overwrite the value of the environment variable. For example: System.Environment.SetEnvironmentVariable(\"KEY1\", \"1\"); new EnvParser().Parse(\"KEY1=VAL1\"); System.Console.WriteLine(EnvReader.Instance[\"KEY1\"]); // Print \"1\". In this case, the parser does not overwrite the variable KEY1 , so its current value is maintained. You can also retrieve keys from any data source and pass it to the parser: string dataSource = System.IO.File.ReadAllText(\"./.env\"); new EnvParser().Parse(dataSource); Configuring parser behavior There are configuration options that allow you to change the behavior of the parser, one of them are: string dataSource = System.IO.File.ReadAllText(\"./.env\"); new EnvParser() .DisableTrimStartKeys() .DisableTrimEndKeys() .DisableTrimStartValues() .DisableTrimEndValues() .DisableTrimStartComments() .AllowOverwriteExistingVars() .Parse(dataSource); Don't forget to look up in the API documentation what each configuration option means. Error handling We can handle errors with the EnvValidationResult class instead of throwing an exception: string dataSource = System.IO.File.ReadAllText(\"./.env\"); new EnvParser() .IgnoreParserException() // To ignore the exception thrown by the parser. .Parse(dataSource, out EnvValidationResult result); if(result.HasError()) { System.Console.WriteLine(result.ErrorMessages); } else { // Execute some action when there is no error. } Avoid modifying the environment You can tell the parser not to modify the environment: string dataSource = System.IO.File.ReadAllText(\"./.env\"); var envVars = new EnvParser() .AvoidModifyEnvironment() .Parse(dataSource); As the environment cannot be modified, the Parse method will return an instance that implements the IEnvironmentVariablesProvider interface, through this returned instance, we can access the environment variables that have been set in a dictionary: // The value of the variable is obtained from a dictionary and not from the current environment: string key1 = envVars[\"KEY1\"];"
  },
  "diagrams/class_diagram.html": {
    "href": "diagrams/class_diagram.html",
    "title": "Class Diagram | DotEnv.Core",
    "keywords": "Class Diagram Click here"
  },
  "diagrams/package_diagram.html": {
    "href": "diagrams/package_diagram.html",
    "title": "Package Diagram | DotEnv.Core",
    "keywords": "Package Diagram Library Project Test Project Click here"
  },
  "index.html": {
    "href": "index.html",
    "title": "Features | DotEnv.Core",
    "keywords": "dotenv.core is a class library for read and parsing .env files in .NET Core and also provides a mechanism to retrieve the value of an environment variable in a simple and easy way. Features It has a fluent interface , which makes it simple and easy to use. Support for load multiple .env files. Support to load the .env file depending on the environment (development, test, staging, or production). Searches in parent directories when it does not find the .env file in the current directory. You can set the base path for a set of .env files. You can define which keys should be required by the application. You can change the default .env file name, so it does not necessarily have to be .env . Support for the variables interpolation. And much more. Basic Concepts What is a .env file? A .env file or dotenv file is a simple text configuration file for controlling your Applications environment constants. What do .env files look like? .env files are line delimitated text files, meaning that each new line represents a single variable. By convention .env variable names are uppercase words separated by underscores. Variable names are followed directly by an = which, in turn is followed directly by the value, for example: VARIABLE_NAME=value What is environment variable? An environment variable is a dynamic variable that can affect the behavior of running processes on a computer. They are part of the environment in which a process runs. File Format Empty lines or lines with white-spaces will be ignored. The key-value format must be as follows: KEY=VAL . There is no special handling of quotation marks. This means that they are part of the VAL. If the value of a key is an empty string, it will be converted to a white-space. White-spaces at both ends of the key and value are ignored. Comments Each line beginning with the # character is a comment. White-spaces at the beginning of each comment will be ignored. Example: # comment without white spaces # comment with white spaces KEY=VALUE Interpolating variables Sometimes you will need to interpolate variables within a value, for example: MYSQL_USER=root MYSQL_ROOT_PASSWORD=1234 CONNECTION_STRING=username=${MYSQL_USER};password=${MYSQL_ROOT_PASSWORD};database=testdb; If the variable embedded in the value is not set, the parser will throw an exception, for example: MYSQL_ROOT_PASSWORD=1234 CONNECTION_STRING=username=${MYSQL_USER};password=${MYSQL_ROOT_PASSWORD};database=testdb; MYSQL_USER=root In the above example, the parser should throw an exception because the MYSQL_USER variable is not set. Frequently Answered Questions Can I use an .env file in a production environment? Generally, you should not add sensitive data (such as passwords) to a .env file, as it would be unencrypted! Instead, you could use a secrets manager such as Azure Key Vault or AWS Secrets Manager . If you are going to use .env files in production, make sure you have good security at the infrastructure level and also grant read/write permissions to a specific user (such as admin), so that not just anyone can access your .env file. Should I commit my .env file? Credentials should only be accessible on the machines that need access to them. Never commit sensitive information to a repository that is not needed by every development machine. Why is it not overriding existing environment variables? By default, it won't overwrite existing environment variables as dotenv assumes the deployment environment has more knowledge about configuration than the application does. Contribution Follow the steps below: Fork it Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit -am 'Added some feature') Push to the branch (git push origin my-new-feature) Create new Pull Request"
  }
}