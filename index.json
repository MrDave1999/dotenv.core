{
  "api/DotEnv.Core.EnvLoader.html": {
    "href": "api/DotEnv.Core.EnvLoader.html",
    "title": "Class EnvLoader | DotEnv.Core",
    "keywords": "Class EnvLoader Represents the .env file loader. Inheritance Object EnvLoader Implements IEnvLoader Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvLoader : IEnvLoader Constructors | Improve this Doc View Source EnvLoader() Initializes a new instance of the EnvLoader class. Declaration public EnvLoader() | Improve this Doc View Source EnvLoader(IEnvParser) Initializes a new instance of the EnvLoader class with a parser. Declaration public EnvLoader(IEnvParser parser) Parameters Type Name Description IEnvParser parser The parser instance. Methods | Improve this Doc View Source AddEnvFile(String) Adds an .env file in a collection. Declaration public IEnvLoader AddEnvFile(string path) Parameters Type Name Description String path The .env file path to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AddEnvFile(String, Encoding) Adds an .env file with its encoding in a collection. Declaration public IEnvLoader AddEnvFile(string path, Encoding encoding) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AddEnvFiles(String[]) Adds the .env files in a collection. Declaration public IEnvLoader AddEnvFiles(params string[] paths) Parameters Type Name Description String [] paths The .env files paths to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting of existing environment variables. This method will tell the parser that it can overwrite the value of an existing variable, i.e. if the variable KEY1 exists, its value can be overwritten. Declaration public IEnvLoader AllowOverwriteExistingVars() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white-spaces from the keys. Declaration public IEnvLoader DisableTrimEndKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white-spaces from the values. Declaration public IEnvLoader DisableTrimEndValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the starts of the comments. This method will tell the parser not to remove leading white-spaces from the comments. Declaration public IEnvLoader DisableTrimStartComments() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the starts of the keys. This method will tell the parser not to remove leading white-spaces from the keys. Declaration public IEnvLoader DisableTrimStartKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the starts of the values. This method will tell the parser not to remove leading white-spaces from the values. Declaration public IEnvLoader DisableTrimStartValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source EnableFileNotFoundException() Enables FileNotFoundException when the .env file is not found. Declaration public IEnvLoader EnableFileNotFoundException() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source Load() Loads more than one .env file. Declaration public void Load() Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException | Improve this Doc View Source SetBasePath(String) Sets the base path for the .env files. Declaration public IEnvLoader SetBasePath(string basePath) Parameters Type Name Description String basePath The base path to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source SetDefaultEnvFileName(String) Sets the default name of an .env file. Declaration public IEnvLoader SetDefaultEnvFileName(string envFileName) Parameters Type Name Description String envFileName The default name to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source SetEncoding(Encoding) Sets the encoding of the .env files. Declaration public IEnvLoader SetEncoding(Encoding encoding) Parameters Type Name Description Encoding encoding The type of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. Implements IEnvLoader"
  },
  "api/DotEnv.Core.EnvParser.html": {
    "href": "api/DotEnv.Core.EnvParser.html",
    "title": "Class EnvParser | DotEnv.Core",
    "keywords": "Class EnvParser Defines the methods that control the parser behavior. Inheritance Object EnvParser Implements IEnvParser Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvParser : IEnvParser Fields | Improve this Doc View Source _configuration Declaration protected readonly EnvParserOptions _configuration Field Value Type Description EnvParserOptions Methods | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting of existing environment variables. This method will tell the parser that it can overwrite the value of an existing variable, i.e. if the variable KEY1 exists, its value can be overwritten. Declaration public IEnvParser AllowOverwriteExistingVars() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white-spaces from the keys. Declaration public IEnvParser DisableTrimEndKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white-spaces from the values. Declaration public IEnvParser DisableTrimEndValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the starts of the comments. This method will tell the parser not to remove leading white-spaces from the comments. Declaration public IEnvParser DisableTrimStartComments() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the starts of the keys. This method will tell the parser not to remove leading white-spaces from the keys. Declaration public IEnvParser DisableTrimStartKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the starts of the values. This method will tell the parser not to remove leading white-spaces from the values. Declaration public IEnvParser DisableTrimStartValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source ExtractKey(String) Extracts the key from the line. Declaration protected virtual string ExtractKey(string line) Parameters Type Name Description String line The line with the key-value pair. Returns Type Description String The key extracted. | Improve this Doc View Source ExtractValue(String) Extracts the value from the line. Declaration protected virtual string ExtractValue(string line) Parameters Type Name Description String line The line with the key-value pair. Returns Type Description String The value extracted. | Improve this Doc View Source HasNoKeyValuePair(String) Checks if the line has no a key-value pair. Declaration protected virtual bool HasNoKeyValuePair(string line) Parameters Type Name Description String line The line to test. Returns Type Description Boolean true if the line has no the key-value format, otherwise false . | Improve this Doc View Source IsComment(String) Checks if the line is a comment. Declaration protected virtual bool IsComment(string line) Parameters Type Name Description String line The line to test. Returns Type Description Boolean true if the line is a comment, otherwise false . | Improve this Doc View Source Parse(String) Start the parsing to extract the key-value pair from the .env file. Declaration public void Parse(string input) Parameters Type Name Description String input The input to parsing. Exceptions Type Condition ParserException If the parser find an error during the parsing. | Improve this Doc View Source SetEnvironmentVariable(String, String) Create or update an environment variable. Declaration protected virtual void SetEnvironmentVariable(string key, string value) Parameters Type Name Description String key The key of the value to set. String value The value to set. Remarks The environment variable will only be updated if property OverwriteExistingVars is set to true . Implements IEnvParser"
  },
  "api/DotEnv.Core.EnvParserOptions.html": {
    "href": "api/DotEnv.Core.EnvParserOptions.html",
    "title": "Class EnvParserOptions | DotEnv.Core",
    "keywords": "Class EnvParserOptions Represents the options for configuring various behaviors of the parser. Inheritance Object EnvParserOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvParserOptions Properties | Improve this Doc View Source OverwriteExistingVars A value indicating whether to overwrite the value of an existing environment variable. Its default value is false . Declaration public bool OverwriteExistingVars { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TrimEndKeys A value indicating whether to remove trailing white-spaces from keys. Its default value is true . Declaration public bool TrimEndKeys { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TrimEndValues A value indicating whether to remove trailing white-spaces from values. Its default value is true . Declaration public bool TrimEndValues { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TrimStartComments A value indicating whether to remove leading white-spaces from comments. Its default value is true . Declaration public bool TrimStartComments { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TrimStartKeys A value indicating whether to remove leading white-spaces from keys. Its default value is true . Declaration public bool TrimStartKeys { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TrimStartValues A value indicating whether to remove leading white-spaces from values. Its default value is true . Declaration public bool TrimStartValues { get; set; } Property Value Type Description Boolean"
  },
  "api/DotEnv.Core.EnvReader.html": {
    "href": "api/DotEnv.Core.EnvReader.html",
    "title": "Class EnvReader | DotEnv.Core",
    "keywords": "Class EnvReader Defines the methods used to read the value of an environment variable from the current process. Inheritance Object EnvReader Implements IEnvReader IEnumerable < KeyValuePair < String , String >> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvReader : IEnvReader, IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties | Improve this Doc View Source Instance Gets an instance of type EnvReader . Declaration public static EnvReader Instance { get; } Property Value Type Description EnvReader Remarks This method is thread-safe. | Improve this Doc View Source Item[String] Gets the value of an environment variable in string format. Declaration public virtual string this[string variable] { get; } Parameters Type Name Description String variable The variable name of the value to get. Property Value Type Description String The value of the variable in string format. Exceptions Type Condition EnvVariableNotFoundException variable is not found in the current process. Methods | Improve this Doc View Source EnvBool(String, Boolean) Gets the value of an environment variable in bool format. Declaration public virtual bool EnvBool(string variable, bool defaultValue = false) Parameters Type Name Description String variable Environment variable name. Boolean defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Boolean A value of the environment variable in bool format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in bool format. | Improve this Doc View Source EnvByte(String, Byte) Gets the value of an environment variable in byte format. Declaration public virtual byte EnvByte(string variable, byte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Byte defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Byte A value of the environment variable in byte format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in byte format. | Improve this Doc View Source EnvChar(String, Char) Gets the value of an environment variable in char format. Declaration public virtual char EnvChar(string variable, char defaultValue = '\\0') Parameters Type Name Description String variable Environment variable name. Char defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Char A value of the environment variable in char format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in char format. | Improve this Doc View Source EnvDecimal(String, Decimal) Gets the value of an environment variable in decimal format. Declaration public virtual decimal EnvDecimal(string variable, decimal defaultValue = 0M) Parameters Type Name Description String variable Environment variable name. Decimal defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Decimal A value of the environment variable in decimal format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in decimal format. | Improve this Doc View Source EnvDouble(String, Double) Gets the value of an environment variable in double format. Declaration public virtual double EnvDouble(string variable, double defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Double defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Double A value of the environment variable in double format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in double format. | Improve this Doc View Source EnvFloat(String, Single) Gets the value of an environment variable in float format. Declaration public virtual float EnvFloat(string variable, float defaultValue = 0F) Parameters Type Name Description String variable Environment variable name. Single defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Single A value of the environment variable in float format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in float format. | Improve this Doc View Source EnvInt(String, Int32) Gets the value of an environment variable in int format. Declaration public virtual int EnvInt(string variable, int defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int32 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Int32 A value of the environment variable in int format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in int format. | Improve this Doc View Source EnvLong(String, Int64) Gets the value of an environment variable in long format. Declaration public virtual long EnvLong(string variable, long defaultValue = 0L) Parameters Type Name Description String variable Environment variable name. Int64 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Int64 A value of the environment variable in long format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in long format. | Improve this Doc View Source EnvSByte(String, SByte) Gets the value of an environment variable in sbyte format. Declaration public virtual sbyte EnvSByte(string variable, sbyte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. SByte defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description SByte A value of the environment variable in sbyte format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in sbyte format. | Improve this Doc View Source EnvShort(String, Int16) Gets the value of an environment variable in short format. Declaration public virtual short EnvShort(string variable, short defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int16 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Int16 A value of the environment variable in short format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in short format. | Improve this Doc View Source EnvString(String, String) Gets the value of an environment variable in string format. Declaration public virtual string EnvString(string variable, string defaultValue = null) Parameters Type Name Description String variable Environment variable name. String defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description String A value of the environment variable in string format. Remarks If the environment variable does not exist in the current process, the method will return the default value. | Improve this Doc View Source EnvUInt(String, UInt32) Gets the value of an environment variable in uint format. Declaration public virtual uint EnvUInt(string variable, uint defaultValue = 0U) Parameters Type Name Description String variable Environment variable name. UInt32 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description UInt32 A value of the environment variable in uint format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in uint format. | Improve this Doc View Source EnvULong(String, UInt64) Gets the value of an environment variable in ulong format. Declaration public virtual ulong EnvULong(string variable, ulong defaultValue = 0UL) Parameters Type Name Description String variable Environment variable name. UInt64 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description UInt64 A value of the environment variable in ulong format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in ulong format. | Improve this Doc View Source EnvUShort(String, UInt16) Gets the value of an environment variable in ushort format. Declaration public virtual ushort EnvUShort(string variable, ushort defaultValue = 0) Parameters Type Name Description String variable Environment variable name. UInt16 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description UInt16 A value of the environment variable in ushort format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in ushort format. | Improve this Doc View Source GetBoolValue(String) Gets the value of an environment variable in bool format. Declaration public virtual bool GetBoolValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Boolean A value of the variable in bool format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in bool format. | Improve this Doc View Source GetByteValue(String) Gets the value of an environment variable in byte format. Declaration public virtual byte GetByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Byte A value of the variable in byte format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in byte format. | Improve this Doc View Source GetCharValue(String) Gets the value of an environment variable in char format. Declaration public virtual char GetCharValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Char A value of the variable in char format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in char format. | Improve this Doc View Source GetDecimalValue(String) Gets the value of an environment variable in decimal format. Declaration public virtual decimal GetDecimalValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Decimal A value of the variable in decimal format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in decimal format. | Improve this Doc View Source GetDoubleValue(String) Gets the value of an environment variable in double format. Declaration public virtual double GetDoubleValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Double A value of the variable in double format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in double format. | Improve this Doc View Source GetFloatValue(String) Gets the value of an environment variable in float format. Declaration public virtual float GetFloatValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Single A value of the variable in float format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in float format. | Improve this Doc View Source GetIntValue(String) Gets the value of an environment variable in int format. Declaration public virtual int GetIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int32 A value of the variable in int format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in int format. | Improve this Doc View Source GetLongValue(String) Gets the value of an environment variable in long format. Declaration public virtual long GetLongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int64 A value of the variable in long format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in long format. | Improve this Doc View Source GetSByteValue(String) Gets the value of an environment variable in sbyte format. Declaration public virtual sbyte GetSByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description SByte A value of the variable in sbyte format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in sbyte format. | Improve this Doc View Source GetShortValue(String) Gets the value of an environment variable in short format. Declaration public virtual short GetShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int16 A value of the variable in short format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in short format. | Improve this Doc View Source GetStringValue(String) Gets the value of an environment variable in string format. Declaration public virtual string GetStringValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description String A value of the variable in string format. Exceptions Type Condition EnvVariableNotFoundException variable is not found in the current process. | Improve this Doc View Source GetUIntValue(String) Gets the value of an environment variable in uint format. Declaration public virtual uint GetUIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt32 A value of the variable in uint format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in uint format. | Improve this Doc View Source GetULongValue(String) Gets the value of an environment variable in ulong format. Declaration public virtual ulong GetULongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt64 A value of the variable in ulong format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in ulong format. | Improve this Doc View Source GetUShortValue(String) Gets the value of an environment variable in ushort format. Declaration public virtual ushort GetUShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt16 A value of the variable in ushort format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in ushort format. | Improve this Doc View Source TryGetBoolValue(String, out Boolean) Try to retrieve the value of an environment variable in bool format. Declaration public virtual bool TryGetBoolValue(string variable, out bool value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Boolean value The bool value retrieved or false . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in bool format. | Improve this Doc View Source TryGetByteValue(String, out Byte) Try to retrieve the value of an environment variable in byte format. Declaration public virtual bool TryGetByteValue(string variable, out byte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Byte value The byte value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in byte format. | Improve this Doc View Source TryGetCharValue(String, out Char) Try to retrieve the value of an environment variable in char format. Declaration public virtual bool TryGetCharValue(string variable, out char value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Char value The char value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in char format. | Improve this Doc View Source TryGetDecimalValue(String, out Decimal) Try to retrieve the value of an environment variable in decimal format. Declaration public virtual bool TryGetDecimalValue(string variable, out decimal value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Decimal value The decimal value retrieved or 0.0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in decimal format. | Improve this Doc View Source TryGetDoubleValue(String, out Double) Try to retrieve the value of an environment variable in double format. Declaration public virtual bool TryGetDoubleValue(string variable, out double value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Double value The double value retrieved or 0.0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in double format. | Improve this Doc View Source TryGetFloatValue(String, out Single) Try to retrieve the value of an environment variable in float format. Declaration public virtual bool TryGetFloatValue(string variable, out float value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Single value The float value retrieved or 0.0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in float format. | Improve this Doc View Source TryGetIntValue(String, out Int32) Try to retrieve the value of an environment variable in int format. Declaration public virtual bool TryGetIntValue(string variable, out int value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int32 value The int value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in int format. | Improve this Doc View Source TryGetLongValue(String, out Int64) Try to retrieve the value of an environment variable in long format. Declaration public virtual bool TryGetLongValue(string variable, out long value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int64 value The long value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in long format. | Improve this Doc View Source TryGetSByteValue(String, out SByte) Try to retrieve the value of an environment variable in sbyte format. Declaration public virtual bool TryGetSByteValue(string variable, out sbyte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. SByte value The sbyte value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in sbyte format. | Improve this Doc View Source TryGetShortValue(String, out Int16) Try to retrieve the value of an environment variable in short format. Declaration public virtual bool TryGetShortValue(string variable, out short value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int16 value The short value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in short format. | Improve this Doc View Source TryGetStringValue(String, out String) Try to retrieve the value of an environment variable in string format. Declaration public virtual bool TryGetStringValue(string variable, out string value) Parameters Type Name Description String variable The variable name of the value to try retrieve. String value The string value retrieved or null . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . | Improve this Doc View Source TryGetUIntValue(String, out UInt32) Try to retrieve the value of an environment variable in uint format. Declaration public virtual bool TryGetUIntValue(string variable, out uint value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt32 value The uint value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in uint format. | Improve this Doc View Source TryGetULongValue(String, out UInt64) Try to retrieve the value of an environment variable in ulong format. Declaration public virtual bool TryGetULongValue(string variable, out ulong value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt64 value The ulong value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in ulong format. | Improve this Doc View Source TryGetUShortValue(String, out UInt16) Try to retrieve the value of an environment variable in ushort format. Declaration public virtual bool TryGetUShortValue(string variable, out ushort value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt16 value The ushort value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in ushort format. Implements IEnvReader System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/DotEnv.Core.EnvVariableNotFoundException.html": {
    "href": "api/DotEnv.Core.EnvVariableNotFoundException.html",
    "title": "Class EnvVariableNotFoundException | DotEnv.Core",
    "keywords": "Class EnvVariableNotFoundException The exception that is thrown when the environment variable is not found in the current process. Inheritance Object Exception EnvVariableNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class EnvVariableNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source EnvVariableNotFoundException(String, String) Initializes a new instance of the EnvVariableNotFoundException class with the a specified error message, the name and value of the variable. Declaration public EnvVariableNotFoundException(string message, string variableName) Parameters Type Name Description String message The message that describes the error. String variableName The variable name that caused the exception. Properties | Improve this Doc View Source Message Declaration public override string Message { get; } Property Value Type Description String Overrides Exception.Message | Improve this Doc View Source VariableName Allows access to the name of the variable that causes the exception. Declaration public string VariableName { get; } Property Value Type Description String Implements System.Runtime.Serialization.ISerializable"
  },
  "api/DotEnv.Core.html": {
    "href": "api/DotEnv.Core.html",
    "title": "Namespace DotEnv.Core | DotEnv.Core",
    "keywords": "Namespace DotEnv.Core Classes EnvLoader Represents the .env file loader. EnvParser Defines the methods that control the parser behavior. EnvParserOptions Represents the options for configuring various behaviors of the parser. EnvReader Defines the methods used to read the value of an environment variable from the current process. EnvVariableNotFoundException The exception that is thrown when the environment variable is not found in the current process. ParserException The exception that is thrown when the parser finds an error during the parsing of the .env file. Interfaces IEnvLoader Represents the .env file loader. IEnvParser Defines the methods that control the parser behavior. IEnvReader Defines the methods used to read the value of an environment variable from the current process."
  },
  "api/DotEnv.Core.IEnvLoader.html": {
    "href": "api/DotEnv.Core.IEnvLoader.html",
    "title": "Interface IEnvLoader | DotEnv.Core",
    "keywords": "Interface IEnvLoader Represents the .env file loader. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvLoader Methods | Improve this Doc View Source AddEnvFile(String) Adds an .env file in a collection. Declaration IEnvLoader AddEnvFile(string path) Parameters Type Name Description String path The .env file path to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AddEnvFile(String, Encoding) Adds an .env file with its encoding in a collection. Declaration IEnvLoader AddEnvFile(string path, Encoding encoding) Parameters Type Name Description String path The .env file path to add. Encoding encoding The encoding of the .env file. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AddEnvFiles(String[]) Adds the .env files in a collection. Declaration IEnvLoader AddEnvFiles(params string[] paths) Parameters Type Name Description String [] paths The .env files paths to add. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting of existing environment variables. This method will tell the parser that it can overwrite the value of an existing variable, i.e. if the variable KEY1 exists, its value can be overwritten. Declaration IEnvLoader AllowOverwriteExistingVars() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white-spaces from the keys. Declaration IEnvLoader DisableTrimEndKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white-spaces from the values. Declaration IEnvLoader DisableTrimEndValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the starts of the comments. This method will tell the parser not to remove leading white-spaces from the comments. Declaration IEnvLoader DisableTrimStartComments() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the starts of the keys. This method will tell the parser not to remove leading white-spaces from the keys. Declaration IEnvLoader DisableTrimStartKeys() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the starts of the values. This method will tell the parser not to remove leading white-spaces from the values. Declaration IEnvLoader DisableTrimStartValues() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source EnableFileNotFoundException() Enables FileNotFoundException when the .env file is not found. Declaration IEnvLoader EnableFileNotFoundException() Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source Load() Loads more than one .env file. Declaration void Load() Remarks This method starts find the .env file in the current directory and if it does not found it, it starts find in the parent directories of the current directory. Exceptions Type Condition ParserException | Improve this Doc View Source SetBasePath(String) Sets the base path for the .env files. Declaration IEnvLoader SetBasePath(string basePath) Parameters Type Name Description String basePath The base path to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source SetDefaultEnvFileName(String) Sets the default name of an .env file. Declaration IEnvLoader SetDefaultEnvFileName(string envFileName) Parameters Type Name Description String envFileName The default name to set. Returns Type Description IEnvLoader An instance implementing the fluent interface. | Improve this Doc View Source SetEncoding(Encoding) Sets the encoding of the .env files. Declaration IEnvLoader SetEncoding(Encoding encoding) Parameters Type Name Description Encoding encoding The type of encoding to set. Returns Type Description IEnvLoader An instance implementing the fluent interface."
  },
  "api/DotEnv.Core.IEnvParser.html": {
    "href": "api/DotEnv.Core.IEnvParser.html",
    "title": "Interface IEnvParser | DotEnv.Core",
    "keywords": "Interface IEnvParser Defines the methods that control the parser behavior. Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvParser Methods | Improve this Doc View Source AllowOverwriteExistingVars() Allows overwriting of existing environment variables. This method will tell the parser that it can overwrite the value of an existing variable, i.e. if the variable KEY1 exists, its value can be overwritten. Declaration IEnvParser AllowOverwriteExistingVars() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndKeys() Disables the trim at the end of the keys. This method will tell the parser not to remove trailing white-spaces from the keys. Declaration IEnvParser DisableTrimEndKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimEndValues() Disables the trim at the end of the values. This method will tell the parser not to remove trailing white-spaces from the values. Declaration IEnvParser DisableTrimEndValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartComments() Disables the trim at the starts of the comments. This method will tell the parser not to remove leading white-spaces from the comments. Declaration IEnvParser DisableTrimStartComments() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartKeys() Disables the trim at the starts of the keys. This method will tell the parser not to remove leading white-spaces from the keys. Declaration IEnvParser DisableTrimStartKeys() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source DisableTrimStartValues() Disables the trim at the starts of the values. This method will tell the parser not to remove leading white-spaces from the values. Declaration IEnvParser DisableTrimStartValues() Returns Type Description IEnvParser An instance implementing the fluent interface. | Improve this Doc View Source Parse(String) Start the parsing to extract the key-value pair from the .env file. Declaration void Parse(string input) Parameters Type Name Description String input The input to parsing. Exceptions Type Condition ParserException If the parser find an error during the parsing."
  },
  "api/DotEnv.Core.IEnvReader.html": {
    "href": "api/DotEnv.Core.IEnvReader.html",
    "title": "Interface IEnvReader | DotEnv.Core",
    "keywords": "Interface IEnvReader Defines the methods used to read the value of an environment variable from the current process. Inherited Members IEnumerable<KeyValuePair<String, String>>.GetEnumerator() IEnumerable.GetEnumerator() Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public interface IEnvReader : IEnumerable<KeyValuePair<string, string>>, IEnumerable Properties | Improve this Doc View Source Item[String] Gets the value of an environment variable in string format. Declaration string this[string variable] { get; } Parameters Type Name Description String variable The variable name of the value to get. Property Value Type Description String The value of the variable in string format. Exceptions Type Condition EnvVariableNotFoundException variable is not found in the current process. Methods | Improve this Doc View Source EnvBool(String, Boolean) Gets the value of an environment variable in bool format. Declaration bool EnvBool(string variable, bool defaultValue = false) Parameters Type Name Description String variable Environment variable name. Boolean defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Boolean A value of the environment variable in bool format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in bool format. | Improve this Doc View Source EnvByte(String, Byte) Gets the value of an environment variable in byte format. Declaration byte EnvByte(string variable, byte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Byte defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Byte A value of the environment variable in byte format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in byte format. | Improve this Doc View Source EnvChar(String, Char) Gets the value of an environment variable in char format. Declaration char EnvChar(string variable, char defaultValue = '\\0') Parameters Type Name Description String variable Environment variable name. Char defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Char A value of the environment variable in char format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in char format. | Improve this Doc View Source EnvDecimal(String, Decimal) Gets the value of an environment variable in decimal format. Declaration decimal EnvDecimal(string variable, decimal defaultValue = 0M) Parameters Type Name Description String variable Environment variable name. Decimal defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Decimal A value of the environment variable in decimal format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in decimal format. | Improve this Doc View Source EnvDouble(String, Double) Gets the value of an environment variable in double format. Declaration double EnvDouble(string variable, double defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Double defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Double A value of the environment variable in double format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in double format. | Improve this Doc View Source EnvFloat(String, Single) Gets the value of an environment variable in float format. Declaration float EnvFloat(string variable, float defaultValue = 0F) Parameters Type Name Description String variable Environment variable name. Single defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Single A value of the environment variable in float format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in float format. | Improve this Doc View Source EnvInt(String, Int32) Gets the value of an environment variable in int format. Declaration int EnvInt(string variable, int defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int32 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Int32 A value of the environment variable in int format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in int format. | Improve this Doc View Source EnvLong(String, Int64) Gets the value of an environment variable in long format. Declaration long EnvLong(string variable, long defaultValue = 0L) Parameters Type Name Description String variable Environment variable name. Int64 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Int64 A value of the environment variable in long format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in long format. | Improve this Doc View Source EnvSByte(String, SByte) Gets the value of an environment variable in sbyte format. Declaration sbyte EnvSByte(string variable, sbyte defaultValue = 0) Parameters Type Name Description String variable Environment variable name. SByte defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description SByte A value of the environment variable in sbyte format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in sbyte format. | Improve this Doc View Source EnvShort(String, Int16) Gets the value of an environment variable in short format. Declaration short EnvShort(string variable, short defaultValue = 0) Parameters Type Name Description String variable Environment variable name. Int16 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description Int16 A value of the environment variable in short format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in short format. | Improve this Doc View Source EnvString(String, String) Gets the value of an environment variable in string format. Declaration string EnvString(string variable, string defaultValue = null) Parameters Type Name Description String variable Environment variable name. String defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description String A value of the environment variable in string format. Remarks If the environment variable does not exist in the current process, the method will return the default value. | Improve this Doc View Source EnvUInt(String, UInt32) Gets the value of an environment variable in uint format. Declaration uint EnvUInt(string variable, uint defaultValue = 0U) Parameters Type Name Description String variable Environment variable name. UInt32 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description UInt32 A value of the environment variable in uint format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in uint format. | Improve this Doc View Source EnvULong(String, UInt64) Gets the value of an environment variable in ulong format. Declaration ulong EnvULong(string variable, ulong defaultValue = 0UL) Parameters Type Name Description String variable Environment variable name. UInt64 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description UInt64 A value of the environment variable in ulong format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in ulong format. | Improve this Doc View Source EnvUShort(String, UInt16) Gets the value of an environment variable in ushort format. Declaration ushort EnvUShort(string variable, ushort defaultValue = 0) Parameters Type Name Description String variable Environment variable name. UInt16 defaultValue A default value in case the environment variable is not found in the current process. Returns Type Description UInt16 A value of the environment variable in ushort format. Remarks If the environment variable does not exist in the current process, the method will return the default value. Exceptions Type Condition FormatException If the value is not in ushort format. | Improve this Doc View Source GetBoolValue(String) Gets the value of an environment variable in bool format. Declaration bool GetBoolValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Boolean A value of the variable in bool format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in bool format. | Improve this Doc View Source GetByteValue(String) Gets the value of an environment variable in byte format. Declaration byte GetByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Byte A value of the variable in byte format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in byte format. | Improve this Doc View Source GetCharValue(String) Gets the value of an environment variable in char format. Declaration char GetCharValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Char A value of the variable in char format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in char format. | Improve this Doc View Source GetDecimalValue(String) Gets the value of an environment variable in decimal format. Declaration decimal GetDecimalValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Decimal A value of the variable in decimal format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in decimal format. | Improve this Doc View Source GetDoubleValue(String) Gets the value of an environment variable in double format. Declaration double GetDoubleValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Double A value of the variable in double format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in double format. | Improve this Doc View Source GetFloatValue(String) Gets the value of an environment variable in float format. Declaration float GetFloatValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Single A value of the variable in float format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in float format. | Improve this Doc View Source GetIntValue(String) Gets the value of an environment variable in int format. Declaration int GetIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int32 A value of the variable in int format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in int format. | Improve this Doc View Source GetLongValue(String) Gets the value of an environment variable in long format. Declaration long GetLongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int64 A value of the variable in long format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in long format. | Improve this Doc View Source GetSByteValue(String) Gets the value of an environment variable in sbyte format. Declaration sbyte GetSByteValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description SByte A value of the variable in sbyte format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in sbyte format. | Improve this Doc View Source GetShortValue(String) Gets the value of an environment variable in short format. Declaration short GetShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description Int16 A value of the variable in short format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in short format. | Improve this Doc View Source GetStringValue(String) Gets the value of an environment variable in string format. Declaration string GetStringValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description String A value of the variable in string format. Exceptions Type Condition EnvVariableNotFoundException variable is not found in the current process. | Improve this Doc View Source GetUIntValue(String) Gets the value of an environment variable in uint format. Declaration uint GetUIntValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt32 A value of the variable in uint format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in uint format. | Improve this Doc View Source GetULongValue(String) Gets the value of an environment variable in ulong format. Declaration ulong GetULongValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt64 A value of the variable in ulong format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in ulong format. | Improve this Doc View Source GetUShortValue(String) Gets the value of an environment variable in ushort format. Declaration ushort GetUShortValue(string variable) Parameters Type Name Description String variable The variable name of the value to get. Returns Type Description UInt16 A value of the variable in ushort format. Exceptions Type Condition EnvVariableNotFoundException If the variable is not found in the current process. FormatException If the value is not in ushort format. | Improve this Doc View Source TryGetBoolValue(String, out Boolean) Try to retrieve the value of an environment variable in bool format. Declaration bool TryGetBoolValue(string variable, out bool value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Boolean value The bool value retrieved or false . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in bool format. | Improve this Doc View Source TryGetByteValue(String, out Byte) Try to retrieve the value of an environment variable in byte format. Declaration bool TryGetByteValue(string variable, out byte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Byte value The byte value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in byte format. | Improve this Doc View Source TryGetCharValue(String, out Char) Try to retrieve the value of an environment variable in char format. Declaration bool TryGetCharValue(string variable, out char value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Char value The char value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in char format. | Improve this Doc View Source TryGetDecimalValue(String, out Decimal) Try to retrieve the value of an environment variable in decimal format. Declaration bool TryGetDecimalValue(string variable, out decimal value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Decimal value The decimal value retrieved or 0.0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in decimal format. | Improve this Doc View Source TryGetDoubleValue(String, out Double) Try to retrieve the value of an environment variable in double format. Declaration bool TryGetDoubleValue(string variable, out double value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Double value The double value retrieved or 0.0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in double format. | Improve this Doc View Source TryGetFloatValue(String, out Single) Try to retrieve the value of an environment variable in float format. Declaration bool TryGetFloatValue(string variable, out float value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Single value The float value retrieved or 0.0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in float format. | Improve this Doc View Source TryGetIntValue(String, out Int32) Try to retrieve the value of an environment variable in int format. Declaration bool TryGetIntValue(string variable, out int value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int32 value The int value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in int format. | Improve this Doc View Source TryGetLongValue(String, out Int64) Try to retrieve the value of an environment variable in long format. Declaration bool TryGetLongValue(string variable, out long value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int64 value The long value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in long format. | Improve this Doc View Source TryGetSByteValue(String, out SByte) Try to retrieve the value of an environment variable in sbyte format. Declaration bool TryGetSByteValue(string variable, out sbyte value) Parameters Type Name Description String variable The variable name of the value to try retrieve. SByte value The sbyte value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in sbyte format. | Improve this Doc View Source TryGetShortValue(String, out Int16) Try to retrieve the value of an environment variable in short format. Declaration bool TryGetShortValue(string variable, out short value) Parameters Type Name Description String variable The variable name of the value to try retrieve. Int16 value The short value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in short format. | Improve this Doc View Source TryGetStringValue(String, out String) Try to retrieve the value of an environment variable in string format. Declaration bool TryGetStringValue(string variable, out string value) Parameters Type Name Description String variable The variable name of the value to try retrieve. String value The string value retrieved or null . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . | Improve this Doc View Source TryGetUIntValue(String, out UInt32) Try to retrieve the value of an environment variable in uint format. Declaration bool TryGetUIntValue(string variable, out uint value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt32 value The uint value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in uint format. | Improve this Doc View Source TryGetULongValue(String, out UInt64) Try to retrieve the value of an environment variable in ulong format. Declaration bool TryGetULongValue(string variable, out ulong value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt64 value The ulong value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in ulong format. | Improve this Doc View Source TryGetUShortValue(String, out UInt16) Try to retrieve the value of an environment variable in ushort format. Declaration bool TryGetUShortValue(string variable, out ushort value) Parameters Type Name Description String variable The variable name of the value to try retrieve. UInt16 value The ushort value retrieved or 0 . Returns Type Description Boolean true if the environment variable exists in the current process, otherwise false . Exceptions Type Condition FormatException If the value is not in ushort format."
  },
  "api/DotEnv.Core.ParserException.html": {
    "href": "api/DotEnv.Core.ParserException.html",
    "title": "Class ParserException | DotEnv.Core",
    "keywords": "Class ParserException The exception that is thrown when the parser finds an error during the parsing of the .env file. Inheritance Object Exception ParserException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : DotEnv.Core Assembly : DotEnv.Core.dll Syntax public class ParserException : Exception, ISerializable Constructors | Improve this Doc View Source ParserException(String, Object, Nullable<Int32>) Initializes a new instance of the ParserException class with the a specified error message, the actual value and the current line number. Declaration public ParserException(string message, object actualValue = null, int? currentLine = null) Parameters Type Name Description String message The message that describes the error. Object actualValue The actual value that caused the exception. Nullable < Int32 > currentLine The current line that caused the exception. Properties | Improve this Doc View Source ActualValue Allows access to the actual value that causes the exception. Declaration public object ActualValue { get; } Property Value Type Description Object | Improve this Doc View Source CurrentLine Allows access to the current line that causes the exception. Declaration public int? CurrentLine { get; } Property Value Type Description Nullable < Int32 > | Improve this Doc View Source Message Declaration public override string Message { get; } Property Value Type Description String Overrides Exception.Message Implements System.Runtime.Serialization.ISerializable"
  },
  "articles/dependency_injection.html": {
    "href": "articles/dependency_injection.html",
    "title": "Dependency Injection | DotEnv.Core",
    "keywords": "Dependency Injection In some cases, classes should not directly create an instance of the EnvReader class, because if you change the implementation, you will have to make changes in the classes that depend on EnvReader . For example: class Foo { private EnvReader _reader; public Foo() { _reader = new EnvReader(); } } class Bar { private EnvReader _reader; public Bar() { _reader = new EnvReader(); } } The classes Foo and Bar create the instance in the constructor, this makes it difficult to reverse the dependency. In the future you could create a new class that inherits from EnvReader and this would cause changes in two classes: Foo and Bar : class CustomEnvReader : EnvReader { // Here we can override some methods. } class Foo { private EnvReader _reader; public Foo() { // change #1 _reader = new CustomEnvReader(); } } class Bar { private EnvReader _reader; public Bar() { // change #2 _reader = new CustomEnvReader(); } } So to avoid those changes in the future, you can make use of Dependency Injection: class Foo { private EnvReader _reader; public Foo(EnvReader reader) { _reader = reader; } } class Bar { private EnvReader _reader; public Bar(EnvReader reader) { _reader = reader; } } You can also make use of the IEnvReader interface instead of the base EnvReader class: class Foo { private IEnvReader _reader; public Foo(IEnvReader reader) { _reader = reader; } } class Bar { private IEnvReader _reader; public Bar(IEnvReader reader) { _reader = reader; } } You probably don't want to inject the dependency manually, as in this example: class Program { static void Main(string[] args) { var foo = new Foo(new CustomEnvReader()); var bar = new Bar(new CustomEnvReader()); // more code... } } So in the end we would consider using a service container to handle dependency injection. Microsoft has created a package in NuGet specifically for this: Microsoft.Extensions.DependencyInjection . The above example could be done in this way using the container DI: // Import all types. using Microsoft.Extensions.DependencyInjection; using DotEnv.Core; class Program { static void Main(string[] args) { // Load the .env file. new EnvLoader().Load(); var services = new ServiceCollection(); // Register services. services.AddSingleton<IEnvReader, EnvReader>() .AddTransient<Foo>() .AddTransient<Bar>(); // Creates the service container. using(var serviceProvider = services.BuildServiceProvider()) { // Retrieves an instance of the service and the container resolves the dependencies. var foo = serviceProvider.GetRequiredService<Foo>(); var bar = serviceProvider.GetRequiredService<Bar>(); } } }"
  },
  "articles/getting_started.html": {
    "href": "articles/getting_started.html",
    "title": "Getting Started with dotenv.core | DotEnv.Core",
    "keywords": "Getting Started with dotenv.core Installation If you're an hardcore and want to do it manually, you must add the following to the csproj file: <PackageReference Include=\"DotEnv.Core\" Version=\"1.0.0\" /> If you're want to install the package from Visual Studio, you must open the project/solution in Visual Studio, and open the console using the Tools > NuGet Package Manager > Package Manager Console command and run the install command: Install-Package DotEnv.Core If you are making use of the dotnet CLI, then run the following in your terminal: dotnet add package DotEnv.Core Usage Loading .env file You must import the namespace types at the beginning of your class file: using DotEnv.Core; Then you can load the .env file with the Load method of the EnvLoader class: new EnvLoader().Load(); By default, the Load method will look for a file called .env in the current directory and if it does not find it, it will look for it in the parent directories of the current directory. The current directory is where the executable with its dependencies is located. Remember that if no encoding is specified to the Load method, the default will be UTF-8 . Accessing the variables After you have loaded the .env file with the Load method, you can access the environment variables using the indexer of the EnvReader class: var reader = new EnvReader(); string key1 = reader[\"KEY1\"]; string key2 = reader[\"KEY2\"]; Or you can also access the environment variables using the static property Instance : string key1 = EnvReader.Instance[\"KEY1\"]; string key2 = EnvReader.Instance[\"KEY2\"]; Changing the default name You can also change the default name of the .env file using the SetDefaultEnvFileName method: new EnvLoader() .SetDefaultEnvFileName(\".env.dev\") .Load(); Now the Load method will look for the .env.dev file in the current directory and in the parent directories if it is not found in the current directory. Another case would be: new EnvLoader() .SetDefaultEnvFileName(\".env.dev\") .AddEnvFiles(\"/foo/foo2\", \"/bar/bar2\") .Load(); The Load method will look for two .env.dev files in the paths /foo/foo2 and /bar/bar2 . Specifying the path absolute You can also specify the absolute path to the .env file: new EnvLoader() .AddEnvFile(\"/home/App/.env.dev\") .Load(); In this case the Load method will search for the file .env.dev in the path /home/App , if it does not find it, the method will not search in the current directory or parent directories. It is recommended not to use absolute paths, instead use relative paths. Remember that an absolute path can be different in each operating system, so your application could lose portability. Loading multiple .env files You can also load multiple .env files in a single call: new EnvLoader() .AddEnvFiles(\"env.example\", \"env.example2\") .Load(); Or you can use the AddEnvFile method: new EnvLoader() .AddEnvFile(\"env.example\") .AddEnvFile(\"env.example2\") .Load(); If you need to specify an encoding type for all .env files, you can do it like this: new EnvLoader() .AddEnvFiles(\"env.example\", \"env.example2\") .SetEncoding(Encoding.Unicode) .Load(); You can also specify an encoding type for each .env file using the AddEnvFile method: new EnvLoader() .AddEnvFile(\"env.example\", Encoding.Unicode) .AddEnvFile(\"env.example2\", Encoding.ASCII) .Load(); Specifying the path relative You can also specify a relative path using the AddEnvFile method: new EnvLoader() .AddEnvFile(\"./dotenv/files\") .Load(); In this case, the .env file is inside a directory, i.e. in files . The Load method will look for the file dotenv/files/.env in the current directory, if it does not find it, it will look for it in parent directories. This is useful when the .env file is located in a different directory than the current one. Specifying base path You can specify one base path for all .env files: new EnvLoader() .SetBasePath(\"./dotenv/files\") .AddEnvFiles(\".env.example\", \".env.example2\") .Load(); In this case, the Base Path is a relative path, so the .env.example and .env.example2 files are inside dotenv/files . Throw FileNotFoundException By default, the Load method does not throw any exception if it does not found the .env file but you can change this behavior if you use the EnableFileNotFoundException method: try { new EnvLoader() .EnableFileNotFoundException() .Load(); } catch(FileNotFoundException ex) { System.Console.WriteLine(ex.Message); } Note: If you don't know what each class does, don't forget to check the API documentation ."
  },
  "articles/more_options_for_loader.html": {
    "href": "articles/more_options_for_loader.html",
    "title": "More options for the Loader | DotEnv.Core",
    "keywords": "More options for the Loader There are some options that are for the parser, but we can also use it through the EnvLoader class. DisableTrimStartKeys Disable the trim at the beginning of the keys: new EnvLoader() .DisableTrimStartKeys() .Load(); This method will tell the parser not to remove leading white-spaces from the keys. DisableTrimEndKeys Disable the trim at the end of the keys: new EnvLoader() .DisableTrimEndKeys() .Load(); This method will tell the parser not to remove trailing white-spaces from the keys. DisableTrimStartValues Disable the trim at the beginning of the values: new EnvLoader() .DisableTrimStartValues() .Load(); This method will tell the parser not to remove leading white-spaces from the values. DisableTrimEndValues Disable the trim at the end of the values: new EnvLoader() .DisableTrimEndValues() .Load(); This method will tell the parser not to remove trailing white-spaces from the values. DisableTrimStartComments Disable the trim at the beginning of the comments: new EnvLoader() .DisableTrimStartComments() .Load(); This method will tell the parser not to remove leading white-spaces from the comments. AllowOverwriteExistingVars Allows to overwrite the current value of an existing environment variable: new EnvLoader() .AllowOverwriteExistingVars() .Load(); Imagine that if there is an environment variable called KEY1 whose value is 1 , then in an .env file there can be a key named KEY1 whose value is 2 , if this option is enabled, then, when the parser reads KEY1 from the .env file, it will overwrite the value of KEY1 by 2 . As a side note , the EnvLoader class has a parameterized constructor in which you can specify a custom parser. You can inherit from EnvParser and inject the instance into the constructor."
  },
  "articles/using_dotenv_aspnetcore.html": {
    "href": "articles/using_dotenv_aspnetcore.html",
    "title": "Using DotEnv in ASP.NET Core | DotEnv.Core",
    "keywords": "Using DotEnv in ASP.NET Core Use the dotenv.core library in ASP. NET Core is very easy, the only thing you have to do, is to open the Startup.cs file and then add the following code in the ConfigureServices method: public void ConfigureServices(IServiceCollection services) { // To load the .env file. new EnvLoader().Load(); // To register the IEnvReader service. services.AddSingleton<IEnvReader, EnvReader>(); // more services... } It is useful to register the IEnvReader service when other classes use the IEnvReader interface, however, it is optional. Of course, you can also load the .env file in the main method: public static void Main(string[] args) { // To load the .env file. new EnvLoader().Load(); CreateHostBuilder(args).Build().Run(); } public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder => { webBuilder.UseStartup<Startup>(); }); Maybe you are using .NET 6, so you won't find a Startup.cs file or main method. Simply load the .env file into the Program.cs file. For example: // In Program.cs var builder = WebApplication.CreateBuilder(args); // To load the .env file. new EnvLoader().Load(); // Add services to the container. builder.services.AddSingleton<IEnvReader, EnvReader>(); var app = builder.Build(); // Configure the HTTP request pipeline. if (!app.Environment.IsDevelopment()) { app.UseExceptionHandler(\"/Error\"); } app.UseStaticFiles(); app.UseRouting(); app.UseAuthorization(); app.MapRazorPages(); app.Run();"
  },
  "articles/using_helpers.html": {
    "href": "articles/using_helpers.html",
    "title": "Using Helpers | DotEnv.Core",
    "keywords": "Using Helpers Get{Type}Value The EnvReader class has multiple helper methods, so methods starting with the word Get will throw an exception when the variable does not found in the current process: GetStringValue GetIntValue GetLongValue GetFloatValue //and so on... For example: var reader = new EnvReader(); try { string key = reader[\"KEY\"]; string key1 = reader.GetStringValue(\"KEY1\"); int key2 = reader.GetIntValue(\"KEY2\"); long key3 = reader.GetLongValue(\"KEY3\"); float key4 = reader.GetFloatValue(\"KEY4\"); } catch(EnvVariableNotFoundException ex) { System.Console.WriteLine(ex.Message); } Don't forget to consult the API documentation for more helper methods starting with the word Get . TryGet{Type}Value The helper methods that begin with the word Try do not throw an exception, but return a false value when the variable does not exist in the current process: TryGetStringValue TryGetIntValue TryGetLongValue TryGetFloatValue //and so on... For example: var reader = new EnvReader(); if(reader.TryGetStringValue(\"KEY1\", out string value1)) { System.Console.WriteLine(value1); } else { System.Console.WriteLine(\"Variable not found!\"); } if(reader.TryGetIntValue(\"KEY2\", out int value2)) { System.Console.WriteLine(value2); } else { System.Console.WriteLine(\"Variable not found!\"); } Don't forget to consult the API documentation for more helper methods starting with the word Try . Env{Type} The helper methods starting with the word Env return a default value when the variable does not exist in the current process: EnvString EnvInt EnvLong EnvFloat //and so on... For example: var reader = new EnvReader(); string key1 = reader.EnvString(\"KEY1\", \"Variable Not Found!\"); int key2 = reader.EnvInt(\"KEY2\", -1); long key3 = reader.EnvLong(\"KEY3\", -1); float key4 = reader.EnvFloat(\"KEY4\", -1.0F); Then, if for example, the variable KEY1 does not exist in the current process, then the method returns Variable Not Found! (default value). The second parameter is optional: var reader = new EnvReader(); string key1 = reader.EnvString(\"KEY1\"); // default value: null int key2 = reader.EnvInt(\"KEY2\"); // default value: 0 long key3 = reader.EnvLong(\"KEY3\"); // default value: 0 float key4 = reader.EnvFloat(\"KEY4\"); // default value: 0.0 Here for example, if KEY1 does not exist, the method returns null (default value). Don't forget to consult the API documentation for more helper methods starting with the word Env . Customize EnvReader You can also create a class that inherits from the EnvReader class and can add new methods or override existing methods: class CustomEnvReader : EnvReader { public override string GetStringValue(string variable) { // Here you can write your own implementation. } public override bool TryGetStringValue(string variable, out string value) { // Here you can write your own implementation. } public override string EnvString(string variable, string defaultValue = default) { // Here you can write your own implementation. } //and so on... } Iterate You can also access all environment variables of the current process using the iterator: var reader = new EnvReader(); foreach(string(key, value) in reader) System.Console.WriteLine($\"{key}, {value}\");"
  },
  "articles/using_parser.html": {
    "href": "articles/using_parser.html",
    "title": "Using Parser | DotEnv.Core",
    "keywords": "Using Parser You can also use the parser directly, as in this example: string envFile = @\" KEY1=VAL1 KEY2=VAL2 KEY3=VAL3 \"; new EnvParser().Parse(envFile); System.Console.WriteLine(EnvReader.Instance[\"KEY1\"]); // Print \"VAL1\". System.Console.WriteLine(EnvReader.Instance[\"KEY2\"]); // Print \"VAL2\". System.Console.WriteLine(EnvReader.Instance[\"KEY3\"]); // Print \"VAL3\". As an additional note , if a key already exists as an environment variable, its value will not be overwritten. For example, if the key KEY1 exists in the current process as an environment variable, then its value will not be overwritten by VAL1 . For example: System.Environment.SetEnvironmentVariable(\"KEY1\", \"1\"); new EnvParser().Parse(\"KEY1=VAL1\"); System.Console.WriteLine(EnvReader.Instance[\"KEY1\"]); // Print \"1\". In this case, the parser does not overwrite the variable KEY1 , so its current value is maintained. You can also retrieve the keys from a file and pass it to the parser: string envFile = System.IO.File.ReadAllText(\"./.env\"); new EnvParser().Parse(envFile); Configuring parser behavior You can also select options for the parser in order to change its behavior: string envFile = System.IO.File.ReadAllText(\"./.env\"); new EnvParser() .DisableTrimStartKeys() .DisableTrimStartValues() .Parse(envFile); In the above case, the parser is instructed not to remove leading spaces from keys and values. Don't forget to look up in the API documentation what each configuration option means. Customizing the parser algorithm You can also create a class that inherits from EnvParser and then you can override its methods: class CustomEnvParser : EnvParser { protected override bool IsComment(string line) { // Here you can add your own implementation. } protected override string ExtractKey(string line) { // Here you can add your own implementation. } protected override string ExtractValue(string line) { // Here you can add your own implementation. } protected override bool HasNoKeyValuePair(string line) { // Here you can add your own implementation. } protected override void SetEnvironmentVariable(string key, string value) { // Here you can add your own implementation. } } This is useful when you need to customize the parser and change its internal behavior. You can also tell the Load method of the EnvLoader class what type of parser it should use: new EnvLoader(new CustomEnvParser()) .Load(); Note: If you don't know what each class does, don't forget to check the API documentation . Parser rules Each line beginning with the # character is a comment. White-spaces at the beginning of each comment will be ignored. Empty lines or lines with white-spaces will be ignored. If the data source (probably an .env file) is empty or consists only white-spaces, an exception is thrown. The key-value format must be as follows: KEY=VAL . There is no special handling of quotation marks. This means that they are part of the VAL. If the key is an empty string, an exception is thrown. If the value of a key is an empty string, it will be converted to a white-space. White-spaces at both ends of the key/value are ignored."
  },
  "diagrams/class_diagram.html": {
    "href": "diagrams/class_diagram.html",
    "title": "Class Diagram | DotEnv.Core",
    "keywords": "Class Diagram Click here"
  },
  "index.html": {
    "href": "index.html",
    "title": "Features | DotEnv.Core",
    "keywords": "dotenv.core is a class library for read .env files and also provides a mechanism to retrieve the value of an environment variable in a simple and easy way. Features It has a fluent interface , which makes it simple and easy to use. Support for load multiple .env files. Searches in parent directories when it does not find the .env file in the current directory. You can customize the parser algorithm through inheritance. You can set the base path for a set of .env files. You can change the default .env file name, so it does not necessarily have to be .env . Basic Concepts What is a .env file? A .env file or dotenv file is a simple text configuration file for controlling your Applications environment constants. What do .env files look like? .env files are line delimitated text files, meaning that each new line represents a single variable. By convention .env variable names are uppercase words separated by underscores. Variable names are followed directly by an = which, in turn is followed directly by the value, for example: VARIABLE_NAME=value What is environment variable? An environment variable is a dynamic variable that can affect the behavior of running processes on a computer. They are part of the environment in which a process runs. Deployment in Production In production, you should not add sensitive data (such as passwords) to an .env file, as it would be unencrypted! Instead, you should use a secrets manager such as Azure Key Vault or AWS Secrets Manager ."
  }
}